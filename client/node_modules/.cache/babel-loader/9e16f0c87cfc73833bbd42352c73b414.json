{"ast":null,"code":"const SERVER_ORIGIN = \"localhost:8080\";\nconst URL = \"http://\" + SERVER_ORIGIN;\nconst SERVER_PATHS = {\n  CONNECTING: \"/connect\",\n  STATE: \"/state\",\n  BOUNDARIES: \"/boundaries\",\n  DEMOGRAPHIC_FILTER: \"/demographicfilter\",\n  JOB: \"/job\",\n  PLAN: \"/plan\",\n  BOXWHISKER: \"/boxwhisker\",\n  DELETE: \"/delete\",\n  CANCEL: \"/cancel\",\n  GENERATE_JOB: \"/generate\",\n  GENERATE_HEATMAP: \"/heatmap\"\n};\nconst myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n/** \r\n* @param method HTTP Request Method \r\n* @param data HTTP body\r\n* @returns  An object containing any custom settings that you want to apply to the fetch() request.\r\n*\r\n**/\n\nfunction createFetchOptions(method, data = \"\") {\n  let body = JSON.stringify(data);\n  let requestOptions = {\n    method: method,\n    mode: 'cors',\n    headers: myHeaders,\n    body: body\n  };\n  console.log(requestOptions);\n  return requestOptions;\n}\n\nexport async function connectToServer() {\n  console.log(\"Connecting to Server\");\n  const requestOptions = createFetchOptions('GET');\n  const NEW_URL = URL + SERVER_PATHS.CONNECTING;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\n/** \r\n* @param path The desired state a user wants. \r\n**/\n\nexport async function getState(data) {\n  console.log(\"Gettting State\");\n  const requestOptions = createFetchOptions('GET');\n  const NEW_URL = URL + SERVER_PATHS.STATE + \"/\" + data.state;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\nexport async function getBoundaries(path) {}\nexport async function getJob(data) {\n  console.log(\"Getting Job\");\n  const requestOptions = createFetchOptions('GET');\n  const NEW_URL = URL + SERVER_PATHS.JOB + \"/\" + data.job.id;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\nexport async function getPlan(data) {\n  console.log(\"Getting Plan\");\n  const requestOptions = createFetchOptions('GET');\n  const NEW_URL = URL + SERVER_PATHS.JOB + \"/\" + data.job.id + \"/\" + data.plan.id;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\nexport async function getPlanGraph(data) {\n  console.log(\"Getting Box n Whisker For Plan\");\n  const requestOptions = createFetchOptions('GET');\n  const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\nexport async function cancelJob(data) {\n  console.log(\"Cancel\");\n  const requestOptions = createFetchOptions('PUT');\n  const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\nexport async function deleteJob(data) {\n  console.log(\"Delete\");\n  const requestOptions = createFetchOptions('DELETE');\n  const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\nexport async function generateJob(data) {\n  console.log(\"Generating Job\");\n  const requestOptions = createFetchOptions('POST', data);\n  const NEW_URL = URL + SERVER_PATHS.JOB;\n  return fetch(NEW_URL, requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error is:', error));\n}\nexport async function generateHeatMap(data) {\n  console.log(\"Generating Job\");\n  const requestOptions = createFetchOptions('POST', data);\n  const NEW_URL = URL + SERVER_PATHS.GENERATE_HEATMAP;\n  return fetch(NEW_URL, requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error is:', error));\n}","map":{"version":3,"sources":["C:/Users/mdari/Desktop/416 Project/CSE-416-Project/client/src/endpoint/Client.js"],"names":["SERVER_ORIGIN","URL","SERVER_PATHS","CONNECTING","STATE","BOUNDARIES","DEMOGRAPHIC_FILTER","JOB","PLAN","BOXWHISKER","DELETE","CANCEL","GENERATE_JOB","GENERATE_HEATMAP","myHeaders","Headers","append","createFetchOptions","method","data","body","JSON","stringify","requestOptions","mode","headers","console","log","connectToServer","NEW_URL","response","fetch","catch","error","getState","state","getBoundaries","path","getJob","job","id","getPlan","plan","getPlanGraph","cancelJob","deleteJob","generateJob","then","text","result","generateHeatMap"],"mappings":"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","sourcesContent":["const SERVER_ORIGIN  = \"localhost:8080\" ;\r\nconst URL = \"http://\" + SERVER_ORIGIN;\r\nconst SERVER_PATHS = {\r\n    CONNECTING: \"/connect\",\r\n    STATE: \"/state\",\r\n    BOUNDARIES: \"/boundaries\",\r\n    DEMOGRAPHIC_FILTER: \"/demographicfilter\",\r\n    JOB: \"/job\",\r\n    PLAN: \"/plan\",\r\n    BOXWHISKER: \"/boxwhisker\",\r\n    DELETE:\"/delete\",\r\n    CANCEL:\"/cancel\",\r\n    GENERATE_JOB: \"/generate\",\r\n    GENERATE_HEATMAP: \"/heatmap\",\r\n}\r\nconst myHeaders = new Headers();\r\nmyHeaders.append(\"Content-Type\", \"application/json\");\r\nmyHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\r\n\r\n/** \r\n* @param method HTTP Request Method \r\n* @param data HTTP body\r\n* @returns  An object containing any custom settings that you want to apply to the fetch() request.\r\n*\r\n**/\r\nfunction createFetchOptions(method, data=\"\"){\r\n    let body = JSON.stringify(data)\r\n    let requestOptions = {\r\n        method: method,\r\n        mode: 'cors',\r\n        headers: myHeaders,\r\n        body: body\r\n    }\r\n    console.log(requestOptions)\r\n    return requestOptions\r\n}\r\n\r\nexport async function connectToServer(){\r\n    console.log(\"Connecting to Server\");\r\n    const requestOptions = createFetchOptions('GET');\r\n    const NEW_URL = URL + SERVER_PATHS.CONNECTING;\r\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\r\n    return response; \r\n}\r\n\r\n/** \r\n* @param path The desired state a user wants. \r\n**/\r\nexport async function getState(data){\r\n    console.log(\"Gettting State\");\r\n    const requestOptions = createFetchOptions('GET');\r\n    const NEW_URL = URL + SERVER_PATHS.STATE + \"/\" + data.state;\r\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\r\n    return response; \r\n}\r\n\r\nexport async function getBoundaries(path){\r\n\r\n}\r\n\r\nexport async function getJob(data){\r\n    console.log(\"Getting Job\");\r\n    const requestOptions = createFetchOptions('GET');\r\n    const NEW_URL = URL + SERVER_PATHS.JOB + \"/\" + data.job.id;\r\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\r\n    return response; \r\n}\r\nexport async function getPlan(data){\r\n    console.log(\"Getting Plan\");\r\n    const requestOptions = createFetchOptions('GET');\r\n    const NEW_URL = URL + SERVER_PATHS.JOB + \"/\" + data.job.id + \"/\" + data.plan.id\r\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\r\n    return response; \r\n}\r\nexport async function getPlanGraph(data){\r\n    console.log(\"Getting Box n Whisker For Plan\");\r\n    const requestOptions = createFetchOptions('GET');\r\n    const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id\r\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\r\n    return response; \r\n}\r\nexport async function cancelJob(data){\r\n    console.log(\"Cancel\");\r\n    const requestOptions = createFetchOptions('PUT');\r\n    const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id\r\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\r\n    return response; \r\n}\r\n\r\nexport async function deleteJob(data){\r\n    console.log(\"Delete\");\r\n    const requestOptions = createFetchOptions('DELETE');\r\n    const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id\r\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\r\n    return response; \r\n}\r\n\r\nexport async function generateJob(data){\r\n    console.log(\"Generating Job\");\r\n    const requestOptions = createFetchOptions('POST', data);\r\n    const NEW_URL = URL + SERVER_PATHS.JOB;\r\n    return fetch(NEW_URL, requestOptions)\r\n    .then(response => response.text())\r\n    .then(result => console.log(result))\r\n    .catch(error => console.log('error is:', error));\r\n}\r\n\r\nexport async function generateHeatMap(data){\r\n    console.log(\"Generating Job\");\r\n    const requestOptions = createFetchOptions('POST', data);\r\n    const NEW_URL = URL + SERVER_PATHS.GENERATE_HEATMAP;\r\n    return fetch(NEW_URL, requestOptions)\r\n    .then(response => response.text())\r\n    .then(result => console.log(result))\r\n    .catch(error => console.log('error is:', error));\r\n}"]},"metadata":{},"sourceType":"module"}