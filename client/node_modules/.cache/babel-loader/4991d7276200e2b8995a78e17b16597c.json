{"ast":null,"code":"var _jsxFileName = \"/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/components/homePage/Main Panel/JobCards/JobCard.js\";\nimport React, { Component } from 'react';\nimport ModalJob from './ModalJob';\nimport DeleteModal from './DeleteModal';\n\nclass JobCard extends Component {\n  constructor() {\n    super();\n\n    this.toggleSelection = e => {\n      // do something with Job\n      if (this.props.status == \"Pending\") return;\n\n      if (this.state.showViewModal == true && this.props.selectedJobCheck == false) {\n        this.setState({\n          showViewModal: false\n        });\n        this.goTop = \"\";\n      }\n\n      if (this.state.selected == false && this.props.selectedJobCheck == false) {\n        // Select\n        this.setState({\n          selected: true\n        });\n        this.props.toggleSelectedCard();\n        this.props.updateCurrentJob(this.state.name);\n        this.goTop = \"goTopJob \";\n      } else if (this.state.selected == false && this.props.selectedJobCheck == true) {\n        // Cant Select\n        this.setState({\n          selected: false\n        });\n        this.goTop = \"\";\n      } else if (this.state.selected == true && this.props.selectedJobCheck == true) {\n        // Deselect\n        this.setState({\n          selected: false\n        });\n        this.props.toggleSelectedCard();\n        this.props.updateCurrentJob(\"\");\n        this.goTop = \"\";\n      } else {// is currently selected, but not selected card. do nothing. (impossible scenario)\n      } // and check if you did this through modal\n\n    };\n\n    this.toggleViewModal = e => {\n      e.stopPropagation();\n      if (this.state.showViewModal == true) this.setState({\n        showViewModal: false\n      });else this.setState({\n        showViewModal: true\n      });\n    };\n\n    this.toggleDeleteModal = e => {\n      e.stopPropagation();\n      if (this.state.showDeleteModal == false) this.setState({\n        showDeleteModal: true\n      });else this.setState({\n        showDeleteModal: false\n      });\n    };\n\n    this.state = {\n      // Attributes of job card\n      selected: false,\n      name: \"\",\n      // originally empty, gets filled when we render\n      id: \"2\",\n      summary: \"\",\n      // this would be the analysis summary, display in modal\n      // Toggle Modals\n      showViewModal: false,\n      showDeleteModal: false\n    }; // Class Name (Designs, vary based on selection)\n\n    this.JobCardClassStyle = \"\";\n    this.goTop = \"\";\n    this.statusColor = \"\";\n  }\n\n  render() {\n    // Whenever we do setState, it rerenders\n    if (this.state.selected == true) {\n      this.JobCardClassStyle = \"jobCard badge badge-pill badge-dark \";\n    } else {\n      this.JobCardClassStyle = \"jobCard badge badge-pill badge-light \";\n    } // here I would say, let's check if status is ready\n\n\n    if (this.props.status == \"Completed\") this.statusColor = \" jobSuccess \";else if (this.props.status == \"Pending\") this.statusColor = \" jobPending \"; // --------------------------------------------------------\n    // LETS SET THE NAME / COMPACTNESS / NUMBER PLANS\n    // Check Job name, if it's empty the id is the name\n    // --------------------------------------------------------\n\n    if (this.props.jobName == \"\") this.setState({\n      name: \"Job \" + this.jobCard.id\n    }); // default name \n    else if (this.props.jobName != this.state.name) this.setState({\n        name: this.props.jobName\n      }); // custom name\n\n    this.compactness = this.props.compactness;\n    this.numberPlans = this.props.numberPlans;\n    this.populationLimit = this.props.populationLimit;\n    this.minorityAnalyzed = this.props.minorityAnalyzed;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: this.JobCardClassStyle + this.goTop + this.statusColor,\n      onClick: this.toggleSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jobcardContents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"jobcardDelete badge badge-pill badge-danger\",\n      onClick: this.toggleDeleteModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"deleteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 124\n      }\n    }, \" X \"), \" \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"jobcardTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 25\n      }\n    }, \" \", this.state.name, \" \"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"jobcardView badge badge-pill badge-dark\",\n      onClick: this.toggleViewModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 117\n      }\n    }, \" View \"), \" \")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(DeleteModal, {\n      showDeleteModal: this.state.showDeleteModal,\n      deleteJob: this.props.deleteJob,\n      toggleDeleteModal: this.toggleDeleteModal,\n      jobName: this.props.jobName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ModalJob, {\n      populationLimit: this.populationLimit,\n      minorityAnalyzed: this.minorityAnalyzed,\n      compactness: this.compactness,\n      numberPlans: this.numberPlans,\n      status: this.props.status,\n      currentSelected: this.state.selected,\n      selectedJobCheck: this.props.selectedJobCheck,\n      toggleSelection: this.toggleSelection,\n      jobName: this.props.jobName,\n      toggleViewModal: this.toggleViewModal,\n      showViewModal: this.state.showViewModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default JobCard;","map":{"version":3,"sources":["/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/components/homePage/Main Panel/JobCards/JobCard.js"],"names":["React","Component","ModalJob","DeleteModal","JobCard","constructor","toggleSelection","e","props","status","state","showViewModal","selectedJobCheck","setState","goTop","selected","toggleSelectedCard","updateCurrentJob","name","toggleViewModal","stopPropagation","toggleDeleteModal","showDeleteModal","id","summary","JobCardClassStyle","statusColor","render","jobName","jobCard","compactness","numberPlans","populationLimit","minorityAnalyzed","deleteJob"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ModalJob from './ModalJob'\nimport DeleteModal from './DeleteModal'\n\nclass JobCard extends Component {\n    constructor () {\n        super();\n        this.state = {\n\n            // Attributes of job card\n            selected : false,\n            name : \"\", // originally empty, gets filled when we render\n            id : \"2\",\n            summary : \"\", // this would be the analysis summary, display in modal\n\n            // Toggle Modals\n            showViewModal : false,\n            showDeleteModal : false,\n        }\n\n        // Class Name (Designs, vary based on selection)\n        this.JobCardClassStyle = \"\";\n        this.goTop = \"\";\n        this.statusColor = \"\";\n    }\n\n    toggleSelection = (e) => {\n        // do something with Job\n\n        if (this.props.status == \"Pending\") return;\n\n        if (this.state.showViewModal == true && this.props.selectedJobCheck== false) {\n            this.setState({showViewModal : false});\n            this.goTop=\"\";\n        }\n\n        if (this.state.selected == false && this.props.selectedJobCheck== false) {\n            // Select\n            this.setState({selected: true});\n            this.props.toggleSelectedCard();\n            this.props.updateCurrentJob(this.state.name);\n            this.goTop=\"goTopJob \";\n        }\n        else if (this.state.selected == false && this.props.selectedJobCheck == true) {\n            // Cant Select\n            this.setState({selected : false});\n            this.goTop=\"\";\n        }\n        else if (this.state.selected == true && this.props.selectedJobCheck == true) {\n            // Deselect\n            this.setState({selected: false});\n            this.props.toggleSelectedCard();\n            this.props.updateCurrentJob(\"\");\n            this.goTop=\"\";\n        }\n        else {\n            // is currently selected, but not selected card. do nothing. (impossible scenario)\n        }\n\n        // and check if you did this through modal\n    }\n\n    toggleViewModal = (e) => {\n        e.stopPropagation();\n        if (this.state.showViewModal == true) this.setState({showViewModal : false});\n        else this.setState({showViewModal : true});\n    }\n\n    toggleDeleteModal = (e) => {\n        e.stopPropagation();\n        if (this.state.showDeleteModal == false) this.setState({showDeleteModal : true});\n        else this.setState({showDeleteModal : false});\n    }\n\n    render() {\n\n        // Whenever we do setState, it rerenders\n        if (this.state.selected == true) {\n            this.JobCardClassStyle = \"jobCard badge badge-pill badge-dark \";\n        }\n        else {\n            this.JobCardClassStyle = \"jobCard badge badge-pill badge-light \";\n        }\n\n        // here I would say, let's check if status is ready\n        if (this.props.status == \"Completed\" ) this.statusColor = \" jobSuccess \";\n        else if (this.props.status == \"Pending\") this.statusColor = \" jobPending \";\n\n        // --------------------------------------------------------\n              // LETS SET THE NAME / COMPACTNESS / NUMBER PLANS\n            // Check Job name, if it's empty the id is the name\n        // --------------------------------------------------------\n\n        if (this.props.jobName == \"\") this.setState({name : \"Job \" + this.jobCard.id}); // default name \n        else if (this.props.jobName != this.state.name) this.setState({name : this.props.jobName}); // custom name\n\n        this.compactness = this.props.compactness;\n        this.numberPlans = this.props.numberPlans;\n        this.populationLimit = this.props.populationLimit;\n        this.minorityAnalyzed = this.props.minorityAnalyzed;\n\n        return (\n            <div> \n                <div className={this.JobCardClassStyle + this.goTop + this.statusColor} onClick={this.toggleSelection}>\n                    <div className=\"jobcardContents\">\n                        <button className=\"jobcardDelete badge badge-pill badge-danger\" onClick={this.toggleDeleteModal} > <div className=\"deleteText\"> X </div> </button>\n                        <span className=\"jobcardTitle\"> {this.state.name} </span> \n                        <button className=\"jobcardView badge badge-pill badge-dark\" onClick={this.toggleViewModal}> <div className=\"viewText\" > View </div> </button>\n                    </div> \n                    <br /> \n                    <br />\n                </div>\n                <DeleteModal showDeleteModal={this.state.showDeleteModal} deleteJob={this.props.deleteJob} toggleDeleteModal={this.toggleDeleteModal} jobName={this.props.jobName} />\n                <ModalJob populationLimit={this.populationLimit} minorityAnalyzed={this.minorityAnalyzed} compactness={this.compactness} \n                numberPlans={this.numberPlans} status={this.props.status} currentSelected={this.state.selected} selectedJobCheck={this.props.selectedJobCheck} \n                toggleSelection={this.toggleSelection} jobName={this.props.jobName} toggleViewModal={this.toggleViewModal} showViewModal={this.state.showViewModal}\n                />\n            </div>\n        );\n    }\n}\n\nexport default JobCard;"]},"metadata":{},"sourceType":"module"}