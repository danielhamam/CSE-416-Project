{"ast":null,"code":"var _jsxFileName = \"/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/App.js\";\nimport HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Dev\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport { generateJob, getState } from './endpoint/Client';\nimport './css/project_styles.css'; // App.js is the parent component\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jobCards: [],\n      selectedJobCheck: false,\n      selectedPlanCheck: false,\n      currentState: \"Select a state\",\n      currentJobName: \"No Job Selected: \",\n      // name of the currently selected job\n      // selectedJobName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n      // Map View Filters \n      selectedFilters: null,\n      precinctView: false,\n      districtView: false,\n      stateView: true\n    };\n\n    this.receiveJobs = () => {};\n\n    this.createJob = () => {\n      let res = generateJob();\n    };\n\n    this.deleteJob = id => {// string\n    };\n\n    this.deletePlan = id => {// num\n    };\n\n    this.getSelectedJob = () => {// returns selected job\n      // .map and .filter use\n      // call in your districting plans and do .districtPlans from job's database for plans\n    };\n\n    this.toggleSelectedJobCheck = () => {\n      if (this.state.selectedJobCheck == false) this.setState({\n        selectedJobCheck: true\n      });else this.setState({\n        selectedJobCheck: false\n      });\n    };\n\n    this.toggleSelectedPlanCheck = () => {\n      if (this.state.selectedPlanCheck == false) this.setState({\n        selectedPlanCheck: true\n      });else this.setState({\n        selectedPlanCheck: false\n      });\n    };\n\n    this.updateCurrentJobName = name => {\n      if (name == \"\") this.setState({\n        currentJobName: \"No Job Selected: \"\n      });else this.setState({\n        currentJobName: name + \":\"\n      });\n    };\n\n    this.changeCurrentState = newName => {\n      this.setState({\n        currentState: newName\n      });\n    };\n\n    this.changeSelectedFilters = selected => {\n      this.setState({\n        selectedFilters: selected\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(HomeScreen, {\n      currentState: this.state.currentState,\n      changeSelectedFilters: this.changeSelectedFilters,\n      changeCurrentState: this.changeCurrentState,\n      currentJobName: this.state.currentJobName,\n      updateCurrentJobName: this.updateCurrentJobName,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      toggleSelectedPlanCheck: this.toggleSelectedPlanCheck,\n      selectedJobCheck: this.state.selectedJobCheck,\n      toggleSelectedJobCheck: this.toggleSelectedJobCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(DeveloperScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/App.js"],"names":["HomeScreen","DeveloperScreen","React","Component","BrowserRouter","Route","Redirect","Switch","generateJob","getState","App","state","jobCards","selectedJobCheck","selectedPlanCheck","currentState","currentJobName","selectedFilters","precinctView","districtView","stateView","receiveJobs","createJob","res","deleteJob","id","deletePlan","getSelectedJob","toggleSelectedJobCheck","setState","toggleSelectedPlanCheck","updateCurrentJobName","name","changeCurrentState","newName","changeSelectedFilters","selected","render"],"mappings":"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","sourcesContent":["import HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Dev\"\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport {\n  generateJob,\n  getState\n} from './endpoint/Client';\nimport './css/project_styles.css';\n\n// App.js is the parent component\nclass App extends Component {\n    state = {\n      jobCards : [],\n      selectedJobCheck: false,\n      selectedPlanCheck: false,\n      currentState : \"Select a state\",\n      currentJobName : \"No Job Selected: \", // name of the currently selected job\n      // selectedJobName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n              \n      // Map View Filters \n      selectedFilters : null,\n      precinctView : false,\n      districtView : false,\n      stateView : true\n      \n    }\n\n  receiveJobs = () => {\n\n  }\n\n  createJob = () => {\n    let res = generateJob();\n  }\n\n  deleteJob = (id) => { // string\n\n  }\n\n  deletePlan = (id) => { // num\n\n  }\n\n  getSelectedJob = () => {\n    // returns selected job\n    // .map and .filter use\n    // call in your districting plans and do .districtPlans from job's database for plans\n  }\n  \n  toggleSelectedJobCheck = () => {\n    if (this.state.selectedJobCheck == false) this.setState({selectedJobCheck : true});\n    else this.setState({selectedJobCheck : false});\n}\n\n  toggleSelectedPlanCheck = () => {\n    if (this.state.selectedPlanCheck == false) this.setState({selectedPlanCheck: true});\n    else this.setState({selectedPlanCheck : false});\n}\n\n  updateCurrentJobName = (name) => {\n    if (name == \"\") this.setState({currentJobName : \"No Job Selected: \"});\n    else this.setState({currentJobName : name + \":\"});\n  }\n\n  // Map Manipulation Functions\n  changeCurrentState = (newName) => {\n    this.setState({currentState : newName});\n  }\n\n  changeSelectedFilters = (selected) => {\n    this.setState({selectedFilters : selected});\n  }\n\n  render() {\n  return (\n    <div >\n\n        {/* <BrowserRouter>\n          <Switch>\n            <Redirect exact from=\"/\" to={{ pathname: \"/home\" }} />\n            <Route path=\"/home\"> */}\n            <HomeScreen currentState={this.state.currentState} changeSelectedFilters={this.changeSelectedFilters} changeCurrentState={this.changeCurrentState} currentJobName ={this.state.currentJobName} updateCurrentJobName={this.updateCurrentJobName} selectedPlanCheck={this.state.selectedPlanCheck} toggleSelectedPlanCheck={this.toggleSelectedPlanCheck} selectedJobCheck={this.state.selectedJobCheck} toggleSelectedJobCheck={this.toggleSelectedJobCheck}/>\n            {/* </Route> */}\n            {/* <Route path=\"/dev\"> */}\n            <DeveloperScreen/>            \n            {/* </Route> */}\n          {/* </Switch> */}\n        {/* // </BrowserRouter> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}