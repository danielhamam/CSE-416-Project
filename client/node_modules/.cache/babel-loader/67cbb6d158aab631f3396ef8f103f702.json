{"ast":null,"code":"var _jsxFileName = \"/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/components/homePage/Main Panel/BatchCards/BatchCard.js\";\nimport React, { Component } from 'react';\nimport ModalBatch from './ModalBatch';\nimport DeleteModal from './DeleteModal';\n\nclass BatchCard extends Component {\n  constructor() {\n    super();\n\n    this.toggleSelection = e => {\n      // do something with batch\n      if (this.status == false) return;\n\n      if (this.state.showViewModal == true && this.props.selectedBatchCheck == false) {\n        this.setState({\n          showViewModal: false\n        });\n        this.goTop = \"\";\n      }\n\n      if (this.state.selected == false && this.props.selectedBatchCheck == false) {\n        // Select\n        this.setState({\n          selected: true\n        });\n        this.props.toggleSelectedBatchCheck();\n        this.props.updateCurrentBatchName(this.state.name);\n        this.goTop = \"goTopBatch \";\n      } else if (this.state.selected == false && this.props.selectedBatchCheck == true) {\n        // Cant Select\n        this.setState({\n          selected: false\n        });\n        this.goTop = \"\";\n      } else if (this.state.selected == true && this.props.selectedBatchCheck == true) {\n        // Deselect\n        this.setState({\n          selected: false\n        });\n        this.props.toggleSelectedBatchCheck();\n        this.props.updateCurrentBatchName(\"\");\n        this.goTop = \"\";\n      } else {// is currently selected, but not selected card. do nothing. (impossible scenario)\n      } // and check if you did this through modal\n\n    };\n\n    this.toggleViewModal = e => {\n      e.stopPropagation();\n      if (this.state.showViewModal == true) this.setState({\n        showViewModal: false\n      });else this.setState({\n        showViewModal: true\n      });\n    };\n\n    this.toggleDeleteModal = e => {\n      e.stopPropagation();\n      if (this.state.showDeleteModal == false) this.setState({\n        showDeleteModal: true\n      });else this.setState({\n        showDeleteModal: false\n      });\n    };\n\n    this.state = {\n      selected: false,\n      name: \"\",\n      // originally empty, gets filled when we render\n      id: \"2\",\n      summary: \"\",\n      // this would be the analysis summary, display in modal\n      // Toggle Modals\n      showViewModal: false,\n      showDeleteModal: false\n    };\n    this.batchCardClassStyle = \"\";\n    this.goTop = \"\";\n    this.statusColor = \"\"; // To make them same as props (for now)\n\n    this.compactness = \"\";\n    this.numberPlans = \"\";\n    this.minorityAnalyzed = \"\";\n    this.populationLimit = \"\";\n    this.status = false; // we're going to say false for pending, true for ready\n  }\n\n  render() {\n    // Whenever we do setState, it rerenders\n    if (this.state.selected == true) {\n      this.batchCardClassStyle = \"batchCard badge badge-pill badge-dark \";\n    } else {\n      this.batchCardClassStyle = \"batchCard badge badge-pill badge-light \";\n    } // here I would say, let's check if status is ready\n\n\n    this.status = this.props.status;\n    if (this.status == true) this.statusColor = \" batchSuccess \";else if (this.status == false) this.statusColor = \" batchPending \"; // --------------------------------------------------------\n    // LETS SET THE NAME / COMPACTNESS / NUMBER PLANS\n    // Check batch name, if it's empty the id is the name\n    // --------------------------------------------------------\n\n    if (this.props.batchName == \"\") this.setState({\n      name: \"Batch \" + this.state.id\n    }); // default name \n    else if (this.props.batchName != this.state.name) this.setState({\n        name: this.props.batchName\n      }); // custom name\n\n    this.compactness = this.props.compactness;\n    this.numberPlans = this.props.numberPlans;\n    this.populationLimit = this.props.populationLimit;\n    this.minorityAnalyzed = this.props.minorityAnalyzed;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: this.batchCardClassStyle + this.goTop + this.statusColor,\n      onClick: this.toggleSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"batchcardContents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"batchcardDelete badge badge-pill badge-danger\",\n      onClick: this.toggleDeleteModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"deleteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 126\n      }\n    }, \" X \"), \" \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"batchcardTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, \" \", this.state.name, \" \"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"batchcardView badge badge-pill badge-dark\",\n      onClick: this.toggleViewModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 119\n      }\n    }, \" View \"), \" \")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(DeleteModal, {\n      showDeleteModal: this.state.showDeleteModal,\n      deleteBatch: this.props.deleteBatch,\n      toggleDeleteModal: this.toggleDeleteModal,\n      batchName: this.state.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ModalBatch, {\n      populationLimit: this.populationLimit,\n      minorityAnalyzed: this.minorityAnalyzed,\n      compactness: this.compactness,\n      numberPlans: this.numberPlans,\n      status: this.status,\n      currentSelected: this.state.selected,\n      selectedBatchCheck: this.props.selectedBatchCheck,\n      toggleSelection: this.toggleSelection,\n      batchName: this.state.name,\n      toggleViewModal: this.toggleViewModal,\n      showViewModal: this.state.showViewModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default BatchCard;","map":{"version":3,"sources":["/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/components/homePage/Main Panel/BatchCards/BatchCard.js"],"names":["React","Component","ModalBatch","DeleteModal","BatchCard","constructor","toggleSelection","e","status","state","showViewModal","props","selectedBatchCheck","setState","goTop","selected","toggleSelectedBatchCheck","updateCurrentBatchName","name","toggleViewModal","stopPropagation","toggleDeleteModal","showDeleteModal","id","summary","batchCardClassStyle","statusColor","compactness","numberPlans","minorityAnalyzed","populationLimit","render","batchName","deleteBatch"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ModalBatch from './ModalBatch'\nimport DeleteModal from './DeleteModal'\n\nclass BatchCard extends Component {\n    constructor () {\n        super();\n        this.state = {\n            selected : false,\n            name : \"\", // originally empty, gets filled when we render\n            id : \"2\",\n            summary : \"\", // this would be the analysis summary, display in modal\n\n            // Toggle Modals\n            showViewModal : false,\n            showDeleteModal : false,\n        }\n        this.batchCardClassStyle = \"\";\n        this.goTop = \"\";\n        this.statusColor = \"\";\n        // To make them same as props (for now)\n        this.compactness = \"\";\n        this.numberPlans = \"\";\n        this.minorityAnalyzed = \"\";\n        this.populationLimit = \"\";\n        this.status = false; // we're going to say false for pending, true for ready\n    }\n\n    toggleSelection = (e) => {\n        // do something with batch\n\n        if (this.status == false) return;\n\n        if (this.state.showViewModal == true && this.props.selectedBatchCheck== false) {\n            this.setState({showViewModal : false});\n            this.goTop=\"\";\n        }\n\n        if (this.state.selected == false && this.props.selectedBatchCheck== false) {\n            // Select\n            this.setState({selected: true});\n            this.props.toggleSelectedBatchCheck();\n            this.props.updateCurrentBatchName(this.state.name);\n            this.goTop=\"goTopBatch \";\n        }\n        else if (this.state.selected == false && this.props.selectedBatchCheck == true) {\n            // Cant Select\n            this.setState({selected : false});\n            this.goTop=\"\";\n        }\n        else if (this.state.selected == true && this.props.selectedBatchCheck == true) {\n            // Deselect\n            this.setState({selected: false});\n            this.props.toggleSelectedBatchCheck();\n            this.props.updateCurrentBatchName(\"\");\n            this.goTop=\"\";\n        }\n        else {\n            // is currently selected, but not selected card. do nothing. (impossible scenario)\n        }\n\n        // and check if you did this through modal\n    }\n\n    toggleViewModal = (e) => {\n        e.stopPropagation();\n        if (this.state.showViewModal == true) this.setState({showViewModal : false});\n        else this.setState({showViewModal : true});\n    }\n\n    toggleDeleteModal = (e) => {\n        e.stopPropagation();\n        if (this.state.showDeleteModal == false) this.setState({showDeleteModal : true});\n        else this.setState({showDeleteModal : false});\n    }\n\n    render() {\n\n        // Whenever we do setState, it rerenders\n        if (this.state.selected == true) {\n            this.batchCardClassStyle = \"batchCard badge badge-pill badge-dark \";\n        }\n        else {\n            this.batchCardClassStyle = \"batchCard badge badge-pill badge-light \";\n        }\n\n        // here I would say, let's check if status is ready\n        this.status = this.props.status;\n        if (this.status == true ) this.statusColor = \" batchSuccess \";\n        else if (this.status == false) this.statusColor = \" batchPending \";\n\n        // --------------------------------------------------------\n              // LETS SET THE NAME / COMPACTNESS / NUMBER PLANS\n            // Check batch name, if it's empty the id is the name\n        // --------------------------------------------------------\n\n        if (this.props.batchName == \"\") this.setState({name : \"Batch \" + this.state.id}); // default name \n        else if (this.props.batchName != this.state.name) this.setState({name : this.props.batchName}); // custom name\n\n        this.compactness = this.props.compactness;\n        this.numberPlans = this.props.numberPlans;\n        this.populationLimit = this.props.populationLimit;\n        this.minorityAnalyzed = this.props.minorityAnalyzed;\n\n        return (\n            <div> \n                <div className={this.batchCardClassStyle + this.goTop + this.statusColor} onClick={this.toggleSelection}>\n                    <div className=\"batchcardContents\">\n                        <button className=\"batchcardDelete badge badge-pill badge-danger\" onClick={this.toggleDeleteModal} > <div className=\"deleteText\"> X </div> </button>\n                        <span className=\"batchcardTitle\"> {this.state.name} </span> \n                        <button className=\"batchcardView badge badge-pill badge-dark\" onClick={this.toggleViewModal}> <div className=\"viewText\" > View </div> </button>\n                    </div> \n                    <br /> \n                    <br />\n                </div>\n                <DeleteModal showDeleteModal={this.state.showDeleteModal} deleteBatch={this.props.deleteBatch} toggleDeleteModal={this.toggleDeleteModal} batchName={this.state.name} />\n                <ModalBatch populationLimit={this.populationLimit} minorityAnalyzed={this.minorityAnalyzed} compactness={this.compactness} numberPlans={this.numberPlans} status={this.status} currentSelected={this.state.selected} selectedBatchCheck={this.props.selectedBatchCheck} toggleSelection={this.toggleSelection} batchName={this.state.name} toggleViewModal={this.toggleViewModal} showViewModal={this.state.showViewModal}/>\n            </div>\n        );\n    }\n}\n\nexport default BatchCard;"]},"metadata":{},"sourceType":"module"}