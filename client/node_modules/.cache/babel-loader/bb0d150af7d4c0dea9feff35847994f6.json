{"ast":null,"code":"var _jsxFileName = \"/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/App.js\";\nimport HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Developer\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport * as endpoint from './endpoint/Client';\nimport testJobCards from './json/TestJobCards.json';\nimport './css/project_styles.css'; // App.js is the parent component\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // State:\n      currentState: \"Select a state\",\n      enactedPlan: testJobCards.enactedPlan,\n      // Jobs:\n      jobCards: testJobCards.jobs,\n      // holds all the jobs retrieved back from the serverside (UPDATED BY JSON)\n      currentJob: \"\",\n      // Map View Filters:\n      selectedFilters: null,\n      // current demographic filters\n      precinctView: false,\n      // show precincts\n      districtView: false,\n      // show districts\n      stateView: true,\n      // show stateView\n      // Checks for Selection\n      selectedPlanCheck: false,\n      selectedJobCheck: false // selectedJobName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n\n    };\n\n    this.changeCurrentState = stateName => {\n      let res = endpoint.getState(stateName);\n      this.setState({\n        currentState: stateName\n      }); // this.setState({ jobCards : ____}); // update the jobCards in state\n    };\n\n    this.createJob = userInputs => {\n      // New batch is a test \n      let newBatch = {\n        \"numberOfDistricting\": 10,\n        \"name\": \"batch1\",\n        \"isAvailable\": false,\n        \"populationDifference\": 10.0,\n        \"compactness\": 10.0,\n        \"state\": \"NY\"\n      };\n      let res = endpoint.generateJob(newBatch); // use of .then here? or keep that in client.js for fetch?\n    };\n\n    this.cancelJob = jobID => {// string\n    };\n\n    this.deleteJob = job => {\n      // string\n      // REMOVE IT IF IT EXISTS\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      if (indexOfJob >= 0) this.state.jobCards.splice(indexOfJob, 1);\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.deletePlan = plan => {\n      // string\n      // What plan is it?\n      if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\n        let job = this.state.currentJob;\n        let indexOfJob = this.state.jobCards.indexOf(job);\n        let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\n        if (indexOfPlan >= 0) this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\n        this.setState({\n          jobCards: this.state.jobCards\n        });\n      } // else, we are deleting the enacted plan\n      // this.state.jobCards.enactedPlan.splice(indexOfPlan, 1);\n\n\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.generateBoxWhiskerValues = minorityGroups => {// open questions: do I send plan ID? district plan? \n    };\n\n    this.changeSelectedFilters = mapFilters => {\n      // open questions: check if change for demographic heat map or for cluster? Separate functions?\n      // does updates one at a time (but if you have two filters does it over again)\n      this.setState({\n        selectedFilters: mapFilters\n      });\n\n      for (var i = 0; i < mapFilters.length; i++) {\n        console.log(mapFilters[i].label); // this is how you access the label of the array element at position i \n      }\n    };\n\n    this.updateCurrentJob = (job, selected) => {\n      if (selected == true) {\n        // job just got selected\n        this.setState({\n          currentJob: job\n        });\n        this.setState({\n          currentJobName: job.jobName\n        });\n      } else {\n        // job just got de-selected\n        this.setState({\n          currentJob: \"\"\n        });\n        this.setState({\n          currentJobName: \"\"\n        });\n      }\n    };\n\n    this.getSelectedJob = () => {// returns selected job\n      // .map and .filter use\n      // call in your districting plans and do .districtPlans from job's database for plans\n    };\n\n    this.toggleSelectedCard = () => {\n      if (this.state.selectedJobCheck == false) this.setState({\n        selectedJobCheck: true\n      });else this.setState({\n        selectedJobCheck: false\n      });\n    };\n\n    this.toggleSelectedPlanCheck = () => {\n      if (this.state.selectedPlanCheck == false) this.setState({\n        selectedPlanCheck: true\n      });else this.setState({\n        selectedPlanCheck: false\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(HomeScreen, {\n      jobCards: this.state.jobCards,\n      currentState: this.state.currentState,\n      changeSelectedFilters: this.changeSelectedFilters,\n      changeCurrentState: this.changeCurrentState,\n      currentJob: this.state.currentJob,\n      updateCurrentJob: this.updateCurrentJob,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      toggleSelectedPlanCheck: this.toggleSelectedPlanCheck,\n      selectedJobCheck: this.state.selectedJobCheck,\n      toggleSelectedCard: this.toggleSelectedCard,\n      enactedPlan: this.state.enactedPlan,\n      deleteJob: this.deleteJob,\n      deletePlan: this.deletePlan,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(DeveloperScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/App.js"],"names":["HomeScreen","DeveloperScreen","React","Component","BrowserRouter","Route","Redirect","Switch","endpoint","testJobCards","App","state","currentState","enactedPlan","jobCards","jobs","currentJob","selectedFilters","precinctView","districtView","stateView","selectedPlanCheck","selectedJobCheck","changeCurrentState","stateName","res","getState","setState","createJob","userInputs","newBatch","generateJob","cancelJob","jobID","deleteJob","job","indexOfJob","indexOf","splice","deletePlan","plan","type","indexOfPlan","districtPlans","generateBoxWhiskerValues","minorityGroups","changeSelectedFilters","mapFilters","i","length","console","log","label","updateCurrentJob","selected","currentJobName","jobName","getSelectedJob","toggleSelectedCard","toggleSelectedPlanCheck","render"],"mappings":"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","sourcesContent":["import HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Developer\"\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport * as endpoint from './endpoint/Client';\nimport testJobCards from './json/TestJobCards.json'\nimport './css/project_styles.css';\n\n// App.js is the parent component\nclass App extends Component {\n    state = {\n\n      // State:\n      currentState : \"Select a state\",\n      enactedPlan : testJobCards.enactedPlan,\n\n      // Jobs:\n      jobCards : testJobCards.jobs, // holds all the jobs retrieved back from the serverside (UPDATED BY JSON)\n      currentJob : \"\",\n\n      // Map View Filters:\n      selectedFilters : null, // current demographic filters\n      precinctView : false, // show precincts\n      districtView : false, // show districts\n      stateView : true, // show stateView\n\n      // Checks for Selection\n      selectedPlanCheck: false,\n      selectedJobCheck: false\n\n      // selectedJobName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n      \n    }\n\n   /**\n   * This function updates which state is selected, and fetches data pertaining to the state from the server.\n   * \n   * @param {String} stateName The state to now be shown to the user\n   * \n   * In addition to changing the state name, the function takes updates \"Your Jobs\", which hold the jobs\n   * belonging to the selected state (updates the array), and updates STATE DETAILS\n   * \n   */\n  changeCurrentState = (stateName) => {\n    let res = endpoint.getState(stateName);\n\n    this.setState({currentState : stateName});\n    // this.setState({ jobCards : ____}); // update the jobCards in state\n  }\n\n   /**\n   * This function creates a new job and calls generateJob in the Client.js endpoint\n   * \n   * @param {Array} userInputs Holds the inputs entered by the user to generate a new job\n   * \n   * Inputs: Districts (int), Districting Plans (int), Compactness (String), Population Difference (int (%)), \n   * Minority Focus Group(s) (Array<String>) , Job Name (String)\n   *\n   * the event occurs.\n   */\n  createJob = (userInputs) => {\n      // New batch is a test \n      let newBatch =  {\n        \"numberOfDistricting\" : 10,\n        \"name\": \"batch1\",\n        \"isAvailable\": false,\n        \"populationDifference\": 10.0,\n        \"compactness\": 10.0,\n        \"state\": \"NY\"\n    }\n      let res = endpoint.generateJob(newBatch); // use of .then here? or keep that in client.js for fetch?\n  }\n\n   /**\n   * This function CANCELS a job by sending the job ID to backend, receives \"successfully cancelled\" status back.\n   * \n   * @param {String} jobID Represents the ID of the COMPLETED job to be cancelled.\n   * \n   */\n  cancelJob = (jobID) => { // string\n    \n  }\n   /**\n   * This function DELETES a job by sending the job ID to backend, receives \"successfully deleted\" status back.\n   * \n   * @param {String} job Represents the COMPLETED job object to be deleted.\n   * \n   */\n  deleteJob = (job) => { // string\n    // REMOVE IT IF IT EXISTS\n    let indexOfJob = this.state.jobCards.indexOf(job);\n    if (indexOfJob >= 0)\n        this.state.jobCards.splice(indexOfJob, 1);\n    this.setState({ jobCards : this.state.jobCards})\n  }\n\n   /**\n   * This function DELETES a plan from the currently selected job\n   * \n   * @param {String} plan Represents the plan object to be deleted.\n   * \n   * Job can either be none (enacted plan) or currentJob (average, random, extreme)\n   * \n   */\n  deletePlan = (plan) => { // string\n\n    // What plan is it?\n    if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\n      let job = this.state.currentJob;\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\n      if (indexOfPlan >= 0)\n        this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\n      this.setState({ jobCards : this.state.jobCards})\n    }\n    // else, we are deleting the enacted plan\n    // this.state.jobCards.enactedPlan.splice(indexOfPlan, 1);\n    \n    this.setState({ jobCards : this.state.jobCards})\n\n  }\n\n   /**\n   * This function \n   * \n   * @param {String} minorityGroups Represents the minority or minorities, which were selected when generating the\n   * currently selected job, in order to generate their voting age populations per district in the selected district plan\n   * \n   */\n  generateBoxWhiskerValues = (minorityGroups) => {\n      // open questions: do I send plan ID? district plan? \n  }\n\n   /**\n   * This function updates the currently selected filters so as to change the view of the demographic heat map\n   * \n   * @param {Array<String>} mapFilters Represents the map filters selected by the user, can be either \n   * cluster or demographic heat map. Multiple filters can be invoked at the same time. \n   * \n   */\n  changeSelectedFilters = (mapFilters) => {\n    // open questions: check if change for demographic heat map or for cluster? Separate functions?\n      // does updates one at a time (but if you have two filters does it over again)\n    this.setState({selectedFilters : mapFilters});\n    for (var i = 0; i < mapFilters.length; i++) {\n      console.log(mapFilters[i].label); // this is how you access the label of the array element at position i \n    }\n  }\n\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n\nupdateCurrentJob = (job, selected) => {\n  if (selected == true) { // job just got selected\n    this.setState({currentJob : job});\n    this.setState({currentJobName : job.jobName});\n  }\n  else { // job just got de-selected\n    this.setState({currentJob : \"\"});\n    this.setState({currentJobName : \"\"});\n  }\n}\n\n  getSelectedJob = () => {\n    // returns selected job\n    // .map and .filter use\n    // call in your districting plans and do .districtPlans from job's database for plans\n  }\n  \n  toggleSelectedCard = () => {\n    if (this.state.selectedJobCheck == false) this.setState({selectedJobCheck : true});\n    else this.setState({selectedJobCheck : false});\n}\n\n  toggleSelectedPlanCheck = () => {\n    if (this.state.selectedPlanCheck == false) this.setState({selectedPlanCheck: true});\n    else this.setState({selectedPlanCheck : false});\n}\n\n  render() {\n  return (\n    <div >\n\n            <HomeScreen \n            jobCards={this.state.jobCards} currentState={this.state.currentState} changeSelectedFilters={this.changeSelectedFilters} changeCurrentState={this.changeCurrentState} \n            currentJob ={this.state.currentJob} updateCurrentJob={this.updateCurrentJob} selectedPlanCheck={this.state.selectedPlanCheck} \n            toggleSelectedPlanCheck={this.toggleSelectedPlanCheck} selectedJobCheck={this.state.selectedJobCheck} toggleSelectedCard={this.toggleSelectedCard}\n            enactedPlan = {this.state.enactedPlan} deleteJob={this.deleteJob} deletePlan={this.deletePlan}\n            />\n\n            <DeveloperScreen/>            \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}