{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mdari\\\\Desktop\\\\416 Project\\\\CSE-416-Project\\\\client\\\\src\\\\App.js\";\nimport HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Developer\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport * as endpoint from './endpoint/Client';\nimport testJobCards from './json/TestJobCards.json';\nimport './css/project_styles.css';\nimport { GeoJSON } from 'react-leaflet';\nimport GADistricts from './json/GEORGIA/ga_congressionalDistrict.json';\nimport GAPrecincts from './json/GEORGIA/ga_precincts.json';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // State:\n      currentState: \"Select a state\",\n      enactedPlan: testJobCards.enactedPlan,\n      totalPopulation: 0,\n      numOfPrecincts: 0,\n      numOfCounties: 0,\n      // Jobs:\n      jobCards: testJobCards.jobs,\n      currentJob: \"\",\n      // Map View Filters:\n      selectedFilters: null,\n      precinctsView: false,\n      districtsView: false,\n      filterDistrictsView: false,\n      filterPrecinctsView: false,\n      stateView: true,\n      // Map View Content\n      districtsContent: null,\n      precinctsContent: null,\n      // Checks for Selection\n      selectedPlanCheck: false,\n      selectedJobCheck: false\n    };\n\n    this.changeCurrentState = async (stateAbrev, stateName) => {\n      this.setState({\n        currentJob: \"\"\n      });\n      this.setState({\n        currentState: stateName\n      });\n      let stateObject = {\n        state: stateAbrev\n      };\n\n      try {\n        let res = await endpoint.getState(stateObject);\n        console.log(res);\n        this.setState({\n          jobCards: res.jobs\n        }); // Reset Views / Contents of Filters\n\n        this.setState({\n          districtsContent: null\n        });\n        this.setState({\n          precinctsContent: null\n        });\n        this.setState({\n          districtsView: null\n        });\n        this.setState({\n          precinctsView: null\n        });\n        this.setState({\n          selectedFilters: null\n        });\n        this.changeSelectedFilters(null); // Initialize state object\n\n        this.setState({\n          enactedPlan: res.state.enactedPlan\n        });\n        this.setState({\n          totalPopulation: res.state.totalPopulation\n        });\n        this.setState({\n          numOfPrecincts: res.state.numOfPrecincts\n        });\n        this.setState({\n          numOfCounties: res.state.numOfCounties\n        }); // Clear Generate Job Sidebar\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.createJob = async userInputs => {\n      try {\n        let res = await endpoint.generateJob(userInputs); // bug right here\n\n        console.log(res);\n        let labelsMinorities = [];\n        if (res.status == \"PENDING\") res.status = \"Pending\";\n        if (res.status == \"COMPLETED\") res.status = \"Completed\";\n        res.minorityAnalyzed.forEach(element => {\n          // values --> keys\n          switch (element) {\n            case \"WHITE_AMERICAN\":\n              labelsMinorities.push(\"White\");\n              break;\n\n            case \"AFRICAN_AMERICAN\":\n              labelsMinorities.push(\"African American\");\n              break;\n\n            case \"LATINO_AMERICAN\":\n              labelsMinorities.push(\"Latino\");\n              break;\n\n            case \"ASIAN_AMERICAN\":\n              labelsMinorities.push(\"Asian\");\n              break;\n\n            case \"AMERICAN_INDIAN\":\n              labelsMinorities.push(\"American Indian\");\n              break;\n\n            case \"HAWAIIAN_AMERICAN\":\n              labelsMinorities.push(\"Hawaiian\");\n              break;\n\n            case \"OTHER_AMERICAN\":\n              labelsMinorities.push(\"Other\");\n              break;\n          }\n        });\n        res.minorityAnalyzed = labelsMinorities;\n        this.state.jobCards.push(res);\n        this.setState({\n          jobCards: this.state.jobCards\n        });\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.cancelJob = job => {\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      if (indexOfJob >= 0) this.state.jobCards.splice(indexOfJob, 1);\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.deleteJob = async job => {\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      if (indexOfJob >= 0) this.state.jobCards.splice(indexOfJob, 1);\n\n      try {\n        let res = await endpoint.deleteJob(job);\n        console.log(res);\n      } catch (exception) {\n        console.error(exception);\n      }\n\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.getPrecincts = async () => {\n      try {\n        let res = await endpoint.getStatePrecincts();\n        this.setState({\n          precinctsContent: /*#__PURE__*/React.createElement(GeoJSON, {\n            weight: \"1\",\n            color: \"red\",\n            key: \"precincts\",\n            data: res.precinctsGeoJson,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 41\n            }\n          })\n        });\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.deletePlan = plan => {\n      if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\n        let job = this.state.currentJob;\n        let indexOfJob = this.state.jobCards.indexOf(job);\n        let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\n        if (indexOfPlan >= 0) this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\n        this.setState({\n          jobCards: this.state.jobCards\n        });\n      }\n\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.generateBoxWhiskerValues = () => {\n      console.log(this.state.currentJob);\n\n      try {// let res = await endpoint.generateBoxWhisker(currentJob);\n        // console.log(res)\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.changeSelectedFilters = mapFilters => {\n      let foundDistrictsView = false;\n      let foundPrecinctsView = false;\n      this.setState({\n        selectedFilters: mapFilters\n      });\n\n      if (mapFilters == null) {\n        // reset\n        this.setState({\n          districtsView: false\n        });\n        this.setState({\n          precinctsView: false\n        });\n        this.setState({\n          filterDistrictsView: false\n        });\n        this.setState({\n          filterPrecinctsView: false\n        });\n        this.setState({\n          precinctsContent: null\n        });\n        return;\n      }\n\n      for (var i = 0; i < mapFilters.length; i++) {\n        if (mapFilters[i].label == \"Precincts\") {\n          // precinct view\n          this.setState({\n            precinctsView: true\n          });\n          this.getPrecincts(); // this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\n\n          foundPrecinctsView = true;\n          this.setState({\n            filterPrecinctsView: true\n          });\n        } else if (mapFilters[i].label == \"Districts\") {\n          // district view\n          console.log(\"DISTRICTS VIEW ON\");\n          this.setState({\n            districtsView: true\n          });\n          foundDistrictsView = true;\n          this.setState({\n            filterDistrictsView: true\n          });\n        }\n      }\n\n      if (foundPrecinctsView == false) {\n        // if not selected\n        this.setState({\n          precinctsView: false\n        });\n        this.setState({\n          precinctsContent: null\n        });\n        this.setState({\n          filterPrecinctsView: false\n        });\n      }\n\n      if (foundDistrictsView == false) {\n        this.setState({\n          districtsView: false\n        });\n        this.setState({\n          filterDistrictsView: false\n        });\n      }\n    };\n\n    this.changeViewFromZoom = (viewType, actionType) => {\n      // actionType = 0 (delete view) or 1 (insert view)\n      if (viewType == \"Districts\") {\n        if (this.state.filterDistrictsView == true) return;else if (this.state.filterDistrictsView == false && actionType == 1) {\n          this.setState({\n            districtsView: true\n          });\n        } else if (this.state.filterDistrictsView == false && actionType == 0) this.setState({\n          districtsView: false\n        });\n      }\n\n      if (viewType == \"Precincts\") {\n        if (this.state.filterPrecinctsView == true) return;else if (this.state.filterPrecinctsView == false && actionType == 1) {\n          this.setState({\n            precinctsView: true\n          });\n          this.getPrecincts(); // this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\n        } else if (this.state.filterPrecinctsView == false && actionType == 0) {\n          this.setState({\n            precinctsView: false\n          });\n          this.setState({\n            precinctsContent: null\n          });\n        }\n      }\n    };\n\n    this.updateCurrentJob = (job, selected) => {\n      if (selected == true) {\n        // job just selected\n        this.setState({\n          currentJob: job\n        });\n        this.setState({\n          currentJobName: job.jobName\n        });\n      } else {\n        // job just de-selected\n        this.setState({\n          currentJob: \"\"\n        });\n        this.setState({\n          currentJobName: \"\"\n        });\n      }\n    };\n\n    this.toggleSelectedCard = () => {\n      if (this.state.selectedJobCheck == false) this.setState({\n        selectedJobCheck: true\n      });else this.setState({\n        selectedJobCheck: false\n      });\n    };\n\n    this.toggleSelectedPlanCheck = districtPlan => {\n      if (this.state.selectedPlanCheck == false) {\n        this.setState({\n          selectedPlanCheck: true\n        });\n        this.setState({\n          districtsContent: /*#__PURE__*/React.createElement(GeoJSON, {\n            weight: \"1\",\n            color: \"red\",\n            key: \"GeorgiaDistricts\",\n            data: districtPlan.districtsGeoJson,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 41\n            }\n          })\n        });\n      } else {\n        this.setState({\n          selectedPlanCheck: false\n        });\n        this.setState({\n          districtsContent: null\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(HomeScreen // State-related data\n    , {\n      currentState: this.state.currentState,\n      jobCards: this.state.jobCards,\n      numOfPrecincts: this.state.numOfPrecincts,\n      numOfCounties: this.state.numOfCounties,\n      totalPopulation: this.state.totalPopulation,\n      enactedPlan: this.state.enactedPlan,\n      currentJob: this.state.currentJob,\n      changeCurrentState: this.changeCurrentState // Job-related methods\n      ,\n      updateCurrentJob: this.updateCurrentJob,\n      deleteJob: this.deleteJob,\n      toggleSelectedCard: this.toggleSelectedCard,\n      createJob: this.createJob,\n      cancelJob: this.cancelJob,\n      selectedJobCheck: this.state.selectedJobCheck,\n      generateBoxWhiskerValues: this.generateBoxWhiskerValues // Plan-related methods\n      ,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      deletePlan: this.deletePlan // Handling use cases for precinct and district views\n      ,\n      changeSelectedFilters: this.changeSelectedFilters,\n      changeViewFromZoom: this.changeViewFromZoom,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      toggleSelectedPlanCheck: this.toggleSelectedPlanCheck,\n      districtsView: this.state.districtsView,\n      districtsContent: this.state.districtsContent,\n      precinctsView: this.state.precinctsView,\n      precinctsContent: this.state.precinctsContent,\n      selectedFilters: this.state.selectedFilters,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(DeveloperScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mdari/Desktop/416 Project/CSE-416-Project/client/src/App.js"],"names":["HomeScreen","DeveloperScreen","React","Component","BrowserRouter","Route","Redirect","Switch","endpoint","testJobCards","GeoJSON","GADistricts","GAPrecincts","App","state","currentState","enactedPlan","totalPopulation","numOfPrecincts","numOfCounties","jobCards","jobs","currentJob","selectedFilters","precinctsView","districtsView","filterDistrictsView","filterPrecinctsView","stateView","districtsContent","precinctsContent","selectedPlanCheck","selectedJobCheck","changeCurrentState","stateAbrev","stateName","setState","stateObject","res","getState","console","log","changeSelectedFilters","exception","error","createJob","userInputs","generateJob","labelsMinorities","status","minorityAnalyzed","forEach","element","push","cancelJob","job","indexOfJob","indexOf","splice","deleteJob","getPrecincts","getStatePrecincts","precinctsGeoJson","deletePlan","plan","type","indexOfPlan","districtPlans","generateBoxWhiskerValues","mapFilters","foundDistrictsView","foundPrecinctsView","i","length","label","changeViewFromZoom","viewType","actionType","updateCurrentJob","selected","currentJobName","jobName","toggleSelectedCard","toggleSelectedPlanCheck","districtPlan","districtsGeoJson","render"],"mappings":"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","sourcesContent":["import HomeScreen from \"./components/homePage/HomeScreen\";\r\nimport DeveloperScreen from \"./components/developerscreen/Developer\"\r\nimport React, { Component } from \"react\";\r\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\r\nimport Switch from \"react-bootstrap/esm/Switch\";\r\nimport * as endpoint from './endpoint/Client';\r\nimport testJobCards from './json/TestJobCards.json'\r\nimport './css/project_styles.css';\r\n\r\nimport {GeoJSON} from 'react-leaflet';\r\nimport GADistricts from './json/GEORGIA/ga_congressionalDistrict.json';\r\nimport GAPrecincts from './json/GEORGIA/ga_precincts.json';\r\n\r\nclass App extends Component {\r\n    state = {\r\n      // State:\r\n      currentState : \"Select a state\",\r\n      enactedPlan : testJobCards.enactedPlan, \r\n      totalPopulation : 0,\r\n      numOfPrecincts : 0,\r\n      numOfCounties : 0,\r\n\r\n      // Jobs:\r\n      jobCards : testJobCards.jobs,\r\n      currentJob : \"\",\r\n\r\n      // Map View Filters:\r\n      selectedFilters : null,\r\n      precinctsView : false,\r\n      districtsView : false, \r\n      filterDistrictsView : false, \r\n      filterPrecinctsView : false, \r\n      stateView : true,\r\n\r\n      // Map View Content\r\n      districtsContent : null,\r\n      precinctsContent : null,\r\n\r\n      // Checks for Selection\r\n      selectedPlanCheck: false,\r\n      selectedJobCheck: false,\r\n\r\n    }\r\n\r\n  changeCurrentState = async (stateAbrev, stateName) => {\r\n    this.setState({currentJob : \"\"}) \r\n    this.setState({currentState : stateName});\r\n    let stateObject =  {\r\n      state: stateAbrev\r\n    }\r\n    try {\r\n      let res = await endpoint.getState(stateObject);\r\n      console.log(res)\r\n      this.setState({ jobCards : res.jobs}); \r\n\r\n      // Reset Views / Contents of Filters\r\n      this.setState({ districtsContent : null})\r\n      this.setState({ precinctsContent : null})\r\n      this.setState({ districtsView : null})\r\n      this.setState({ precinctsView : null})\r\n      this.setState({selectedFilters : null})\r\n      this.changeSelectedFilters(null)\r\n\r\n      // Initialize state object\r\n      this.setState({ enactedPlan : res.state.enactedPlan}); \r\n      this.setState({ totalPopulation : res.state.totalPopulation});\r\n      this.setState({ numOfPrecincts : res.state.numOfPrecincts});\r\n      this.setState({ numOfCounties : res.state.numOfCounties}); \r\n\r\n      // Clear Generate Job Sidebar\r\n\r\n\r\n    } catch (exception) {\r\n      console.error(exception);\r\n    }\r\n  }\r\n\r\n  createJob = async (userInputs) => {\r\n      try {\r\n        let res = await endpoint.generateJob(userInputs); // bug right here\r\n        console.log(res)\r\n        let labelsMinorities = [];\r\n        if (res.status == \"PENDING\") res.status = \"Pending\";\r\n        if (res.status == \"COMPLETED\") res.status = \"Completed\"\r\n        res.minorityAnalyzed.forEach(element => { // values --> keys\r\n            switch (element) {\r\n              case \"WHITE_AMERICAN\": \r\n                labelsMinorities.push(\"White\");\r\n                break;\r\n              case \"AFRICAN_AMERICAN\": \r\n                labelsMinorities.push(\"African American\");\r\n                break;\r\n              case \"LATINO_AMERICAN\": \r\n                labelsMinorities.push(\"Latino\");\r\n                break;\r\n              case \"ASIAN_AMERICAN\": \r\n                labelsMinorities.push(\"Asian\");\r\n                break;\r\n              case \"AMERICAN_INDIAN\": \r\n                labelsMinorities.push(\"American Indian\");\r\n                break;\r\n              case \"HAWAIIAN_AMERICAN\": \r\n                labelsMinorities.push(\"Hawaiian\");\r\n                break;\r\n              case \"OTHER_AMERICAN\": \r\n                labelsMinorities.push(\"Other\");\r\n                break;\r\n            }\r\n        })\r\n        res.minorityAnalyzed = labelsMinorities\r\n        this.state.jobCards.push(res);\r\n        this.setState({jobCards : this.state.jobCards})\r\n      } catch (exception) {\r\n        console.error(exception);\r\n      }\r\n  }\r\n\r\n  cancelJob = (job) => { \r\n    let indexOfJob = this.state.jobCards.indexOf(job);\r\n    if (indexOfJob >= 0)\r\n        this.state.jobCards.splice(indexOfJob, 1);\r\n    this.setState({ jobCards : this.state.jobCards})\r\n  }\r\n\r\n  deleteJob = async (job) => { \r\n    let indexOfJob = this.state.jobCards.indexOf(job);\r\n    if (indexOfJob >= 0)\r\n        this.state.jobCards.splice(indexOfJob, 1);\r\n      try {\r\n        let res = await endpoint.deleteJob(job);\r\n        console.log(res)\r\n      } catch (exception) {\r\n        console.error(exception);\r\n      }\r\n    this.setState({ jobCards : this.state.jobCards})\r\n  }\r\n  \r\n  getPrecincts = async () => {\r\n    try {\r\n      let res = await endpoint.getStatePrecincts();\r\n      this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='precincts' data={res.precinctsGeoJson} />});\r\n    } catch (exception) {\r\n      console.error(exception);\r\n    }\r\n  }\r\n\r\n  deletePlan = (plan) => {\r\n    if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\r\n      let job = this.state.currentJob;\r\n      let indexOfJob = this.state.jobCards.indexOf(job);\r\n      let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\r\n      if (indexOfPlan >= 0)\r\n        this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\r\n      this.setState({ jobCards : this.state.jobCards})\r\n    }\r\n    this.setState({ jobCards : this.state.jobCards })\r\n  }\r\n\r\n  generateBoxWhiskerValues = () => {\r\n    console.log(this.state.currentJob)\r\n    try {\r\n      // let res = await endpoint.generateBoxWhisker(currentJob);\r\n      // console.log(res)\r\n    } catch (exception) {\r\n      console.error(exception);\r\n    }\r\n  }\r\n\r\n  changeSelectedFilters = (mapFilters) => {\r\n    let foundDistrictsView = false\r\n    let foundPrecinctsView = false\r\n    this.setState({selectedFilters : mapFilters});\r\n    if (mapFilters == null) { // reset\r\n      this.setState({districtsView : false}) \r\n      this.setState({precinctsView : false})\r\n      this.setState({filterDistrictsView : false})\r\n      this.setState({filterPrecinctsView : false })\r\n      this.setState({precinctsContent : null })\r\n      return;\r\n    }\r\n    for (var i = 0; i < mapFilters.length; i++) {\r\n      if (mapFilters[i].label == \"Precincts\")  { // precinct view\r\n        this.setState({precinctsView : true})\r\n        this.getPrecincts();\r\n        // this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\r\n        foundPrecinctsView = true;\r\n        this.setState({ filterPrecinctsView : true })\r\n      }\r\n      else if (mapFilters[i].label == \"Districts\") {  // district view\r\n        console.log(\"DISTRICTS VIEW ON\")\r\n        this.setState({districtsView : true})\r\n        foundDistrictsView = true;\r\n        this.setState({filterDistrictsView : true})\r\n      }\r\n    }\r\n      if (foundPrecinctsView == false) { // if not selected\r\n        this.setState({precinctsView : false})\r\n        this.setState({precinctsContent : null })\r\n        this.setState({filterPrecinctsView : false })\r\n      }\r\n      if (foundDistrictsView == false) {\r\n        this.setState({districtsView : false})\r\n        this.setState({filterDistrictsView : false})\r\n      }\r\n  }\r\n\r\n  changeViewFromZoom = (viewType, actionType) => { // actionType = 0 (delete view) or 1 (insert view)\r\n    if (viewType == \"Districts\") {\r\n      if (this.state.filterDistrictsView == true) return; \r\n      else if (this.state.filterDistrictsView == false && actionType == 1) {\r\n        this.setState({districtsView : true})\r\n      }\r\n      else if (this.state.filterDistrictsView == false && actionType == 0) this.setState({districtsView : false})\r\n    }\r\n    if (viewType == \"Precincts\") {\r\n      if (this.state.filterPrecinctsView == true) return; \r\n      else if (this.state.filterPrecinctsView == false && actionType == 1) { \r\n        this.setState({precinctsView : true})\r\n        this.getPrecincts();\r\n        // this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\r\n      }\r\n      else if (this.state.filterPrecinctsView == false && actionType == 0) { \r\n        this.setState({precinctsView : false})\r\n        this.setState({precinctsContent : null })\r\n      }\r\n    }\r\n  }\r\n\r\n  updateCurrentJob = (job, selected) => {\r\n    if (selected == true) { // job just selected\r\n      this.setState({currentJob : job});\r\n      this.setState({currentJobName : job.jobName});\r\n    }\r\n    else { // job just de-selected\r\n      this.setState({currentJob : \"\"});\r\n      this.setState({currentJobName : \"\"});\r\n    }\r\n  }\r\n\r\n  toggleSelectedCard = () => {\r\n    if (this.state.selectedJobCheck == false) this.setState({selectedJobCheck : true});\r\n    else this.setState({selectedJobCheck : false});\r\n  }\r\n\r\n  toggleSelectedPlanCheck = (districtPlan) => {\r\n    if (this.state.selectedPlanCheck == false) {\r\n      this.setState({selectedPlanCheck: true});\r\n      this.setState({districtsContent : <GeoJSON weight=\"1\" color=\"red\" key='GeorgiaDistricts' data={districtPlan.districtsGeoJson} /> })\r\n    }\r\n    else {\r\n      this.setState({selectedPlanCheck : false});\r\n      this.setState({districtsContent : null});\r\n    }\r\n  }\r\n\r\n  render() {\r\n  return (\r\n    <div >\r\n            <HomeScreen \r\n\r\n            // State-related data\r\n            currentState={this.state.currentState} jobCards={this.state.jobCards}\r\n            numOfPrecincts={this.state.numOfPrecincts} numOfCounties={this.state.numOfCounties}\r\n            totalPopulation={this.state.totalPopulation} enactedPlan = {this.state.enactedPlan}\r\n            currentJob ={this.state.currentJob} changeCurrentState={this.changeCurrentState} \r\n\r\n            // Job-related methods\r\n            updateCurrentJob={this.updateCurrentJob} deleteJob={this.deleteJob} toggleSelectedCard={this.toggleSelectedCard}\r\n            createJob={this.createJob} cancelJob={this.cancelJob} selectedJobCheck={this.state.selectedJobCheck}\r\n            generateBoxWhiskerValues={this.generateBoxWhiskerValues} \r\n\r\n            // Plan-related methods\r\n            selectedPlanCheck={this.state.selectedPlanCheck} deletePlan={this.deletePlan}\r\n\r\n            // Handling use cases for precinct and district views\r\n            changeSelectedFilters={this.changeSelectedFilters} changeViewFromZoom={this.changeViewFromZoom}\r\n            selectedPlanCheck={this.state.selectedPlanCheck} toggleSelectedPlanCheck={this.toggleSelectedPlanCheck}\r\n            districtsView = {this.state.districtsView} districtsContent = {this.state.districtsContent}\r\n            precinctsView = {this.state.precinctsView} precinctsContent = {this.state.precinctsContent}\r\n            selectedFilters = {this.state.selectedFilters}\r\n\r\n            />\r\n\r\n            \r\n\r\n            <DeveloperScreen/>            \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}