{"ast":null,"code":"var _jsxFileName = \"/Users/kadiatoudiallo/Documents/GitHub/CSE-416-Project/client/src/App.js\";\nimport HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Developer\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport * as endpoint from './endpoint/Client';\nimport testJobCards from './json/TestJobCards.json';\nimport './css/project_styles.css';\nimport { GeoJSON } from 'react-leaflet';\nimport GADistricts from './json/GEORGIA/ga_congressionalDistrict.json';\nimport GAPrecincts from './json/GEORGIA/ga_precincts.json';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // State:\n      currentState: \"Select a state\",\n      enactedPlan: testJobCards.enactedPlan,\n      totalPopulation: 0,\n      numOfPrecincts: 0,\n      numOfCounties: 0,\n      // Jobs:\n      jobCards: testJobCards.jobs,\n      currentJob: \"\",\n      currentPlan: \"\",\n      planState: null,\n      // Map View Filters:\n      selectedFilters: null,\n      precinctsView: false,\n      districtsView: false,\n      filterDistrictsView: false,\n      filterPrecinctsView: false,\n      stateView: true,\n      // Map View Content\n      districtsContent: null,\n      precinctsContent: null,\n      // Checks for Selection\n      selectedPlanCheck: false,\n      selectedJobCheck: false,\n      // Modals\n      togglePrecinctModal: false,\n      selectedFeature: null\n    };\n\n    this.changeCurrentState = async (stateAbrev, stateName) => {\n      this.setState({\n        currentJob: \"\"\n      });\n      this.setState({\n        currentState: stateName\n      });\n      let stateObject = {\n        state: stateAbrev\n      };\n\n      try {\n        let res = await endpoint.getState(stateObject);\n        console.log(res);\n        this.setState({\n          jobCards: res.jobs\n        }); // Reset Views / Contents of Filters \n\n        this.setState({\n          districtsContent: null\n        });\n        this.setState({\n          precinctsContent: null\n        });\n        this.setState({\n          districtsView: null\n        });\n        this.setState({\n          precinctsView: null\n        });\n        this.setState({\n          selectedFilters: null\n        });\n        this.changeSelectedFilters(null); // Clear any selected job/plan\n\n        this.setState({\n          currentJob: \"\"\n        });\n        this.setState({\n          selectedPlanCheck: false\n        });\n        this.setState({\n          selectedJobCheck: false\n        });\n        this.state.planState.setState({\n          selected: false\n        });\n        this.state.planState.districtPlanClassStyle = \"\";\n        this.state.planState.goTop = \"\"; // Initialize state object\n\n        this.setState({\n          enactedPlan: res.state.enactedPlan\n        });\n        this.setState({\n          totalPopulation: res.state.totalPopulation\n        });\n        this.setState({\n          numOfPrecincts: res.state.numOfPrecincts\n        });\n        this.setState({\n          numOfCounties: res.state.numOfCounties\n        });\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.createJob = async userInputs => {\n      try {\n        let res = await endpoint.generateJob(userInputs); // bug right here\n\n        console.log(res);\n        let labelsMinorities = [];\n        if (res.status == \"PENDING\") res.status = \"Pending\";\n        if (res.status == \"COMPLETED\") res.status = \"Completed\";\n        res.minorityAnalyzed.forEach(element => {\n          // values --> keys\n          switch (element) {\n            case \"WHITE_AMERICAN\":\n              labelsMinorities.push(\"White\");\n              break;\n\n            case \"AFRICAN_AMERICAN\":\n              labelsMinorities.push(\"African American\");\n              break;\n\n            case \"LATINO_AMERICAN\":\n              labelsMinorities.push(\"Latino\");\n              break;\n\n            case \"ASIAN_AMERICAN\":\n              labelsMinorities.push(\"Asian\");\n              break;\n\n            case \"AMERICAN_INDIAN\":\n              labelsMinorities.push(\"American Indian\");\n              break;\n\n            case \"HAWAIIAN_AMERICAN\":\n              labelsMinorities.push(\"Hawaiian\");\n              break;\n\n            case \"OTHER_AMERICAN\":\n              labelsMinorities.push(\"Other\");\n              break;\n          }\n        });\n        res.minorityAnalyzed = labelsMinorities;\n        this.state.jobCards.push(res);\n        this.setState({\n          jobCards: this.state.jobCards\n        });\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.cancelJob = job => {\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      if (indexOfJob >= 0) this.state.jobCards.splice(indexOfJob, 1);\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.deleteJob = async job => {\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      if (indexOfJob >= 0) this.state.jobCards.splice(indexOfJob, 1);\n\n      try {\n        let res = await endpoint.deleteJob(job);\n        console.log(res);\n      } catch (exception) {\n        console.error(exception);\n      }\n\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.togglePrecinctModal = e => {\n      if (this.state.togglePrecinctModal == false) this.setState({\n        togglePrecinctModal: true\n      });else this.setState({\n        togglePrecinctModal: false\n      });\n    };\n\n    this.onEachFeature = (feature, layer) => {\n      console.log('onEachFeature fired: ');\n      this.setState({\n        selectedFeature: feature\n      });\n      layer.on({\n        mouseover: e => this.togglePrecinctModal(e),\n        mouseout: e => this.togglePrecinctModal(e)\n      });\n    };\n\n    this.getPrecincts = async () => {\n      try {\n        let res = await endpoint.getStatePrecincts();\n        this.setState({\n          precinctsContent: /*#__PURE__*/React.createElement(GeoJSON, {\n            weight: 1,\n            color: \"red\",\n            key: \"precincts\",\n            data: res.precinctsGeoJson,\n            onEachFeature: this.onEachFeature // onmouseover = {this.onEachFeature}\n            ,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 7\n            }\n          })\n        });\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.deletePlan = plan => {\n      if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\n        let job = this.state.currentJob;\n        let indexOfJob = this.state.jobCards.indexOf(job);\n        let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\n        if (indexOfPlan >= 0) this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\n        this.setState({\n          jobCards: this.state.jobCards\n        });\n      }\n\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.generateBoxWhiskerValues = () => {\n      console.log(this.state.currentJob);\n\n      try {// let res = await endpoint.generateBoxWhisker(currentJob);\n        // console.log(res)\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.changeSelectedFilters = mapFilters => {\n      let foundDistrictsView = false;\n      let foundPrecinctsView = false;\n      this.setState({\n        selectedFilters: mapFilters\n      });\n\n      if (mapFilters == null) {\n        // reset\n        this.setState({\n          districtsView: false\n        });\n        this.setState({\n          precinctsView: false\n        });\n        this.setState({\n          filterDistrictsView: false\n        });\n        this.setState({\n          filterPrecinctsView: false\n        });\n        this.setState({\n          precinctsContent: null\n        });\n        return;\n      }\n\n      for (var i = 0; i < mapFilters.length; i++) {\n        if (mapFilters[i].label == \"Precincts\") {\n          // precinct view\n          this.setState({\n            precinctsView: true\n          });\n          this.getPrecincts(); // this.setState({precinctsContent : <GeoJSON weight={1} color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\n\n          foundPrecinctsView = true;\n          this.setState({\n            filterPrecinctsView: true\n          });\n        } else if (mapFilters[i].label == \"Districts\") {\n          // district view\n          console.log(\"DISTRICTS VIEW ON\");\n          this.setState({\n            districtsView: true\n          });\n          foundDistrictsView = true;\n          this.setState({\n            filterDistrictsView: true\n          });\n        }\n      }\n\n      if (foundPrecinctsView == false) {\n        // if not selected\n        this.setState({\n          precinctsView: false\n        });\n        this.setState({\n          precinctsContent: null\n        });\n        this.setState({\n          filterPrecinctsView: false\n        });\n      }\n\n      if (foundDistrictsView == false) {\n        this.setState({\n          districtsView: false\n        });\n        this.setState({\n          filterDistrictsView: false\n        });\n      }\n    };\n\n    this.changeViewFromZoom = (viewType, actionType) => {\n      // actionType = 0 (delete view) or 1 (insert view)\n      if (viewType == \"Districts\") {\n        if (this.state.filterDistrictsView == true) return;else if (this.state.filterDistrictsView == false && actionType == 1) {\n          this.setState({\n            districtsView: true\n          });\n        } else if (this.state.filterDistrictsView == false && actionType == 0) this.setState({\n          districtsView: false\n        });\n      }\n\n      if (viewType == \"Precincts\") {\n        if (this.state.filterPrecinctsView == true) return;else if (this.state.filterPrecinctsView == false && actionType == 1) {\n          this.setState({\n            precinctsView: true\n          });\n          this.getPrecincts(); // this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\n        } else if (this.state.filterPrecinctsView == false && actionType == 0) {\n          this.setState({\n            precinctsView: false\n          });\n          this.setState({\n            precinctsContent: null\n          });\n        }\n      }\n    };\n\n    this.updateCurrentJob = (job, selected) => {\n      if (selected == true) {\n        // job just selected\n        this.setState({\n          currentJob: job\n        });\n        this.setState({\n          currentJobName: job.jobName\n        });\n      } else {\n        // job just de-selected\n        this.setState({\n          currentJob: \"\"\n        });\n        this.setState({\n          currentJobName: \"\"\n        });\n      }\n    };\n\n    this.toggleSelectedCard = () => {\n      if (this.state.selectedJobCheck == false) this.setState({\n        selectedJobCheck: true\n      });else this.setState({\n        selectedJobCheck: false\n      });\n    };\n\n    this.toggleSelectedPlanCheck = (districtPlan, state) => {\n      if (this.state.selectedPlanCheck == false) {\n        this.setState({\n          selectedPlanCheck: true\n        });\n        this.setState({\n          currentPlan: districtPlan\n        });\n        this.setState({\n          planState: state\n        });\n        this.setState({\n          districtsContent: /*#__PURE__*/React.createElement(GeoJSON, {\n            weight: 1,\n            color: \"red\",\n            key: \"GeorgiaDistricts\",\n            data: districtPlan.districtsGeoJson,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 286,\n              columnNumber: 41\n            }\n          })\n        });\n      } else {\n        this.setState({\n          selectedPlanCheck: false\n        });\n        this.setState({\n          districtsContent: null\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(HomeScreen // State-related data\n    , {\n      currentState: this.state.currentState,\n      jobCards: this.state.jobCards,\n      numOfPrecincts: this.state.numOfPrecincts,\n      numOfCounties: this.state.numOfCounties,\n      totalPopulation: this.state.totalPopulation,\n      enactedPlan: this.state.enactedPlan,\n      currentJob: this.state.currentJob,\n      changeCurrentState: this.changeCurrentState // Job-related methods\n      ,\n      updateCurrentJob: this.updateCurrentJob,\n      deleteJob: this.deleteJob,\n      toggleSelectedCard: this.toggleSelectedCard,\n      createJob: this.createJob,\n      cancelJob: this.cancelJob,\n      selectedJobCheck: this.state.selectedJobCheck,\n      generateBoxWhiskerValues: this.generateBoxWhiskerValues // Plan-related methods\n      ,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      deletePlan: this.deletePlan // Handling use cases for precinct and district views\n      ,\n      changeSelectedFilters: this.changeSelectedFilters,\n      changeViewFromZoom: this.changeViewFromZoom,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      toggleSelectedPlanCheck: this.toggleSelectedPlanCheck,\n      districtsView: this.state.districtsView,\n      districtsContent: this.state.districtsContent,\n      precinctsView: this.state.precinctsView,\n      precinctsContent: this.state.precinctsContent,\n      selectedFilters: this.state.selectedFilters // For Precinct Modal\n      ,\n      selectedFeature: this.state.selectedFeature,\n      togglePrecinctModal: this.state.togglePrecinctModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(DeveloperScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kadiatoudiallo/Documents/GitHub/CSE-416-Project/client/src/App.js"],"names":["HomeScreen","DeveloperScreen","React","Component","BrowserRouter","Route","Redirect","Switch","endpoint","testJobCards","GeoJSON","GADistricts","GAPrecincts","App","state","currentState","enactedPlan","totalPopulation","numOfPrecincts","numOfCounties","jobCards","jobs","currentJob","currentPlan","planState","selectedFilters","precinctsView","districtsView","filterDistrictsView","filterPrecinctsView","stateView","districtsContent","precinctsContent","selectedPlanCheck","selectedJobCheck","togglePrecinctModal","selectedFeature","changeCurrentState","stateAbrev","stateName","setState","stateObject","res","getState","console","log","changeSelectedFilters","selected","districtPlanClassStyle","goTop","exception","error","createJob","userInputs","generateJob","labelsMinorities","status","minorityAnalyzed","forEach","element","push","cancelJob","job","indexOfJob","indexOf","splice","deleteJob","e","onEachFeature","feature","layer","on","mouseover","mouseout","getPrecincts","getStatePrecincts","precinctsGeoJson","deletePlan","plan","type","indexOfPlan","districtPlans","generateBoxWhiskerValues","mapFilters","foundDistrictsView","foundPrecinctsView","i","length","label","changeViewFromZoom","viewType","actionType","updateCurrentJob","currentJobName","jobName","toggleSelectedCard","toggleSelectedPlanCheck","districtPlan","districtsGeoJson","render"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,kCAAvB;AACA,OAAOC,eAAP,MAA4B,wCAA5B;AAEA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,aAAT,EAAwBC,KAAxB,EAA+BC,QAA/B,QAA+C,kBAA/C;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAO,KAAKC,QAAZ,MAA0B,mBAA1B;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAO,0BAAP;AAEA,SAAQC,OAAR,QAAsB,eAAtB;AACA,OAAOC,WAAP,MAAwB,8CAAxB;AACA,OAAOC,WAAP,MAAwB,kCAAxB;;AAEA,MAAMC,GAAN,SAAkBV,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACxBW,KADwB,GAChB;AACN;AACAC,MAAAA,YAAY,EAAG,gBAFT;AAGNC,MAAAA,WAAW,EAAGP,YAAY,CAACO,WAHrB;AAINC,MAAAA,eAAe,EAAG,CAJZ;AAKNC,MAAAA,cAAc,EAAG,CALX;AAMNC,MAAAA,aAAa,EAAG,CANV;AAQN;AACAC,MAAAA,QAAQ,EAAGX,YAAY,CAACY,IATlB;AAUNC,MAAAA,UAAU,EAAG,EAVP;AAWNC,MAAAA,WAAW,EAAG,EAXR;AAYNC,MAAAA,SAAS,EAAG,IAZN;AAcN;AACAC,MAAAA,eAAe,EAAG,IAfZ;AAgBNC,MAAAA,aAAa,EAAG,KAhBV;AAiBNC,MAAAA,aAAa,EAAG,KAjBV;AAkBNC,MAAAA,mBAAmB,EAAG,KAlBhB;AAmBNC,MAAAA,mBAAmB,EAAG,KAnBhB;AAoBNC,MAAAA,SAAS,EAAG,IApBN;AAsBN;AACAC,MAAAA,gBAAgB,EAAG,IAvBb;AAwBNC,MAAAA,gBAAgB,EAAG,IAxBb;AA0BN;AACAC,MAAAA,iBAAiB,EAAE,KA3Bb;AA4BNC,MAAAA,gBAAgB,EAAE,KA5BZ;AA8BN;AACAC,MAAAA,mBAAmB,EAAG,KA/BhB;AAgCNC,MAAAA,eAAe,EAAG;AAhCZ,KADgB;;AAAA,SAqC1BC,kBArC0B,GAqCL,OAAOC,UAAP,EAAmBC,SAAnB,KAAiC;AACpD,WAAKC,QAAL,CAAc;AAAClB,QAAAA,UAAU,EAAG;AAAd,OAAd;AACA,WAAKkB,QAAL,CAAc;AAACzB,QAAAA,YAAY,EAAGwB;AAAhB,OAAd;AACA,UAAIE,WAAW,GAAI;AACjB3B,QAAAA,KAAK,EAAEwB;AADU,OAAnB;;AAGA,UAAI;AACF,YAAII,GAAG,GAAG,MAAMlC,QAAQ,CAACmC,QAAT,CAAkBF,WAAlB,CAAhB;AACAG,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,aAAKF,QAAL,CAAc;AAAEpB,UAAAA,QAAQ,EAAGsB,GAAG,CAACrB;AAAjB,SAAd,EAHE,CAKF;;AACA,aAAKmB,QAAL,CAAc;AAAET,UAAAA,gBAAgB,EAAG;AAArB,SAAd;AACA,aAAKS,QAAL,CAAc;AAAER,UAAAA,gBAAgB,EAAG;AAArB,SAAd;AACA,aAAKQ,QAAL,CAAc;AAAEb,UAAAA,aAAa,EAAG;AAAlB,SAAd;AACA,aAAKa,QAAL,CAAc;AAAEd,UAAAA,aAAa,EAAG;AAAlB,SAAd;AACA,aAAKc,QAAL,CAAc;AAACf,UAAAA,eAAe,EAAG;AAAnB,SAAd;AACA,aAAKqB,qBAAL,CAA2B,IAA3B,EAXE,CAaF;;AACA,aAAKN,QAAL,CAAc;AAAClB,UAAAA,UAAU,EAAG;AAAd,SAAd;AACA,aAAKkB,QAAL,CAAc;AAACP,UAAAA,iBAAiB,EAAE;AAApB,SAAd;AACA,aAAKO,QAAL,CAAc;AAACN,UAAAA,gBAAgB,EAAG;AAApB,SAAd;AACA,aAAKpB,KAAL,CAAWU,SAAX,CAAqBgB,QAArB,CAA8B;AAACO,UAAAA,QAAQ,EAAG;AAAZ,SAA9B;AACA,aAAKjC,KAAL,CAAWU,SAAX,CAAqBwB,sBAArB,GAA8C,EAA9C;AACA,aAAKlC,KAAL,CAAWU,SAAX,CAAqByB,KAArB,GAA6B,EAA7B,CAnBE,CAqBF;;AACA,aAAKT,QAAL,CAAc;AAAExB,UAAAA,WAAW,EAAG0B,GAAG,CAAC5B,KAAJ,CAAUE;AAA1B,SAAd;AACA,aAAKwB,QAAL,CAAc;AAAEvB,UAAAA,eAAe,EAAGyB,GAAG,CAAC5B,KAAJ,CAAUG;AAA9B,SAAd;AACA,aAAKuB,QAAL,CAAc;AAAEtB,UAAAA,cAAc,EAAGwB,GAAG,CAAC5B,KAAJ,CAAUI;AAA7B,SAAd;AACA,aAAKsB,QAAL,CAAc;AAAErB,UAAAA,aAAa,EAAGuB,GAAG,CAAC5B,KAAJ,CAAUK;AAA5B,SAAd;AAGD,OA5BD,CA4BE,OAAO+B,SAAP,EAAkB;AAClBN,QAAAA,OAAO,CAACO,KAAR,CAAcD,SAAd;AACD;AACF,KA1EyB;;AAAA,SA4E1BE,SA5E0B,GA4Ed,MAAOC,UAAP,IAAsB;AAC9B,UAAI;AACF,YAAIX,GAAG,GAAG,MAAMlC,QAAQ,CAAC8C,WAAT,CAAqBD,UAArB,CAAhB,CADE,CACgD;;AAClDT,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACA,YAAIa,gBAAgB,GAAG,EAAvB;AACA,YAAIb,GAAG,CAACc,MAAJ,IAAc,SAAlB,EAA6Bd,GAAG,CAACc,MAAJ,GAAa,SAAb;AAC7B,YAAId,GAAG,CAACc,MAAJ,IAAc,WAAlB,EAA+Bd,GAAG,CAACc,MAAJ,GAAa,WAAb;AAC/Bd,QAAAA,GAAG,CAACe,gBAAJ,CAAqBC,OAArB,CAA6BC,OAAO,IAAI;AAAE;AACtC,kBAAQA,OAAR;AACE,iBAAK,gBAAL;AACEJ,cAAAA,gBAAgB,CAACK,IAAjB,CAAsB,OAAtB;AACA;;AACF,iBAAK,kBAAL;AACEL,cAAAA,gBAAgB,CAACK,IAAjB,CAAsB,kBAAtB;AACA;;AACF,iBAAK,iBAAL;AACEL,cAAAA,gBAAgB,CAACK,IAAjB,CAAsB,QAAtB;AACA;;AACF,iBAAK,gBAAL;AACEL,cAAAA,gBAAgB,CAACK,IAAjB,CAAsB,OAAtB;AACA;;AACF,iBAAK,iBAAL;AACEL,cAAAA,gBAAgB,CAACK,IAAjB,CAAsB,iBAAtB;AACA;;AACF,iBAAK,mBAAL;AACEL,cAAAA,gBAAgB,CAACK,IAAjB,CAAsB,UAAtB;AACA;;AACF,iBAAK,gBAAL;AACEL,cAAAA,gBAAgB,CAACK,IAAjB,CAAsB,OAAtB;AACA;AArBJ;AAuBH,SAxBD;AAyBAlB,QAAAA,GAAG,CAACe,gBAAJ,GAAuBF,gBAAvB;AACA,aAAKzC,KAAL,CAAWM,QAAX,CAAoBwC,IAApB,CAAyBlB,GAAzB;AACA,aAAKF,QAAL,CAAc;AAACpB,UAAAA,QAAQ,EAAG,KAAKN,KAAL,CAAWM;AAAvB,SAAd;AACD,OAlCD,CAkCE,OAAO8B,SAAP,EAAkB;AAClBN,QAAAA,OAAO,CAACO,KAAR,CAAcD,SAAd;AACD;AACJ,KAlHyB;;AAAA,SAoH1BW,SApH0B,GAoHbC,GAAD,IAAS;AACnB,UAAIC,UAAU,GAAG,KAAKjD,KAAL,CAAWM,QAAX,CAAoB4C,OAApB,CAA4BF,GAA5B,CAAjB;AACA,UAAIC,UAAU,IAAI,CAAlB,EACI,KAAKjD,KAAL,CAAWM,QAAX,CAAoB6C,MAApB,CAA2BF,UAA3B,EAAuC,CAAvC;AACJ,WAAKvB,QAAL,CAAc;AAAEpB,QAAAA,QAAQ,EAAG,KAAKN,KAAL,CAAWM;AAAxB,OAAd;AACD,KAzHyB;;AAAA,SA2H1B8C,SA3H0B,GA2Hd,MAAOJ,GAAP,IAAe;AACzB,UAAIC,UAAU,GAAG,KAAKjD,KAAL,CAAWM,QAAX,CAAoB4C,OAApB,CAA4BF,GAA5B,CAAjB;AACA,UAAIC,UAAU,IAAI,CAAlB,EACI,KAAKjD,KAAL,CAAWM,QAAX,CAAoB6C,MAApB,CAA2BF,UAA3B,EAAuC,CAAvC;;AACF,UAAI;AACF,YAAIrB,GAAG,GAAG,MAAMlC,QAAQ,CAAC0D,SAAT,CAAmBJ,GAAnB,CAAhB;AACAlB,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACD,OAHD,CAGE,OAAOQ,SAAP,EAAkB;AAClBN,QAAAA,OAAO,CAACO,KAAR,CAAcD,SAAd;AACD;;AACH,WAAKV,QAAL,CAAc;AAAEpB,QAAAA,QAAQ,EAAG,KAAKN,KAAL,CAAWM;AAAxB,OAAd;AACD,KAtIyB;;AAAA,SAwI1Be,mBAxI0B,GAwIHgC,CAAD,IAAO;AAC3B,UAAI,KAAKrD,KAAL,CAAWqB,mBAAX,IAAkC,KAAtC,EAA6C,KAAKK,QAAL,CAAc;AAACL,QAAAA,mBAAmB,EAAG;AAAvB,OAAd,EAA7C,KACK,KAAKK,QAAL,CAAc;AAACL,QAAAA,mBAAmB,EAAG;AAAvB,OAAd;AACN,KA3IyB;;AAAA,SA6I1BiC,aA7I0B,GA6IV,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAClC1B,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACI,WAAKL,QAAL,CAAc;AAACJ,QAAAA,eAAe,EAAGiC;AAAnB,OAAd;AACAC,MAAAA,KAAK,CAACC,EAAN,CAAS;AACLC,QAAAA,SAAS,EAAGL,CAAD,IAAO,KAAKhC,mBAAL,CAAyBgC,CAAzB,CADb;AAELM,QAAAA,QAAQ,EAAGN,CAAD,IAAO,KAAKhC,mBAAL,CAAyBgC,CAAzB;AAFZ,OAAT;AAIL,KApJyB;;AAAA,SAsJ1BO,YAtJ0B,GAsJX,YAAY;AACzB,UAAI;AACF,YAAIhC,GAAG,GAAG,MAAMlC,QAAQ,CAACmE,iBAAT,EAAhB;AACA,aAAKnC,QAAL,CAAc;AAACR,UAAAA,gBAAgB,eAC/B,oBAAC,OAAD;AACE,YAAA,MAAM,EAAE,CADV;AAEE,YAAA,KAAK,EAAC,KAFR;AAGE,YAAA,GAAG,EAAC,WAHN;AAIE,YAAA,IAAI,EAAEU,GAAG,CAACkC,gBAJZ;AAKE,YAAA,aAAa,EAAI,KAAKR,aALxB,CAME;AANF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADc,SAAd;AAUD,OAZD,CAYE,OAAOlB,SAAP,EAAkB;AAClBN,QAAAA,OAAO,CAACO,KAAR,CAAcD,SAAd;AACD;AACF,KAtKyB;;AAAA,SAwK1B2B,UAxK0B,GAwKZC,IAAD,IAAU;AACrB,UAAI,KAAKhE,KAAL,CAAWQ,UAAX,IAAyB,EAAzB,IAA+BwD,IAAI,CAACC,IAAL,IAAa,cAAhD,EAAgE;AAC9D,YAAIjB,GAAG,GAAG,KAAKhD,KAAL,CAAWQ,UAArB;AACA,YAAIyC,UAAU,GAAG,KAAKjD,KAAL,CAAWM,QAAX,CAAoB4C,OAApB,CAA4BF,GAA5B,CAAjB;AACA,YAAIkB,WAAW,GAAG,KAAKlE,KAAL,CAAWM,QAAX,CAAoB2C,UAApB,EAAgCkB,aAAhC,CAA8CjB,OAA9C,CAAsDc,IAAtD,CAAlB;AACA,YAAIE,WAAW,IAAI,CAAnB,EACE,KAAKlE,KAAL,CAAWM,QAAX,CAAoB2C,UAApB,EAAgCkB,aAAhC,CAA8ChB,MAA9C,CAAqDe,WAArD,EAAkE,CAAlE;AACF,aAAKxC,QAAL,CAAc;AAAEpB,UAAAA,QAAQ,EAAG,KAAKN,KAAL,CAAWM;AAAxB,SAAd;AACD;;AACD,WAAKoB,QAAL,CAAc;AAAEpB,QAAAA,QAAQ,EAAG,KAAKN,KAAL,CAAWM;AAAxB,OAAd;AACD,KAlLyB;;AAAA,SAoL1B8D,wBApL0B,GAoLC,MAAM;AAC/BtC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAK/B,KAAL,CAAWQ,UAAvB;;AACA,UAAI,CACF;AACA;AACD,OAHD,CAGE,OAAO4B,SAAP,EAAkB;AAClBN,QAAAA,OAAO,CAACO,KAAR,CAAcD,SAAd;AACD;AACF,KA5LyB;;AAAA,SA8L1BJ,qBA9L0B,GA8LDqC,UAAD,IAAgB;AACtC,UAAIC,kBAAkB,GAAG,KAAzB;AACA,UAAIC,kBAAkB,GAAG,KAAzB;AACA,WAAK7C,QAAL,CAAc;AAACf,QAAAA,eAAe,EAAG0D;AAAnB,OAAd;;AACA,UAAIA,UAAU,IAAI,IAAlB,EAAwB;AAAE;AACxB,aAAK3C,QAAL,CAAc;AAACb,UAAAA,aAAa,EAAG;AAAjB,SAAd;AACA,aAAKa,QAAL,CAAc;AAACd,UAAAA,aAAa,EAAG;AAAjB,SAAd;AACA,aAAKc,QAAL,CAAc;AAACZ,UAAAA,mBAAmB,EAAG;AAAvB,SAAd;AACA,aAAKY,QAAL,CAAc;AAACX,UAAAA,mBAAmB,EAAG;AAAvB,SAAd;AACA,aAAKW,QAAL,CAAc;AAACR,UAAAA,gBAAgB,EAAG;AAApB,SAAd;AACA;AACD;;AACD,WAAK,IAAIsD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAAU,CAACI,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,YAAIH,UAAU,CAACG,CAAD,CAAV,CAAcE,KAAd,IAAuB,WAA3B,EAAyC;AAAE;AACzC,eAAKhD,QAAL,CAAc;AAACd,YAAAA,aAAa,EAAG;AAAjB,WAAd;AACA,eAAKgD,YAAL,GAFuC,CAGvC;;AACAW,UAAAA,kBAAkB,GAAG,IAArB;AACA,eAAK7C,QAAL,CAAc;AAAEX,YAAAA,mBAAmB,EAAG;AAAxB,WAAd;AACD,SAND,MAOK,IAAIsD,UAAU,CAACG,CAAD,CAAV,CAAcE,KAAd,IAAuB,WAA3B,EAAwC;AAAG;AAC9C5C,UAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,eAAKL,QAAL,CAAc;AAACb,YAAAA,aAAa,EAAG;AAAjB,WAAd;AACAyD,UAAAA,kBAAkB,GAAG,IAArB;AACA,eAAK5C,QAAL,CAAc;AAACZ,YAAAA,mBAAmB,EAAG;AAAvB,WAAd;AACD;AACF;;AACC,UAAIyD,kBAAkB,IAAI,KAA1B,EAAiC;AAAE;AACjC,aAAK7C,QAAL,CAAc;AAACd,UAAAA,aAAa,EAAG;AAAjB,SAAd;AACA,aAAKc,QAAL,CAAc;AAACR,UAAAA,gBAAgB,EAAG;AAApB,SAAd;AACA,aAAKQ,QAAL,CAAc;AAACX,UAAAA,mBAAmB,EAAG;AAAvB,SAAd;AACD;;AACD,UAAIuD,kBAAkB,IAAI,KAA1B,EAAiC;AAC/B,aAAK5C,QAAL,CAAc;AAACb,UAAAA,aAAa,EAAG;AAAjB,SAAd;AACA,aAAKa,QAAL,CAAc;AAACZ,UAAAA,mBAAmB,EAAG;AAAvB,SAAd;AACD;AACJ,KAlOyB;;AAAA,SAoO1B6D,kBApO0B,GAoOL,CAACC,QAAD,EAAWC,UAAX,KAA0B;AAAE;AAC/C,UAAID,QAAQ,IAAI,WAAhB,EAA6B;AAC3B,YAAI,KAAK5E,KAAL,CAAWc,mBAAX,IAAkC,IAAtC,EAA4C,OAA5C,KACK,IAAI,KAAKd,KAAL,CAAWc,mBAAX,IAAkC,KAAlC,IAA2C+D,UAAU,IAAI,CAA7D,EAAgE;AACnE,eAAKnD,QAAL,CAAc;AAACb,YAAAA,aAAa,EAAG;AAAjB,WAAd;AACD,SAFI,MAGA,IAAI,KAAKb,KAAL,CAAWc,mBAAX,IAAkC,KAAlC,IAA2C+D,UAAU,IAAI,CAA7D,EAAgE,KAAKnD,QAAL,CAAc;AAACb,UAAAA,aAAa,EAAG;AAAjB,SAAd;AACtE;;AACD,UAAI+D,QAAQ,IAAI,WAAhB,EAA6B;AAC3B,YAAI,KAAK5E,KAAL,CAAWe,mBAAX,IAAkC,IAAtC,EAA4C,OAA5C,KACK,IAAI,KAAKf,KAAL,CAAWe,mBAAX,IAAkC,KAAlC,IAA2C8D,UAAU,IAAI,CAA7D,EAAgE;AACnE,eAAKnD,QAAL,CAAc;AAACd,YAAAA,aAAa,EAAG;AAAjB,WAAd;AACA,eAAKgD,YAAL,GAFmE,CAGnE;AACD,SAJI,MAKA,IAAI,KAAK5D,KAAL,CAAWe,mBAAX,IAAkC,KAAlC,IAA2C8D,UAAU,IAAI,CAA7D,EAAgE;AACnE,eAAKnD,QAAL,CAAc;AAACd,YAAAA,aAAa,EAAG;AAAjB,WAAd;AACA,eAAKc,QAAL,CAAc;AAACR,YAAAA,gBAAgB,EAAG;AAApB,WAAd;AACD;AACF;AACF,KAxPyB;;AAAA,SA0P1B4D,gBA1P0B,GA0PP,CAAC9B,GAAD,EAAMf,QAAN,KAAmB;AACpC,UAAIA,QAAQ,IAAI,IAAhB,EAAsB;AAAE;AACtB,aAAKP,QAAL,CAAc;AAAClB,UAAAA,UAAU,EAAGwC;AAAd,SAAd;AACA,aAAKtB,QAAL,CAAc;AAACqD,UAAAA,cAAc,EAAG/B,GAAG,CAACgC;AAAtB,SAAd;AACD,OAHD,MAIK;AAAE;AACL,aAAKtD,QAAL,CAAc;AAAClB,UAAAA,UAAU,EAAG;AAAd,SAAd;AACA,aAAKkB,QAAL,CAAc;AAACqD,UAAAA,cAAc,EAAG;AAAlB,SAAd;AACD;AACF,KAnQyB;;AAAA,SAqQ1BE,kBArQ0B,GAqQL,MAAM;AACzB,UAAI,KAAKjF,KAAL,CAAWoB,gBAAX,IAA+B,KAAnC,EAA0C,KAAKM,QAAL,CAAc;AAACN,QAAAA,gBAAgB,EAAG;AAApB,OAAd,EAA1C,KACK,KAAKM,QAAL,CAAc;AAACN,QAAAA,gBAAgB,EAAG;AAApB,OAAd;AACN,KAxQyB;;AAAA,SA0Q1B8D,uBA1Q0B,GA0QA,CAACC,YAAD,EAAenF,KAAf,KAAyB;AACjD,UAAI,KAAKA,KAAL,CAAWmB,iBAAX,IAAgC,KAApC,EAA2C;AACzC,aAAKO,QAAL,CAAc;AAACP,UAAAA,iBAAiB,EAAE;AAApB,SAAd;AACA,aAAKO,QAAL,CAAc;AAACjB,UAAAA,WAAW,EAAG0E;AAAf,SAAd;AACA,aAAKzD,QAAL,CAAc;AAAChB,UAAAA,SAAS,EAAGV;AAAb,SAAd;AACA,aAAK0B,QAAL,CAAc;AAACT,UAAAA,gBAAgB,eAAG,oBAAC,OAAD;AAAS,YAAA,MAAM,EAAE,CAAjB;AAAoB,YAAA,KAAK,EAAC,KAA1B;AAAgC,YAAA,GAAG,EAAC,kBAApC;AAAuD,YAAA,IAAI,EAAEkE,YAAY,CAACC,gBAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAApB,SAAd;AACD,OALD,MAMK;AACH,aAAK1D,QAAL,CAAc;AAACP,UAAAA,iBAAiB,EAAG;AAArB,SAAd;AACA,aAAKO,QAAL,CAAc;AAACT,UAAAA,gBAAgB,EAAG;AAApB,SAAd;AACD;AACF,KArRyB;AAAA;;AAuR1BoE,EAAAA,MAAM,GAAG;AACT,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACQ,oBAAC,UAAD,CAEA;AAFA;AAGA,MAAA,YAAY,EAAE,KAAKrF,KAAL,CAAWC,YAHzB;AAGuC,MAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWM,QAH5D;AAIA,MAAA,cAAc,EAAE,KAAKN,KAAL,CAAWI,cAJ3B;AAI2C,MAAA,aAAa,EAAE,KAAKJ,KAAL,CAAWK,aAJrE;AAKA,MAAA,eAAe,EAAE,KAAKL,KAAL,CAAWG,eAL5B;AAK6C,MAAA,WAAW,EAAI,KAAKH,KAAL,CAAWE,WALvE;AAMA,MAAA,UAAU,EAAG,KAAKF,KAAL,CAAWQ,UANxB;AAMoC,MAAA,kBAAkB,EAAE,KAAKe,kBAN7D,CAQA;AARA;AASA,MAAA,gBAAgB,EAAE,KAAKuD,gBATvB;AASyC,MAAA,SAAS,EAAE,KAAK1B,SATzD;AASoE,MAAA,kBAAkB,EAAE,KAAK6B,kBAT7F;AAUA,MAAA,SAAS,EAAE,KAAK3C,SAVhB;AAU2B,MAAA,SAAS,EAAE,KAAKS,SAV3C;AAUsD,MAAA,gBAAgB,EAAE,KAAK/C,KAAL,CAAWoB,gBAVnF;AAWA,MAAA,wBAAwB,EAAE,KAAKgD,wBAX/B,CAaA;AAbA;AAcA,MAAA,iBAAiB,EAAE,KAAKpE,KAAL,CAAWmB,iBAd9B;AAciD,MAAA,UAAU,EAAE,KAAK4C,UAdlE,CAgBA;AAhBA;AAiBA,MAAA,qBAAqB,EAAE,KAAK/B,qBAjB5B;AAiBmD,MAAA,kBAAkB,EAAE,KAAK2C,kBAjB5E;AAkBA,MAAA,iBAAiB,EAAE,KAAK3E,KAAL,CAAWmB,iBAlB9B;AAkBiD,MAAA,uBAAuB,EAAE,KAAK+D,uBAlB/E;AAmBA,MAAA,aAAa,EAAI,KAAKlF,KAAL,CAAWa,aAnB5B;AAmB2C,MAAA,gBAAgB,EAAI,KAAKb,KAAL,CAAWiB,gBAnB1E;AAoBA,MAAA,aAAa,EAAI,KAAKjB,KAAL,CAAWY,aApB5B;AAoB2C,MAAA,gBAAgB,EAAI,KAAKZ,KAAL,CAAWkB,gBApB1E;AAqBA,MAAA,eAAe,EAAI,KAAKlB,KAAL,CAAWW,eArB9B,CAuBA;AAvBA;AAwBA,MAAA,eAAe,EAAI,KAAKX,KAAL,CAAWsB,eAxB9B;AAyBA,MAAA,mBAAmB,EAAI,KAAKtB,KAAL,CAAWqB,mBAzBlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADR,eA6BQ,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA7BR,CADF;AAkCC;;AA1TyB;;AA6T5B,eAAetB,GAAf","sourcesContent":["import HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Developer\"\n\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport * as endpoint from './endpoint/Client';\nimport testJobCards from './json/TestJobCards.json'\nimport './css/project_styles.css';\n\nimport {GeoJSON} from 'react-leaflet';\nimport GADistricts from './json/GEORGIA/ga_congressionalDistrict.json';\nimport GAPrecincts from './json/GEORGIA/ga_precincts.json';\n\nclass App extends Component {\n    state = {\n      // State:\n      currentState : \"Select a state\",\n      enactedPlan : testJobCards.enactedPlan, \n      totalPopulation : 0,\n      numOfPrecincts : 0,\n      numOfCounties : 0,\n\n      // Jobs:\n      jobCards : testJobCards.jobs,\n      currentJob : \"\",\n      currentPlan : \"\",\n      planState : null,\n\n      // Map View Filters:\n      selectedFilters : null,\n      precinctsView : false,\n      districtsView : false, \n      filterDistrictsView : false, \n      filterPrecinctsView : false, \n      stateView : true,\n\n      // Map View Content\n      districtsContent : null,\n      precinctsContent : null,\n\n      // Checks for Selection\n      selectedPlanCheck: false,\n      selectedJobCheck: false,\n\n      // Modals\n      togglePrecinctModal : false,\n      selectedFeature : null\n\n    }\n\n  changeCurrentState = async (stateAbrev, stateName) => {\n    this.setState({currentJob : \"\"}) \n    this.setState({currentState : stateName});\n    let stateObject =  {\n      state: stateAbrev\n    }\n    try {\n      let res = await endpoint.getState(stateObject);\n      console.log(res)\n      this.setState({ jobCards : res.jobs}); \n\n      // Reset Views / Contents of Filters \n      this.setState({ districtsContent : null})\n      this.setState({ precinctsContent : null})\n      this.setState({ districtsView : null})\n      this.setState({ precinctsView : null})\n      this.setState({selectedFilters : null})\n      this.changeSelectedFilters(null)\n\n      // Clear any selected job/plan\n      this.setState({currentJob : \"\"})\n      this.setState({selectedPlanCheck: false})\n      this.setState({selectedJobCheck : false})\n      this.state.planState.setState({selected : false})\n      this.state.planState.districtPlanClassStyle = \"\";\n      this.state.planState.goTop = \"\"\n\n      // Initialize state object\n      this.setState({ enactedPlan : res.state.enactedPlan}); \n      this.setState({ totalPopulation : res.state.totalPopulation});\n      this.setState({ numOfPrecincts : res.state.numOfPrecincts});\n      this.setState({ numOfCounties : res.state.numOfCounties}); \n\n\n    } catch (exception) {\n      console.error(exception);\n    }\n  }\n\n  createJob = async (userInputs) => {\n      try {\n        let res = await endpoint.generateJob(userInputs); // bug right here\n        console.log(res)\n        let labelsMinorities = [];\n        if (res.status == \"PENDING\") res.status = \"Pending\";\n        if (res.status == \"COMPLETED\") res.status = \"Completed\"\n        res.minorityAnalyzed.forEach(element => { // values --> keys\n            switch (element) {\n              case \"WHITE_AMERICAN\": \n                labelsMinorities.push(\"White\");\n                break;\n              case \"AFRICAN_AMERICAN\": \n                labelsMinorities.push(\"African American\");\n                break;\n              case \"LATINO_AMERICAN\": \n                labelsMinorities.push(\"Latino\");\n                break;\n              case \"ASIAN_AMERICAN\": \n                labelsMinorities.push(\"Asian\");\n                break;\n              case \"AMERICAN_INDIAN\": \n                labelsMinorities.push(\"American Indian\");\n                break;\n              case \"HAWAIIAN_AMERICAN\": \n                labelsMinorities.push(\"Hawaiian\");\n                break;\n              case \"OTHER_AMERICAN\": \n                labelsMinorities.push(\"Other\");\n                break;\n            }\n        })\n        res.minorityAnalyzed = labelsMinorities\n        this.state.jobCards.push(res);\n        this.setState({jobCards : this.state.jobCards})\n      } catch (exception) {\n        console.error(exception);\n      }\n  }\n\n  cancelJob = (job) => { \n    let indexOfJob = this.state.jobCards.indexOf(job);\n    if (indexOfJob >= 0)\n        this.state.jobCards.splice(indexOfJob, 1);\n    this.setState({ jobCards : this.state.jobCards})\n  }\n\n  deleteJob = async (job) => { \n    let indexOfJob = this.state.jobCards.indexOf(job);\n    if (indexOfJob >= 0)\n        this.state.jobCards.splice(indexOfJob, 1);\n      try {\n        let res = await endpoint.deleteJob(job);\n        console.log(res)\n      } catch (exception) {\n        console.error(exception);\n      }\n    this.setState({ jobCards : this.state.jobCards})\n  }\n\n  togglePrecinctModal = (e) => {\n    if (this.state.togglePrecinctModal == false) this.setState({togglePrecinctModal : true})\n    else this.setState({togglePrecinctModal : false})\n  }\n\n  onEachFeature = (feature, layer) => {\n    console.log('onEachFeature fired: ');\n        this.setState({selectedFeature : feature})\n        layer.on({\n            mouseover: (e) => this.togglePrecinctModal(e),\n            mouseout: (e) => this.togglePrecinctModal(e)\n        });\n  }\n  \n  getPrecincts = async () => {\n    try {\n      let res = await endpoint.getStatePrecincts();\n      this.setState({precinctsContent : \n      <GeoJSON \n        weight={1} \n        color=\"red\" \n        key='precincts' \n        data={res.precinctsGeoJson} \n        onEachFeature = {this.onEachFeature}\n        // onmouseover = {this.onEachFeature}\n        \n      />});\n    } catch (exception) {\n      console.error(exception);\n    }\n  }\n\n  deletePlan = (plan) => {\n    if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\n      let job = this.state.currentJob;\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\n      if (indexOfPlan >= 0)\n        this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\n      this.setState({ jobCards : this.state.jobCards})\n    }\n    this.setState({ jobCards : this.state.jobCards })\n  }\n\n  generateBoxWhiskerValues = () => {\n    console.log(this.state.currentJob)\n    try {\n      // let res = await endpoint.generateBoxWhisker(currentJob);\n      // console.log(res)\n    } catch (exception) {\n      console.error(exception);\n    }\n  }\n\n  changeSelectedFilters = (mapFilters) => {\n    let foundDistrictsView = false\n    let foundPrecinctsView = false\n    this.setState({selectedFilters : mapFilters});\n    if (mapFilters == null) { // reset\n      this.setState({districtsView : false}) \n      this.setState({precinctsView : false})\n      this.setState({filterDistrictsView : false})\n      this.setState({filterPrecinctsView : false })\n      this.setState({precinctsContent : null })\n      return;\n    }\n    for (var i = 0; i < mapFilters.length; i++) {\n      if (mapFilters[i].label == \"Precincts\")  { // precinct view\n        this.setState({precinctsView : true})\n        this.getPrecincts();\n        // this.setState({precinctsContent : <GeoJSON weight={1} color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\n        foundPrecinctsView = true;\n        this.setState({ filterPrecinctsView : true })\n      }\n      else if (mapFilters[i].label == \"Districts\") {  // district view\n        console.log(\"DISTRICTS VIEW ON\")\n        this.setState({districtsView : true})\n        foundDistrictsView = true;\n        this.setState({filterDistrictsView : true})\n      }\n    }\n      if (foundPrecinctsView == false) { // if not selected\n        this.setState({precinctsView : false})\n        this.setState({precinctsContent : null })\n        this.setState({filterPrecinctsView : false })\n      }\n      if (foundDistrictsView == false) {\n        this.setState({districtsView : false})\n        this.setState({filterDistrictsView : false})\n      }\n  }\n\n  changeViewFromZoom = (viewType, actionType) => { // actionType = 0 (delete view) or 1 (insert view)\n    if (viewType == \"Districts\") {\n      if (this.state.filterDistrictsView == true) return; \n      else if (this.state.filterDistrictsView == false && actionType == 1) {\n        this.setState({districtsView : true})\n      }\n      else if (this.state.filterDistrictsView == false && actionType == 0) this.setState({districtsView : false})\n    }\n    if (viewType == \"Precincts\") {\n      if (this.state.filterPrecinctsView == true) return; \n      else if (this.state.filterPrecinctsView == false && actionType == 1) { \n        this.setState({precinctsView : true})\n        this.getPrecincts();\n        // this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\n      }\n      else if (this.state.filterPrecinctsView == false && actionType == 0) { \n        this.setState({precinctsView : false})\n        this.setState({precinctsContent : null })\n      }\n    }\n  }\n\n  updateCurrentJob = (job, selected) => {\n    if (selected == true) { // job just selected\n      this.setState({currentJob : job});\n      this.setState({currentJobName : job.jobName});\n    }\n    else { // job just de-selected\n      this.setState({currentJob : \"\"});\n      this.setState({currentJobName : \"\"});\n    }\n  }\n\n  toggleSelectedCard = () => {\n    if (this.state.selectedJobCheck == false) this.setState({selectedJobCheck : true});\n    else this.setState({selectedJobCheck : false});\n  }\n\n  toggleSelectedPlanCheck = (districtPlan, state) => {\n    if (this.state.selectedPlanCheck == false) {\n      this.setState({selectedPlanCheck: true});\n      this.setState({currentPlan : districtPlan})\n      this.setState({planState : state})\n      this.setState({districtsContent : <GeoJSON weight={1} color=\"red\" key='GeorgiaDistricts' data={districtPlan.districtsGeoJson} /> })\n    }\n    else {\n      this.setState({selectedPlanCheck : false});\n      this.setState({districtsContent : null});\n    }\n  }\n\n  render() {\n  return (\n    <div >\n            <HomeScreen \n\n            // State-related data\n            currentState={this.state.currentState} jobCards={this.state.jobCards}\n            numOfPrecincts={this.state.numOfPrecincts} numOfCounties={this.state.numOfCounties}\n            totalPopulation={this.state.totalPopulation} enactedPlan = {this.state.enactedPlan}\n            currentJob ={this.state.currentJob} changeCurrentState={this.changeCurrentState} \n\n            // Job-related methods\n            updateCurrentJob={this.updateCurrentJob} deleteJob={this.deleteJob} toggleSelectedCard={this.toggleSelectedCard}\n            createJob={this.createJob} cancelJob={this.cancelJob} selectedJobCheck={this.state.selectedJobCheck}\n            generateBoxWhiskerValues={this.generateBoxWhiskerValues} \n\n            // Plan-related methods\n            selectedPlanCheck={this.state.selectedPlanCheck} deletePlan={this.deletePlan}\n\n            // Handling use cases for precinct and district views\n            changeSelectedFilters={this.changeSelectedFilters} changeViewFromZoom={this.changeViewFromZoom}\n            selectedPlanCheck={this.state.selectedPlanCheck} toggleSelectedPlanCheck={this.toggleSelectedPlanCheck}\n            districtsView = {this.state.districtsView} districtsContent = {this.state.districtsContent}\n            precinctsView = {this.state.precinctsView} precinctsContent = {this.state.precinctsContent}\n            selectedFilters = {this.state.selectedFilters}\n\n            // For Precinct Modal\n            selectedFeature = {this.state.selectedFeature} \n            togglePrecinctModal = {this.state.togglePrecinctModal}\n            />\n\n            <DeveloperScreen/>            \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}