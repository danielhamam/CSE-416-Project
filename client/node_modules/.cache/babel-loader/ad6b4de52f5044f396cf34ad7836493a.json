{"ast":null,"code":"var _jsxFileName = \"/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/App.js\";\nimport HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Dev\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport { generateJob, getState } from './endpoint/Client';\nimport './css/project_styles.css'; // App.js is the parent component\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      jobCards: [],\n      // holds all the jobs retrieved back from the serverside (UPDATED BY JSON)\n      selectedJobCheck: false,\n      selectedPlanCheck: false,\n      currentState: \"Select a state\",\n      currentJobName: \"No Job Selected: \",\n      // name of the currently selected job\n      // selectedJobName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n      // Map View Filters \n      selectedFilters: null,\n      precinctView: false,\n      districtView: false,\n      stateView: true\n    };\n\n    this.createJob = userInputs => {\n      // New batch is a test \n      let newBatch = {\n        \"numberOfDistricting\": 10,\n        \"name\": \"batch1\",\n        \"isAvailable\": false,\n        \"populationDifference\": 10.0,\n        \"compactness\": 10.0,\n        \"state\": \"NY\"\n      };\n      let res = generateJob(newBatch);\n    };\n\n    this.cancelJob = jobID => {// string\n    };\n\n    this.deleteJob = jobID => {// string\n    };\n\n    this.generateBoxWhiskerValues = minorityGroups => {// open questions: do I send plan ID? district plan? \n    };\n\n    this.changeSelectedFilters = minorityGroups => {// open questions: do I send plan ID? district plan? \n    };\n\n    this.getSelectedJob = () => {// returns selected job\n      // .map and .filter use\n      // call in your districting plans and do .districtPlans from job's database for plans\n    };\n\n    this.toggleSelectedJobCheck = () => {\n      if (this.state.selectedJobCheck == false) this.setState({\n        selectedJobCheck: true\n      });else this.setState({\n        selectedJobCheck: false\n      });\n    };\n\n    this.toggleSelectedPlanCheck = () => {\n      if (this.state.selectedPlanCheck == false) this.setState({\n        selectedPlanCheck: true\n      });else this.setState({\n        selectedPlanCheck: false\n      });\n    };\n\n    this.updateCurrentJobName = name => {\n      if (name == \"\") this.setState({\n        currentJobName: \"No Job Selected: \"\n      });else this.setState({\n        currentJobName: name + \":\"\n      });\n    };\n\n    this.changeCurrentState = newName => {\n      this.setState({\n        currentState: newName\n      }); // this.setState({ jobCards : ____}); // update the jobCards in state\n    };\n\n    this.changeSelectedFilters = mapFilters => {\n      this.setState({\n        selectedFilters: mapFilters\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(HomeScreen, {\n      currentState: this.state.currentState,\n      changeSelectedFilters: this.changeSelectedFilters,\n      changeCurrentState: this.changeCurrentState,\n      currentJobName: this.state.currentJobName,\n      updateCurrentJobName: this.updateCurrentJobName,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      toggleSelectedPlanCheck: this.toggleSelectedPlanCheck,\n      selectedJobCheck: this.state.selectedJobCheck,\n      toggleSelectedJobCheck: this.toggleSelectedJobCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(DeveloperScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/App.js"],"names":["HomeScreen","DeveloperScreen","React","Component","BrowserRouter","Route","Redirect","Switch","generateJob","getState","App","state","jobCards","selectedJobCheck","selectedPlanCheck","currentState","currentJobName","selectedFilters","precinctView","districtView","stateView","createJob","userInputs","newBatch","res","cancelJob","jobID","deleteJob","generateBoxWhiskerValues","minorityGroups","changeSelectedFilters","getSelectedJob","toggleSelectedJobCheck","setState","toggleSelectedPlanCheck","updateCurrentJobName","name","changeCurrentState","newName","mapFilters","render"],"mappings":"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","sourcesContent":["import HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Dev\"\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport {\n  generateJob,\n  getState\n} from './endpoint/Client';\nimport './css/project_styles.css';\n\n// App.js is the parent component\nclass App extends Component {\n    state = {\n      jobCards : [], // holds all the jobs retrieved back from the serverside (UPDATED BY JSON)\n      selectedJobCheck: false,\n      selectedPlanCheck: false,\n      currentState : \"Select a state\",\n      currentJobName : \"No Job Selected: \", // name of the currently selected job\n      // selectedJobName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n              \n      // Map View Filters \n      selectedFilters : null,\n      precinctView : false,\n      districtView : false,\n      stateView : true\n      \n    }\n\n   /**\n   * This function creates a new job and calls generateJob in the Client.js endpoint\n   * \n   * @param {Array} userInputs Holds the inputs entered by the user to generate a new job\n   * \n   * Inputs: Districts (int), Districting Plans (int), Compactness (String), Population Difference (int (%)), \n   * Minority Focus Group(s) (Array<String>) , Job Name (String)\n   *\n   * the event occurs.\n   */\n  createJob = (userInputs) => {\n      // New batch is a test \n      let newBatch =  {\n        \"numberOfDistricting\" : 10,\n        \"name\": \"batch1\",\n        \"isAvailable\": false,\n        \"populationDifference\": 10.0,\n        \"compactness\": 10.0,\n        \"state\": \"NY\"\n    }\n      let res = generateJob(newBatch);\n  }\n\n   /**\n   * This function CANCELS a job by sending the job ID to backend, receives \"successfully cancelled\" status back.\n   * \n   * @param {String} jobID Represents the ID of the COMPLETED job to be cancelled.\n   * \n   */\n  cancelJob = (jobID) => { // string\n\n  }\n   /**\n   * This function DELETES a job by sending the job ID to backend, receives \"successfully deleted\" status back.\n   * \n   * @param {String} jobID Represents the ID of the COMPLETED job to be deleted.\n   * \n   */\n  deleteJob = (jobID) => { // string\n\n  }\n\n   /**\n   * This function DELETES a job by sending the job ID to backend, receives \"successfully deleted\" status back.\n   * \n   * @param {String} minorityGroups Represents the minority or minorities, which were selected when generating the\n   * currently selected job, in order to generate their voting age populations per district in the selected district plan\n   * \n   */\n  generateBoxWhiskerValues = (minorityGroups) => {\n      // open questions: do I send plan ID? district plan? \n  }\n\n   /**\n   * This function DELETES a job by sending the job ID to backend, receives \"successfully deleted\" status back.\n   * \n   * @param {String} minorityGroups Represents the minority or minorities, which were selected when generating the\n   * currently selected job, in order to generate their voting age populations per district in the selected district plan\n   * \n   */\n  changeSelectedFilters = (minorityGroups) => {\n    // open questions: do I send plan ID? district plan? \n}\n\n\n\n  getSelectedJob = () => {\n    // returns selected job\n    // .map and .filter use\n    // call in your districting plans and do .districtPlans from job's database for plans\n  }\n  \n  toggleSelectedJobCheck = () => {\n    if (this.state.selectedJobCheck == false) this.setState({selectedJobCheck : true});\n    else this.setState({selectedJobCheck : false});\n}\n\n  toggleSelectedPlanCheck = () => {\n    if (this.state.selectedPlanCheck == false) this.setState({selectedPlanCheck: true});\n    else this.setState({selectedPlanCheck : false});\n}\n\n  updateCurrentJobName = (name) => {\n    if (name == \"\") this.setState({currentJobName : \"No Job Selected: \"});\n    else this.setState({currentJobName : name + \":\"});\n  }\n\n  // Map Manipulation Functions\n  changeCurrentState = (newName) => {\n    this.setState({currentState : newName});\n    // this.setState({ jobCards : ____}); // update the jobCards in state\n  }\n\n  changeSelectedFilters = (mapFilters) => {\n    this.setState({selectedFilters : mapFilters});\n  }\n\n  render() {\n  return (\n    <div >\n\n        {/* <BrowserRouter>\n          <Switch>\n            <Redirect exact from=\"/\" to={{ pathname: \"/home\" }} />\n            <Route path=\"/home\"> */}\n            <HomeScreen currentState={this.state.currentState} changeSelectedFilters={this.changeSelectedFilters} changeCurrentState={this.changeCurrentState} currentJobName ={this.state.currentJobName} updateCurrentJobName={this.updateCurrentJobName} selectedPlanCheck={this.state.selectedPlanCheck} toggleSelectedPlanCheck={this.toggleSelectedPlanCheck} selectedJobCheck={this.state.selectedJobCheck} toggleSelectedJobCheck={this.toggleSelectedJobCheck}/>\n            {/* </Route> */}\n            {/* <Route path=\"/dev\"> */}\n            <DeveloperScreen/>            \n            {/* </Route> */}\n          {/* </Switch> */}\n        {/* // </BrowserRouter> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}