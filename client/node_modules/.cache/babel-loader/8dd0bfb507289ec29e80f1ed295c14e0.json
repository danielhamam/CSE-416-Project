{"ast":null,"code":"var _jsxFileName = \"/Users/kadiatoudiallo/Documents/GitHub/CSE-416-Project/client/src/App.js\";\nimport HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Developer\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport * as endpoint from './endpoint/Client';\nimport testJobCards from './json/TestJobCards.json';\nimport './css/project_styles.css'; // Map GeoJSONS\n\nimport { GeoJSON } from 'react-leaflet'; // NEW YORK:\n\nimport NYDistricts from './json/NEW_YORK/NewYorkDistricts.json';\nimport NYPrecincts from './json/NEW_YORK/NewYorkPrecincts.json'; // App.js is the parent component\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // State:\n      currentState: \"Select a state\",\n      enactedPlan: testJobCards.enactedPlan,\n      // holds district view\n      // Jobs:\n      jobCards: testJobCards.jobs,\n      // holds all the jobs retrieved back from the serverside (UPDATED BY JSON)\n      currentJob: \"\",\n      // Map View Filters:\n      selectedFilters: null,\n      // current demographic filters\n      precinctsView: false,\n      // currently showing precincts\n      districtsView: false,\n      // currently showing districts\n      filterDistrictsView: false,\n      // currently showing districts via selected map view filter\n      filterPrecinctsView: false,\n      // currently showing districts via selected map view filter\n      stateView: true,\n      // show stateView\n      // Map View Content\n      districtsContent: null,\n      precinctsContent: null,\n      // Checks for Selection\n      selectedPlanCheck: false,\n      selectedJobCheck: false // Modals\n      // selectedJobName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n\n    };\n\n    this.changeCurrentState = async stateName => {\n      this.setState({\n        currentJob: \"\"\n      }); // any current job is no longer selected now\n\n      this.setState({\n        currentState: stateName\n      });\n      if (stateName == \"Georgia\") stateName = \"GE\";else if (stateName == \"New York\") stateName = \"NY\";else stateName = \"CA\";\n      let stateObject = {\n        state: stateName\n      };\n\n      try {\n        let res = await endpoint.getState(stateObject);\n        console.log(res);\n        this.setState({\n          jobCards: res.jobs\n        }); // update the current jobCards\n\n        this.setState({\n          enactedPlan: res.state.enactedPlan\n        }); // update the current enacted plan\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.createJob = async userInputs => {\n      // userInputs is an OBJECT of the constraints user selected. Let's gather them here. \n      try {\n        let res = await endpoint.generateJob(userInputs); // use of .then here? or keep that in client.js for fetch?\n\n        console.log(res);\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.cancelJob = job => {\n      // string\n      // Remove job from jobCards\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      if (indexOfJob >= 0) this.state.jobCards.splice(indexOfJob, 1);\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.deleteJob = job => {\n      // string\n      // Remove job from jobCards\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      if (indexOfJob >= 0) this.state.jobCards.splice(indexOfJob, 1);\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.deletePlan = plan => {\n      // string\n      // What plan is it?\n      if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\n        let job = this.state.currentJob;\n        let indexOfJob = this.state.jobCards.indexOf(job);\n        let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\n        if (indexOfPlan >= 0) this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\n        this.setState({\n          jobCards: this.state.jobCards\n        });\n      } // else, we are deleting the enacted plan\n      // this.state.jobCards.enactedPlan.splice(indexOfPlan, 1);\n\n\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.generateBoxWhiskerValues = () => {\n      console.log(\"sending this:\");\n      console.log(this.state.currentJob);\n\n      try {// let res = await endpoint.getState(currentJob);\n        // console.log(res)\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.changeSelectedFilters = mapFilters => {\n      // open questions: check if change for demographic heat map or for cluster? Separate functions?\n      // does updates one at a time (but if you have two filters does it over again)\n      let foundDistrictsView = false;\n      let foundPrecinctsView = false;\n      this.setState({\n        selectedFilters: mapFilters\n      }); // Precondition --> if array is empty, reset district and precinct view\n\n      if (mapFilters == null) {\n        this.setState({\n          districtsView: false\n        });\n        this.setState({\n          districtsContent: null\n        }); // precinct view\n\n        this.setState({\n          precinctsView: false\n        });\n        this.setState({\n          precinctsContent: null\n        });\n        return;\n      }\n\n      for (var i = 0; i < mapFilters.length; i++) {\n        if (mapFilters[i].label == \"Precincts\") {\n          // precinct view\n          this.setState({\n            precinctsView: true\n          });\n          this.setState({\n            precinctsContent: /*#__PURE__*/React.createElement(GeoJSON, {\n              weight: \"1\",\n              color: \"red\",\n              key: \"NewYorkPrecincts\",\n              data: NYPrecincts,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 212,\n                columnNumber: 43\n              }\n            })\n          });\n          foundPrecinctsView = true;\n          this.setState({\n            filterPrecinctsView: true\n          });\n        } else if (mapFilters[i].label == \"Districts\") {\n          // district view\n          console.log(\"DISTRICTS VIEW ON\");\n          this.setState({\n            districtsView: true\n          });\n          this.setState({\n            districtsContent: /*#__PURE__*/React.createElement(GeoJSON, {\n              weight: \"1\",\n              color: \"red\",\n              key: \"NewYorkDistricts\",\n              data: NYDistricts,\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 43\n              }\n            })\n          });\n          foundDistrictsView = true; // MARKED AS FOUND\n\n          this.setState({\n            filterDistrictsView: true\n          });\n        }\n\n        console.log(mapFilters[i].label); // this is how you access the label of the array element at position i \n      } // If filter \"Precincts View\" isn't found, then reset state variables\n\n\n      if (foundPrecinctsView == false) {\n        this.setState({\n          precinctsView: false\n        });\n        this.setState({\n          precinctsContent: null\n        });\n        this.setState({\n          filterPrecinctsView: false\n        });\n      } // If filter \"Districts View\" isn't found, then reset state variables\n\n\n      if (foundDistrictsView == false) {\n        this.setState({\n          districtsView: false\n        });\n        this.setState({\n          districtsContent: null\n        });\n        this.setState({\n          filterDistrictsView: false\n        });\n      }\n    };\n\n    this.changeViewFromZoom = (viewType, actionType) => {\n      // status can be 0 (delete view) or 1 (insert view).\n      // \"Districts\" is currently selected as a map view filter\n      if (viewType == \"Districts\") {\n        if (this.state.filterDistrictsView == true) return; // nothing you can do\n        else if (this.state.filterDistrictsView == false && actionType == 1) {\n            // insert districts into map based on zoom\n            this.setState({\n              districtsView: true\n            });\n            this.setState({\n              districtsContent: /*#__PURE__*/React.createElement(GeoJSON, {\n                weight: \"1\",\n                color: \"red\",\n                key: \"NewYorkDistricts\",\n                data: NYDistricts,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 253,\n                  columnNumber: 43\n                }\n              })\n            });\n          } else if (this.state.filterDistrictsView == false && actionType == 0) {\n            // delete districts from map based on zoom\n            this.setState({\n              districtsView: false\n            });\n            this.setState({\n              districtsContent: null\n            });\n          }\n      } // \"Precincts\" is currently selected as a map view filter\n\n\n      if (viewType == \"Precincts\") {\n        if (this.state.filterPrecinctsView == true) return; // nothing you can do\n        else if (this.state.filterPrecinctsView == false && actionType == 1) {\n            // insert precincts into map based on zoom\n            this.setState({\n              precinctsView: true\n            });\n            this.setState({\n              precinctsContent: /*#__PURE__*/React.createElement(GeoJSON, {\n                weight: \"1\",\n                color: \"red\",\n                key: \"NewYorkPrecincts\",\n                data: NYPrecincts,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 43\n                }\n              })\n            });\n          } else if (this.state.filterPrecinctsView == false && actionType == 0) {\n            // delete precincts from map based on zoom\n            this.setState({\n              precinctsView: false\n            });\n            this.setState({\n              precinctsContent: null\n            });\n          }\n      }\n    };\n\n    this.updateCurrentJob = (job, selected) => {\n      if (selected == true) {\n        // job just got selected\n        this.setState({\n          currentJob: job\n        });\n        this.setState({\n          currentJobName: job.jobName\n        });\n      } else {\n        // job just got de-selected\n        this.setState({\n          currentJob: \"\"\n        });\n        this.setState({\n          currentJobName: \"\"\n        });\n      }\n    };\n\n    this.toggleSelectedCard = () => {\n      if (this.state.selectedJobCheck == false) this.setState({\n        selectedJobCheck: true\n      });else this.setState({\n        selectedJobCheck: false\n      });\n    };\n\n    this.toggleSelectedPlanCheck = () => {\n      if (this.state.selectedPlanCheck == false) this.setState({\n        selectedPlanCheck: true\n      });else this.setState({\n        selectedPlanCheck: false\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(HomeScreen, {\n      jobCards: this.state.jobCards,\n      currentState: this.state.currentState,\n      changeCurrentState: this.changeCurrentState,\n      currentJob: this.state.currentJob,\n      updateCurrentJob: this.updateCurrentJob,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      toggleSelectedPlanCheck: this.toggleSelectedPlanCheck,\n      selectedJobCheck: this.state.selectedJobCheck,\n      toggleSelectedCard: this.toggleSelectedCard,\n      enactedPlan: this.state.enactedPlan,\n      deleteJob: this.deleteJob,\n      deletePlan: this.deletePlan,\n      createJob: this.createJob,\n      cancelJob: this.cancelJob,\n      generateBoxWhiskerValues: this.generateBoxWhiskerValues // Handling use cases for precinct and district views\n      ,\n      changeSelectedFilters: this.changeSelectedFilters,\n      changeViewFromZoom: this.changeViewFromZoom,\n      districtsView: this.state.districtsView,\n      districtsContent: this.state.districtsContent,\n      precinctsView: this.state.precinctsView,\n      precinctsContent: this.state.precinctsContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(DeveloperScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/kadiatoudiallo/Documents/GitHub/CSE-416-Project/client/src/App.js"],"names":["HomeScreen","DeveloperScreen","React","Component","BrowserRouter","Route","Redirect","Switch","endpoint","testJobCards","GeoJSON","NYDistricts","NYPrecincts","App","state","currentState","enactedPlan","jobCards","jobs","currentJob","selectedFilters","precinctsView","districtsView","filterDistrictsView","filterPrecinctsView","stateView","districtsContent","precinctsContent","selectedPlanCheck","selectedJobCheck","changeCurrentState","stateName","setState","stateObject","res","getState","console","log","exception","error","createJob","userInputs","generateJob","cancelJob","job","indexOfJob","indexOf","splice","deleteJob","deletePlan","plan","type","indexOfPlan","districtPlans","generateBoxWhiskerValues","changeSelectedFilters","mapFilters","foundDistrictsView","foundPrecinctsView","i","length","label","changeViewFromZoom","viewType","actionType","updateCurrentJob","selected","currentJobName","jobName","toggleSelectedCard","toggleSelectedPlanCheck","render"],"mappings":"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","sourcesContent":["import HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Developer\"\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport * as endpoint from './endpoint/Client';\nimport testJobCards from './json/TestJobCards.json'\nimport './css/project_styles.css';\n\n// Map GeoJSONS\nimport {GeoJSON} from 'react-leaflet';\n\n  // NEW YORK:\nimport NYDistricts from './json/NEW_YORK/NewYorkDistricts.json';\nimport NYPrecincts from './json/NEW_YORK/NewYorkPrecincts.json';\n\n// App.js is the parent component\nclass App extends Component {\n    state = {\n\n      // State:\n      currentState : \"Select a state\",\n      enactedPlan : testJobCards.enactedPlan, // holds district view\n\n      // Jobs:\n      jobCards : testJobCards.jobs, // holds all the jobs retrieved back from the serverside (UPDATED BY JSON)\n      currentJob : \"\",\n\n      // Map View Filters:\n      selectedFilters : null, // current demographic filters\n      precinctsView : false, // currently showing precincts\n      districtsView : false, // currently showing districts\n      filterDistrictsView : false, // currently showing districts via selected map view filter\n      filterPrecinctsView : false, // currently showing districts via selected map view filter\n      stateView : true, // show stateView\n\n      // Map View Content\n      districtsContent : null,\n      precinctsContent : null,\n\n      // Checks for Selection\n      selectedPlanCheck: false,\n      selectedJobCheck: false\n\n      // Modals\n\n\n      // selectedJobName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n      \n    }\n\n   /**\n   * This function updates which state is selected, and fetches data pertaining to the state from the server.\n   * \n   * @param {String} stateName The state to now be shown to the user\n   * \n   * In addition to changing the state name, the function takes updates \"Your Jobs\", which hold the jobs\n   * belonging to the selected state (updates the array), and updates STATE DETAILS\n   * \n   */\n  changeCurrentState = async (stateName) => {\n\n    this.setState({currentJob : \"\"}) // any current job is no longer selected now\n    this.setState({currentState : stateName});\n    if (stateName == \"Georgia\") stateName = \"GE\"\n    else if (stateName == \"New York\") stateName = \"NY\"\n    else stateName = \"CA\"\n    let stateObject =  {\n      state: stateName\n    }\n    try {\n      let res = await endpoint.getState(stateObject);\n      console.log(res)\n      this.setState({ jobCards : res.jobs}); // update the current jobCards\n      this.setState({ enactedPlan : res.state.enactedPlan}); // update the current enacted plan\n    } catch (exception) {\n      console.error(exception);\n    }\n  }\n\n   /**\n   * This function creates a new job and calls generateJob in the Client.js endpoint\n   * \n   * @param {Array} userInputs Holds the inputs entered by the user to generate a new job\n   * \n   * Inputs: Districts (int), Districting Plans (int), Compactness (String), Population Difference (int (%)), \n   * Minority Focus Group(s) (Array<String>) , Job Name (String)\n   *\n   * the event occurs.\n   */\n  createJob = async (userInputs) => { // userInputs is an OBJECT of the constraints user selected. Let's gather them here. \n    \n      try {\n        let res = await endpoint.generateJob(userInputs); // use of .then here? or keep that in client.js for fetch?\n        console.log(res)\n\n      } catch (exception) {\n        console.error(exception);\n      }\n\n  }\n\n   /**\n   * This function CANCELS a job by sending the job object to the server, receives \"successfully cancelled\" status back.\n   * \n   * @param {String} job Represents the object of the PENDING job to be cancelled.\n   * \n   */\n  cancelJob = (job) => { // string\n    // Remove job from jobCards\n    let indexOfJob = this.state.jobCards.indexOf(job);\n    if (indexOfJob >= 0)\n        this.state.jobCards.splice(indexOfJob, 1);\n    this.setState({ jobCards : this.state.jobCards})\n  }\n   /**\n   * This function DELETES a job by sending the job object to the server, receives \"successfully deleted\" status back.\n   * \n   * @param {String} job Represents the object of the DELETED job to be cancelled.\n   * \n   */\n  deleteJob = (job) => { // string\n    // Remove job from jobCards\n    let indexOfJob = this.state.jobCards.indexOf(job);\n    if (indexOfJob >= 0)\n        this.state.jobCards.splice(indexOfJob, 1);\n    this.setState({ jobCards : this.state.jobCards})\n  }\n\n   /**\n   * This function DELETES a plan from the currently selected job\n   * \n   * @param {String} plan Represents the plan object to be deleted.\n   * \n   * Job can either be none (enacted plan) or currentJob (average, random, extreme)\n   * \n   * NOTE: This isn't a required use case. This won't actually delete a plan, but would get rid \n   * of current view of it. It will re-appear if the webpage is refreshed. \n   * \n   */\n  deletePlan = (plan) => { // string\n\n    // What plan is it?\n    if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\n      let job = this.state.currentJob;\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\n      if (indexOfPlan >= 0)\n        this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\n      this.setState({ jobCards : this.state.jobCards})\n    }\n    // else, we are deleting the enacted plan\n    // this.state.jobCards.enactedPlan.splice(indexOfPlan, 1);\n    \n    this.setState({ jobCards : this.state.jobCards})\n\n  }\n\n   /**\n   * This function \n   * \n   * Sending: {currentJob} which stands for the currently selected job by the user. This is the job the user wants to view\n   * the box and whisker plot for, and would like to compare to enacted plan.\n   * \n   * Note: Through the job object, we are telling the server the focus minority or minorities analyzed, which were \n   * selected when generating the currently selected job. This is to generate their voting age population(s) per indexed \n   * district in the selected district plan\n   * \n   */\n  generateBoxWhiskerValues = () => {\n    console.log(\"sending this:\");\n    console.log(this.state.currentJob)\n    try {\n      // let res = await endpoint.getState(currentJob);\n      // console.log(res)\n    } catch (exception) {\n      console.error(exception);\n    }\n  }\n\n   /**\n   * This function updates the currently selected filters so as to change the view of the demographic heat map\n   * \n   * @param {Array<String>} mapFilters Represents the map filters selected by the user, can be either \n   * cluster or demographic heat map. Multiple filters can be invoked at the same time. \n   * \n   */\n  changeSelectedFilters = (mapFilters) => {\n    // open questions: check if change for demographic heat map or for cluster? Separate functions?\n      // does updates one at a time (but if you have two filters does it over again)\n\n    let foundDistrictsView = false\n    let foundPrecinctsView = false\n\n    this.setState({selectedFilters : mapFilters});\n\n    // Precondition --> if array is empty, reset district and precinct view\n    if (mapFilters == null) {\n      this.setState({districtsView : false})\n      this.setState({districtsContent : null })\n      // precinct view\n      this.setState({precinctsView : false})\n      this.setState({precinctsContent : null })\n      return;\n    }\n\n    for (var i = 0; i < mapFilters.length; i++) {\n      if (mapFilters[i].label == \"Precincts\")  { // precinct view\n        this.setState({precinctsView : true})\n        this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\n        foundPrecinctsView = true;\n        this.setState({ filterPrecinctsView : true })\n      }\n      else if (mapFilters[i].label == \"Districts\") {  // district view\n        console.log(\"DISTRICTS VIEW ON\")\n        this.setState({districtsView : true})\n        this.setState({districtsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkDistricts' data={NYDistricts} /> })\n        foundDistrictsView = true; // MARKED AS FOUND\n        this.setState({filterDistrictsView : true})\n      }\n      console.log(mapFilters[i].label); // this is how you access the label of the array element at position i \n    }\n      // If filter \"Precincts View\" isn't found, then reset state variables\n      if (foundPrecinctsView == false) {\n        this.setState({precinctsView : false})\n        this.setState({precinctsContent : null })\n        this.setState({filterPrecinctsView : false })\n      }\n      // If filter \"Districts View\" isn't found, then reset state variables\n      if (foundDistrictsView == false) {\n        this.setState({districtsView : false})\n        this.setState({districtsContent : null})\n        this.setState({filterDistrictsView : false})\n      }\n  }\n\n  /**\n   * This function is responsible for maintaining the map changes based off the user ZOOMING IN AND OUT\n   * \n   * @param {String} viewType Represents the map filters selected by the user, can be either \n   * @param {Int} actionType Represents the map filters selected by the user, can be either \n   * \n   */\n  changeViewFromZoom = (viewType, actionType) => { // status can be 0 (delete view) or 1 (insert view).\n\n    // \"Districts\" is currently selected as a map view filter\n    if (viewType == \"Districts\") {\n      if (this.state.filterDistrictsView == true) return; // nothing you can do\n      else if (this.state.filterDistrictsView == false && actionType == 1) { // insert districts into map based on zoom\n        this.setState({districtsView : true})\n        this.setState({districtsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkDistricts' data={NYDistricts} /> })\n      }\n      else if (this.state.filterDistrictsView == false && actionType == 0) { // delete districts from map based on zoom\n        this.setState({districtsView : false})\n        this.setState({districtsContent : null })\n      }\n    }\n\n    // \"Precincts\" is currently selected as a map view filter\n    if (viewType == \"Precincts\") {\n      if (this.state.filterPrecinctsView == true) return; // nothing you can do\n      else if (this.state.filterPrecinctsView == false && actionType == 1) { // insert precincts into map based on zoom\n        this.setState({precinctsView : true})\n        this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\n      }\n      else if (this.state.filterPrecinctsView == false && actionType == 0) { // delete precincts from map based on zoom\n        this.setState({precinctsView : false})\n        this.setState({precinctsContent : null })\n      }\n    }\n  }\n\n   /**\n   * This function updates the currentJob state variable to the user-selected job \n   * \n   * @param {JobCard} Job Represents the object of the SELECTED job by the user.\n   * \n   */\n  updateCurrentJob = (job, selected) => {\n    if (selected == true) { // job just got selected\n      this.setState({currentJob : job});\n      this.setState({currentJobName : job.jobName});\n    }\n    else { // job just got de-selected\n      this.setState({currentJob : \"\"});\n      this.setState({currentJobName : \"\"});\n    }\n  }\n\n\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n  \n  toggleSelectedCard = () => {\n    if (this.state.selectedJobCheck == false) this.setState({selectedJobCheck : true});\n    else this.setState({selectedJobCheck : false});\n}\n\n  toggleSelectedPlanCheck = () => {\n    if (this.state.selectedPlanCheck == false) this.setState({selectedPlanCheck: true});\n    else this.setState({selectedPlanCheck : false});\n}\n\n  render() {\n  return (\n    <div >\n\n            <HomeScreen \n            jobCards={this.state.jobCards} currentState={this.state.currentState} changeCurrentState={this.changeCurrentState} \n            currentJob ={this.state.currentJob} updateCurrentJob={this.updateCurrentJob} selectedPlanCheck={this.state.selectedPlanCheck} \n            toggleSelectedPlanCheck={this.toggleSelectedPlanCheck} selectedJobCheck={this.state.selectedJobCheck} toggleSelectedCard={this.toggleSelectedCard}\n            enactedPlan = {this.state.enactedPlan} deleteJob={this.deleteJob} deletePlan={this.deletePlan} createJob={this.createJob} cancelJob={this.cancelJob}\n            generateBoxWhiskerValues={this.generateBoxWhiskerValues} \n\n            // Handling use cases for precinct and district views\n            changeSelectedFilters={this.changeSelectedFilters} changeViewFromZoom={this.changeViewFromZoom}\n            districtsView = {this.state.districtsView} districtsContent = {this.state.districtsContent}\n            precinctsView = {this.state.precinctsView} precinctsContent = {this.state.precinctsContent}\n\n\n            />\n\n            <DeveloperScreen/>            \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}