{"ast":null,"code":"var _jsxFileName = \"/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/components/homePage/Main Panel/JobCards/JobCard.js\";\nimport React, { Component } from 'react';\nimport ModalJob from './ModalJob';\nimport DeleteModal from './DeleteModal';\n\nclass JobCard extends Component {\n  constructor() {\n    super();\n\n    this.toggleSelection = e => {\n      // do something with Job\n      if (this.props.status == \"Pending\") return;\n\n      if (this.state.showViewModal == true && this.props.selectedJobCheck == false) {\n        this.setState({\n          showViewModal: false\n        });\n        this.goTop = \"\";\n      }\n\n      if (this.state.selected == false && this.props.selectedJobCheck == false) {\n        // Select\n        this.setState({\n          selected: true\n        });\n        this.props.toggleSelectedCard();\n        this.props.updateCurrentJob(this.props.jobCard, true);\n        this.goTop = \"goTopJob \";\n      } else if (this.state.selected == false && this.props.selectedJobCheck == true) {\n        // Cant Select\n        this.setState({\n          selected: false\n        });\n        this.goTop = \"\";\n      } else if (this.state.selected == true && this.props.selectedJobCheck == true) {\n        // Deselect\n        this.setState({\n          selected: false\n        });\n        this.props.toggleSelectedCard();\n        this.props.updateCurrentJob(null, false);\n        this.goTop = \"\";\n      } else {// is currently selected, but not selected card. do nothing. (impossible scenario)\n      } // and check if you did this through modal\n\n    };\n\n    this.toggleViewModal = e => {\n      e.stopPropagation();\n      if (this.state.showViewModal == true) this.setState({\n        showViewModal: false\n      });else this.setState({\n        showViewModal: true\n      });\n    };\n\n    this.toggleDeleteModal = e => {\n      e.stopPropagation();\n      if (this.state.showDeleteModal == false) this.setState({\n        showDeleteModal: true\n      });else this.setState({\n        showDeleteModal: false\n      });\n    };\n\n    this.handleDeleteJob = job => {\n      this.toggleDeleteModal();\n      this.props.deleteJob(job);\n    };\n\n    this.state = {\n      // Attributes of job card\n      selected: false,\n      name: \"\",\n      // originally empty, gets filled when we render\n      id: \"2\",\n      summary: \"\",\n      // this would be the analysis summary, display in modal\n      // Toggle Modals\n      showViewModal: false,\n      showDeleteModal: false,\n      // Helper Variables\n      enactedFirst: false // true = showed upon startup, false = never showed. We want enacted to be in affect in start\n\n    }; // Class Name (Designs, vary based on selection)\n\n    this.JobCardClassStyle = \"\";\n    this.goTop = \"\";\n    this.statusColor = \"\";\n  }\n\n  render() {\n    if (this.state.enactedFirst == false && this.props.selectedJobCheck == false) {\n      if (this.props.jobCard.jobID == 1) {\n        this.toggleSelection();\n        this.setState({\n          enactedFirst: true\n        });\n      }\n    } // Whenever we do setState, it rerenders\n\n\n    if (this.state.selected == true) {\n      this.JobCardClassStyle = \"jobCard badge badge-pill badge-dark \";\n    } else {\n      this.JobCardClassStyle = \"jobCard badge badge-pill badge-light \";\n    } // here I would say, let's check if status is ready\n\n\n    if (this.props.status == \"Completed\") this.statusColor = \" jobSuccess \";else if (this.props.status == \"Pending\") this.statusColor = \" jobPending \"; // --------------------------------------------------------\n    // LETS SET THE NAME / COMPACTNESS / NUMBER PLANS\n    // Check Job name, if it's empty the id is the name\n    // --------------------------------------------------------\n    // if (this.props.jobName == \"\") this.setState({name : \"Job \" + this.jobCard.id}); // default name (id)\n    // else if (this.props.jobName != this.state.name) this.setState({name : this.props.jobName}); // user-custom name\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: this.JobCardClassStyle + this.goTop + this.statusColor,\n      onClick: this.toggleSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"jobcardContents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"jobcardDelete badge badge-pill badge-danger\",\n      onClick: this.toggleDeleteModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"deleteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 124\n      }\n    }, \" X \"), \" \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"jobcardTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 25\n      }\n    }, \" \", this.props.jobName, \" \"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"jobcardView badge badge-pill badge-dark\",\n      onClick: this.toggleViewModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 117\n      }\n    }, \" View \"), \" \")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(DeleteModal, {\n      showDeleteModal: this.state.showDeleteModal,\n      handleDeleteJob: this.handleDeleteJob,\n      toggleDeleteModal: this.toggleDeleteModal,\n      jobName: this.props.jobName,\n      jobCard: this.props.jobCard,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ModalJob, {\n      populationLimit: this.props.populationLimit,\n      minorityAnalyzed: this.props.minorityAnalyzed,\n      compactness: this.props.compactness,\n      numberPlans: this.props.numberPlans,\n      status: this.props.status,\n      currentSelected: this.state.selected,\n      selectedJobCheck: this.props.selectedJobCheck,\n      toggleSelection: this.toggleSelection,\n      jobName: this.props.jobName,\n      toggleViewModal: this.toggleViewModal,\n      showViewModal: this.state.showViewModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default JobCard;","map":{"version":3,"sources":["/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/components/homePage/Main Panel/JobCards/JobCard.js"],"names":["React","Component","ModalJob","DeleteModal","JobCard","constructor","toggleSelection","e","props","status","state","showViewModal","selectedJobCheck","setState","goTop","selected","toggleSelectedCard","updateCurrentJob","jobCard","toggleViewModal","stopPropagation","toggleDeleteModal","showDeleteModal","handleDeleteJob","job","deleteJob","name","id","summary","enactedFirst","JobCardClassStyle","statusColor","render","jobID","jobName","populationLimit","minorityAnalyzed","compactness","numberPlans"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ModalJob from './ModalJob'\nimport DeleteModal from './DeleteModal'\n\nclass JobCard extends Component {\n    constructor () {\n        super();\n        this.state = {\n\n            // Attributes of job card\n            selected : false,\n            name : \"\", // originally empty, gets filled when we render\n            id : \"2\",\n            summary : \"\", // this would be the analysis summary, display in modal\n\n            // Toggle Modals\n            showViewModal : false,\n            showDeleteModal : false,\n\n            // Helper Variables\n            enactedFirst : false, // true = showed upon startup, false = never showed. We want enacted to be in affect in start\n\n        }\n\n        // Class Name (Designs, vary based on selection)\n        this.JobCardClassStyle = \"\";\n        this.goTop = \"\";\n        this.statusColor = \"\";\n    }\n\n    toggleSelection = (e) => {\n        // do something with Job\n\n        if (this.props.status == \"Pending\") return;\n\n        if (this.state.showViewModal == true && this.props.selectedJobCheck== false) {\n            this.setState({showViewModal : false});\n            this.goTop=\"\";\n        }\n\n        if (this.state.selected == false && this.props.selectedJobCheck== false) {\n            // Select\n            this.setState({selected: true});\n            this.props.toggleSelectedCard();\n            this.props.updateCurrentJob(this.props.jobCard, true);\n            this.goTop=\"goTopJob \";\n        }\n        else if (this.state.selected == false && this.props.selectedJobCheck == true) {\n            // Cant Select\n            this.setState({selected : false});\n            this.goTop=\"\";\n        }\n        else if (this.state.selected == true && this.props.selectedJobCheck == true) {\n            // Deselect\n            this.setState({selected: false});\n            this.props.toggleSelectedCard();\n            this.props.updateCurrentJob(null, false);\n            this.goTop=\"\";\n        }\n        else {\n            // is currently selected, but not selected card. do nothing. (impossible scenario)\n        }\n\n        // and check if you did this through modal\n    }\n\n    toggleViewModal = (e) => {\n        e.stopPropagation();\n        if (this.state.showViewModal == true) this.setState({showViewModal : false});\n        else this.setState({showViewModal : true});\n    }\n\n    toggleDeleteModal = (e) => {\n        e.stopPropagation();\n        if (this.state.showDeleteModal == false) this.setState({showDeleteModal : true});\n        else this.setState({showDeleteModal : false});\n    }\n\n    handleDeleteJob = (job) => {\n        this.toggleDeleteModal();\n        this.props.deleteJob(job);\n    }\n\n    render() {\n\n        if (this.state.enactedFirst == false && this.props.selectedJobCheck == false) {\n            if (this.props.jobCard.jobID == 1) {\n                this.toggleSelection();\n                this.setState({enactedFirst : true});\n            }\n        }\n\n        // Whenever we do setState, it rerenders\n        if (this.state.selected == true) {\n            this.JobCardClassStyle = \"jobCard badge badge-pill badge-dark \";\n        }\n        else {\n            this.JobCardClassStyle = \"jobCard badge badge-pill badge-light \";\n        }\n\n        // here I would say, let's check if status is ready\n        if (this.props.status == \"Completed\" ) this.statusColor = \" jobSuccess \";\n        else if (this.props.status == \"Pending\") this.statusColor = \" jobPending \";\n\n        // --------------------------------------------------------\n              // LETS SET THE NAME / COMPACTNESS / NUMBER PLANS\n            // Check Job name, if it's empty the id is the name\n        // --------------------------------------------------------\n\n        // if (this.props.jobName == \"\") this.setState({name : \"Job \" + this.jobCard.id}); // default name (id)\n        // else if (this.props.jobName != this.state.name) this.setState({name : this.props.jobName}); // user-custom name\n\n        return (\n            <div> \n                <div className={this.JobCardClassStyle + this.goTop + this.statusColor} onClick={this.toggleSelection}>\n                    <div className=\"jobcardContents\">\n                        <button className=\"jobcardDelete badge badge-pill badge-danger\" onClick={this.toggleDeleteModal} > <div className=\"deleteText\"> X </div> </button>\n                        <span className=\"jobcardTitle\"> {this.props.jobName} </span> \n                        <button className=\"jobcardView badge badge-pill badge-dark\" onClick={this.toggleViewModal}> <div className=\"viewText\" > View </div> </button>\n                    </div> \n                    <br /> \n                    <br />\n                </div>\n                <DeleteModal showDeleteModal={this.state.showDeleteModal} handleDeleteJob={this.handleDeleteJob} \n                toggleDeleteModal={this.toggleDeleteModal} jobName={this.props.jobName} jobCard={this.props.jobCard} />\n                <ModalJob populationLimit={this.props.populationLimit} minorityAnalyzed={this.props.minorityAnalyzed} compactness={this.props.compactness} \n                numberPlans={this.props.numberPlans} status={this.props.status} currentSelected={this.state.selected} selectedJobCheck={this.props.selectedJobCheck} \n                toggleSelection={this.toggleSelection} jobName={this.props.jobName} toggleViewModal={this.toggleViewModal} showViewModal={this.state.showViewModal}\n                />\n            </div>\n        );\n    }\n}\n\nexport default JobCard;"]},"metadata":{},"sourceType":"module"}