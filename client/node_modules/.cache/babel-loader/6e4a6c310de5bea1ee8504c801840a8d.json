{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mdari\\\\Desktop\\\\416 Project\\\\CSE-416-Project\\\\client\\\\src\\\\App.js\";\nimport HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Developer\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport * as endpoint from './endpoint/Client';\nimport testJobCards from './json/TestJobCards.json';\nimport './css/project_styles.css';\nimport { GeoJSON } from 'react-leaflet';\nimport NYDistricts from './json/NEW_YORK/NewYorkDistricts.json';\nimport NYPrecincts from './json/NEW_YORK/NewYorkPrecincts.json';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // State:\n      currentState: \"Select a state\",\n      enactedPlan: testJobCards.enactedPlan,\n      totalPopulation: 0,\n      numOfPrecincts: 0,\n      numOfCounties: 0,\n      // Jobs:\n      jobCards: testJobCards.jobs,\n      currentJob: \"\",\n      // Map View Filters:\n      selectedFilters: null,\n      // current demographic filters\n      precinctsView: false,\n      // currently showing precincts\n      districtsView: false,\n      // currently showing districts\n      filterDistrictsView: false,\n      // currently showing districts via selected map view filter\n      filterPrecinctsView: false,\n      // currently showing districts via selected map view filter\n      stateView: true,\n      // show stateView\n      // Map View Content\n      districtsContent: null,\n      precinctsContent: null,\n      // Checks for Selection\n      selectedPlanCheck: false,\n      selectedJobCheck: false\n    };\n\n    this.changeCurrentState = async stateName => {\n      this.setState({\n        currentJob: \"\"\n      }); // any current job is no longer selected now\n\n      this.setState({\n        currentState: stateName\n      });\n      if (stateName == \"Georgia\") stateName = \"GA\";else if (stateName == \"New York\") stateName = \"NY\";else stateName = \"CA\";\n      let stateObject = {\n        state: stateName\n      };\n\n      try {\n        let res = await endpoint.getState(stateObject);\n        console.log(res);\n        this.setState({\n          jobCards: res.jobs\n        });\n        this.setState({\n          enactedPlan: res.state.enactedPlan\n        });\n        this.setState({\n          totalPopulation: res.state.totalPopulation\n        });\n        this.setState({\n          numOfPrecincts: res.state.numOfPrecincts\n        });\n        this.setState({\n          numOfCounties: res.state.numOfCounties\n        });\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.createJob = async userInputs => {\n      try {\n        let res = await endpoint.generateJob(userInputs); // bug right here\n\n        console.log(res);\n        let labelsMinorities = [];\n        res.minorityAnalyzed.forEach(element => {\n          // values --> keys\n          switch (element) {\n            case \"WHITE_AMERICAN\":\n              labelsMinorities.push(\"White\");\n              break;\n\n            case \"AFRICAN_AMERICAN\":\n              labelsMinorities.push(\"African American\");\n              break;\n\n            case \"LATINO_AMERICAN\":\n              labelsMinorities.push(\"Latino\");\n              break;\n\n            case \"ASIAN_AMERICAN\":\n              labelsMinorities.push(\"Asian\");\n              break;\n\n            case \"AMERICAN_INDIAN\":\n              labelsMinorities.push(\"American Indian\");\n              break;\n\n            case \"HAWAIIAN_AMERICAN\":\n              labelsMinorities.push(\"Hawaiian\");\n              break;\n\n            case \"OTHER_AMERICAN\":\n              labelsMinorities.push(\"Other\");\n              break;\n          }\n        });\n        res.minorityAnalyzed = labelsMinorities;\n        this.state.jobCards.push(res);\n        this.setState({\n          jobCards: this.state.jobCards\n        });\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.cancelJob = job => {\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      if (indexOfJob >= 0) this.state.jobCards.splice(indexOfJob, 1);\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.deleteJob = job => {\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      if (indexOfJob >= 0) this.state.jobCards.splice(indexOfJob, 1);\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.getPrecincts = async () => {\n      try {\n        let res = await endpoint.getStatePrecincts();\n        this.setState({\n          precinctsContent: /*#__PURE__*/React.createElement(GeoJSON, {\n            weight: \"1\",\n            color: \"red\",\n            key: \"precincts\",\n            data: res.precinctsGeoJson,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 41\n            }\n          })\n        });\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.deletePlan = plan => {\n      if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\n        let job = this.state.currentJob;\n        let indexOfJob = this.state.jobCards.indexOf(job);\n        let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\n        if (indexOfPlan >= 0) this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\n        this.setState({\n          jobCards: this.state.jobCards\n        });\n      }\n\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.generateBoxWhiskerValues = () => {\n      console.log(this.state.currentJob);\n\n      try {// let res = await endpoint.generateBoxWhisker(currentJob);\n        // console.log(res)\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.changeSelectedFilters = mapFilters => {\n      let foundDistrictsView = false;\n      let foundPrecinctsView = false;\n      this.setState({\n        selectedFilters: mapFilters\n      });\n\n      if (mapFilters == null) {\n        // reset\n        this.setState({\n          districtsView: false\n        });\n        this.setState({\n          precinctsView: false\n        });\n        this.setState({\n          filterDistrictsView: false\n        });\n        this.setState({\n          filterPrecinctsView: false\n        });\n        this.setState({\n          precinctsContent: null\n        });\n        return;\n      }\n\n      for (var i = 0; i < mapFilters.length; i++) {\n        if (mapFilters[i].label == \"Precincts\") {\n          // precinct view\n          this.setState({\n            precinctsView: true\n          });\n          this.getPrecincts(); // this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\n\n          foundPrecinctsView = true;\n          this.setState({\n            filterPrecinctsView: true\n          });\n        } else if (mapFilters[i].label == \"Districts\") {\n          // district view\n          console.log(\"DISTRICTS VIEW ON\");\n          this.setState({\n            districtsView: true\n          });\n          foundDistrictsView = true;\n          this.setState({\n            filterDistrictsView: true\n          });\n        }\n      }\n\n      if (foundPrecinctsView == false) {\n        // if not selected\n        this.setState({\n          precinctsView: false\n        });\n        this.setState({\n          precinctsContent: null\n        });\n        this.setState({\n          filterPrecinctsView: false\n        });\n      }\n\n      if (foundDistrictsView == false) {\n        this.setState({\n          districtsView: false\n        });\n        this.setState({\n          filterDistrictsView: false\n        });\n      }\n    };\n\n    this.changeViewFromZoom = (viewType, actionType) => {\n      // actionType = 0 (delete view) or 1 (insert view)\n      if (viewType == \"Districts\") {\n        if (this.state.filterDistrictsView == true) return;else if (this.state.filterDistrictsView == false && actionType == 1) {\n          this.setState({\n            districtsView: true\n          });\n        } else if (this.state.filterDistrictsView == false && actionType == 0) this.setState({\n          districtsView: false\n        });\n      }\n\n      if (viewType == \"Precincts\") {\n        if (this.state.filterPrecinctsView == true) return;else if (this.state.filterPrecinctsView == false && actionType == 1) {\n          this.setState({\n            precinctsView: true\n          });\n          this.getPrecincts(); // this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\n        } else if (this.state.filterPrecinctsView == false && actionType == 0) {\n          this.setState({\n            precinctsView: false\n          });\n          this.setState({\n            precinctsContent: null\n          });\n        }\n      }\n    };\n\n    this.updateCurrentJob = (job, selected) => {\n      if (selected == true) {\n        // job just selected\n        this.setState({\n          currentJob: job\n        });\n        this.setState({\n          currentJobName: job.jobName\n        });\n      } else {\n        // job just de-selected\n        this.setState({\n          currentJob: \"\"\n        });\n        this.setState({\n          currentJobName: \"\"\n        });\n      }\n    };\n\n    this.toggleSelectedCard = () => {\n      if (this.state.selectedJobCheck == false) this.setState({\n        selectedJobCheck: true\n      });else this.setState({\n        selectedJobCheck: false\n      });\n    };\n\n    this.toggleSelectedPlanCheck = districtPlan => {\n      if (this.state.selectedPlanCheck == false) {\n        this.setState({\n          selectedPlanCheck: true\n        });\n        this.setState({\n          districtsContent: /*#__PURE__*/React.createElement(GeoJSON, {\n            weight: \"1\",\n            color: \"red\",\n            key: \"NewYorkDistricts\",\n            data: districtPlan.districtsGeoJson,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 41\n            }\n          })\n        });\n      } else {\n        this.setState({\n          selectedPlanCheck: false\n        });\n        this.setState({\n          districtsContent: null\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(HomeScreen // State-related data\n    , {\n      currentState: this.state.currentState,\n      jobCards: this.state.jobCards,\n      numOfPrecincts: this.state.numOfPrecincts,\n      numOfCounties: this.state.numOfCounties,\n      totalPopulation: this.state.totalPopulation,\n      enactedPlan: this.state.enactedPlan,\n      currentJob: this.state.currentJob,\n      changeCurrentState: this.changeCurrentState // Job-related methods\n      ,\n      updateCurrentJob: this.updateCurrentJob,\n      deleteJob: this.deleteJob,\n      toggleSelectedCard: this.toggleSelectedCard,\n      createJob: this.createJob,\n      cancelJob: this.cancelJob,\n      selectedJobCheck: this.state.selectedJobCheck,\n      generateBoxWhiskerValues: this.generateBoxWhiskerValues // Plan-related methods\n      ,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      deletePlan: this.deletePlan // Handling use cases for precinct and district views\n      ,\n      changeSelectedFilters: this.changeSelectedFilters,\n      changeViewFromZoom: this.changeViewFromZoom,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      toggleSelectedPlanCheck: this.toggleSelectedPlanCheck,\n      districtsView: this.state.districtsView,\n      districtsContent: this.state.districtsContent,\n      precinctsView: this.state.precinctsView,\n      precinctsContent: this.state.precinctsContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(DeveloperScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/mdari/Desktop/416 Project/CSE-416-Project/client/src/App.js"],"names":["HomeScreen","DeveloperScreen","React","Component","BrowserRouter","Route","Redirect","Switch","endpoint","testJobCards","GeoJSON","NYDistricts","NYPrecincts","App","state","currentState","enactedPlan","totalPopulation","numOfPrecincts","numOfCounties","jobCards","jobs","currentJob","selectedFilters","precinctsView","districtsView","filterDistrictsView","filterPrecinctsView","stateView","districtsContent","precinctsContent","selectedPlanCheck","selectedJobCheck","changeCurrentState","stateName","setState","stateObject","res","getState","console","log","exception","error","createJob","userInputs","generateJob","labelsMinorities","minorityAnalyzed","forEach","element","push","cancelJob","job","indexOfJob","indexOf","splice","deleteJob","getPrecincts","getStatePrecincts","precinctsGeoJson","deletePlan","plan","type","indexOfPlan","districtPlans","generateBoxWhiskerValues","changeSelectedFilters","mapFilters","foundDistrictsView","foundPrecinctsView","i","length","label","changeViewFromZoom","viewType","actionType","updateCurrentJob","selected","currentJobName","jobName","toggleSelectedCard","toggleSelectedPlanCheck","districtPlan","districtsGeoJson","render"],"mappings":"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","sourcesContent":["import HomeScreen from \"./components/homePage/HomeScreen\";\r\nimport DeveloperScreen from \"./components/developerscreen/Developer\"\r\nimport React, { Component } from \"react\";\r\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\r\nimport Switch from \"react-bootstrap/esm/Switch\";\r\nimport * as endpoint from './endpoint/Client';\r\nimport testJobCards from './json/TestJobCards.json'\r\nimport './css/project_styles.css';\r\n\r\nimport {GeoJSON} from 'react-leaflet';\r\nimport NYDistricts from './json/NEW_YORK/NewYorkDistricts.json';\r\nimport NYPrecincts from './json/NEW_YORK/NewYorkPrecincts.json';\r\n\r\nclass App extends Component {\r\n    state = {\r\n\r\n      // State:\r\n      currentState : \"Select a state\",\r\n      enactedPlan : testJobCards.enactedPlan, \r\n      totalPopulation : 0,\r\n      numOfPrecincts : 0,\r\n      numOfCounties : 0,\r\n\r\n      // Jobs:\r\n      jobCards : testJobCards.jobs,\r\n      currentJob : \"\",\r\n\r\n      // Map View Filters:\r\n      selectedFilters : null, // current demographic filters\r\n      precinctsView : false, // currently showing precincts\r\n      districtsView : false, // currently showing districts\r\n      filterDistrictsView : false, // currently showing districts via selected map view filter\r\n      filterPrecinctsView : false, // currently showing districts via selected map view filter\r\n      stateView : true, // show stateView\r\n\r\n      // Map View Content\r\n      districtsContent : null,\r\n      precinctsContent : null,\r\n\r\n      // Checks for Selection\r\n      selectedPlanCheck: false,\r\n      selectedJobCheck: false\r\n\r\n    }\r\n\r\n  changeCurrentState = async (stateName) => {\r\n\r\n    this.setState({currentJob : \"\"}) // any current job is no longer selected now\r\n    this.setState({currentState : stateName});\r\n    if (stateName == \"Georgia\") stateName = \"GA\"\r\n    else if (stateName == \"New York\") stateName = \"NY\"\r\n    else stateName = \"CA\"\r\n    let stateObject =  {\r\n      state: stateName\r\n    }\r\n    try {\r\n      let res = await endpoint.getState(stateObject);\r\n      console.log(res)\r\n      this.setState({ jobCards : res.jobs}); \r\n      this.setState({ enactedPlan : res.state.enactedPlan}); \r\n      this.setState({ totalPopulation : res.state.totalPopulation});\r\n      this.setState({ numOfPrecincts : res.state.numOfPrecincts});\r\n      this.setState({ numOfCounties : res.state.numOfCounties}); \r\n    } catch (exception) {\r\n      console.error(exception);\r\n    }\r\n  }\r\n\r\n  createJob = async (userInputs) => {\r\n\r\n      try {\r\n        let res = await endpoint.generateJob(userInputs); // bug right here\r\n        console.log(res)\r\n        let labelsMinorities = [];\r\n        res.minorityAnalyzed.forEach(element => { // values --> keys\r\n            switch (element) {\r\n              case \"WHITE_AMERICAN\": \r\n                labelsMinorities.push(\"White\");\r\n                break;\r\n              case \"AFRICAN_AMERICAN\": \r\n                labelsMinorities.push(\"African American\");\r\n                break;\r\n              case \"LATINO_AMERICAN\": \r\n                labelsMinorities.push(\"Latino\");\r\n                break;\r\n              case \"ASIAN_AMERICAN\": \r\n                labelsMinorities.push(\"Asian\");\r\n                break;\r\n              case \"AMERICAN_INDIAN\": \r\n                labelsMinorities.push(\"American Indian\");\r\n                break;\r\n              case \"HAWAIIAN_AMERICAN\": \r\n                labelsMinorities.push(\"Hawaiian\");\r\n                break;\r\n              case \"OTHER_AMERICAN\": \r\n                labelsMinorities.push(\"Other\");\r\n                break;\r\n            }\r\n        })\r\n        res.minorityAnalyzed = labelsMinorities\r\n        this.state.jobCards.push(res);\r\n        this.setState({jobCards : this.state.jobCards})\r\n      } catch (exception) {\r\n        console.error(exception);\r\n      }\r\n  }\r\n\r\n  cancelJob = (job) => { \r\n    let indexOfJob = this.state.jobCards.indexOf(job);\r\n    if (indexOfJob >= 0)\r\n        this.state.jobCards.splice(indexOfJob, 1);\r\n    this.setState({ jobCards : this.state.jobCards})\r\n  }\r\n\r\n  deleteJob = (job) => { \r\n    let indexOfJob = this.state.jobCards.indexOf(job);\r\n    if (indexOfJob >= 0)\r\n        this.state.jobCards.splice(indexOfJob, 1);\r\n    this.setState({ jobCards : this.state.jobCards})\r\n  }\r\n  \r\n  getPrecincts = async () => {\r\n    try {\r\n      let res = await endpoint.getStatePrecincts();\r\n      this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='precincts' data={res.precinctsGeoJson} />});\r\n    } catch (exception) {\r\n      console.error(exception);\r\n    }\r\n  }\r\n\r\n  deletePlan = (plan) => {\r\n\r\n    if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\r\n      let job = this.state.currentJob;\r\n      let indexOfJob = this.state.jobCards.indexOf(job);\r\n      let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\r\n      if (indexOfPlan >= 0)\r\n        this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\r\n      this.setState({ jobCards : this.state.jobCards})\r\n    }\r\n    this.setState({ jobCards : this.state.jobCards })\r\n  }\r\n\r\n  generateBoxWhiskerValues = () => {\r\n    console.log(this.state.currentJob)\r\n    try {\r\n      // let res = await endpoint.generateBoxWhisker(currentJob);\r\n      // console.log(res)\r\n    } catch (exception) {\r\n      console.error(exception);\r\n    }\r\n  }\r\n\r\n  changeSelectedFilters = (mapFilters) => {\r\n\r\n    let foundDistrictsView = false\r\n    let foundPrecinctsView = false\r\n\r\n    this.setState({selectedFilters : mapFilters});\r\n\r\n    if (mapFilters == null) { // reset\r\n      this.setState({districtsView : false}) \r\n      this.setState({precinctsView : false})\r\n      this.setState({filterDistrictsView : false})\r\n      this.setState({filterPrecinctsView : false })\r\n      this.setState({precinctsContent : null })\r\n      return;\r\n    }\r\n\r\n    for (var i = 0; i < mapFilters.length; i++) {\r\n      if (mapFilters[i].label == \"Precincts\")  { // precinct view\r\n        this.setState({precinctsView : true})\r\n        this.getPrecincts();\r\n        // this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\r\n        foundPrecinctsView = true;\r\n        this.setState({ filterPrecinctsView : true })\r\n      }\r\n      else if (mapFilters[i].label == \"Districts\") {  // district view\r\n        console.log(\"DISTRICTS VIEW ON\")\r\n        this.setState({districtsView : true})\r\n        foundDistrictsView = true;\r\n        this.setState({filterDistrictsView : true})\r\n      }\r\n    }\r\n      if (foundPrecinctsView == false) { // if not selected\r\n        this.setState({precinctsView : false})\r\n        this.setState({precinctsContent : null })\r\n        this.setState({filterPrecinctsView : false })\r\n      }\r\n      if (foundDistrictsView == false) {\r\n        this.setState({districtsView : false})\r\n        this.setState({filterDistrictsView : false})\r\n      }\r\n  }\r\n\r\n  changeViewFromZoom = (viewType, actionType) => { // actionType = 0 (delete view) or 1 (insert view)\r\n\r\n    if (viewType == \"Districts\") {\r\n      if (this.state.filterDistrictsView == true) return; \r\n      else if (this.state.filterDistrictsView == false && actionType == 1) {\r\n        this.setState({districtsView : true})\r\n      }\r\n      else if (this.state.filterDistrictsView == false && actionType == 0) this.setState({districtsView : false})\r\n    }\r\n\r\n    if (viewType == \"Precincts\") {\r\n      if (this.state.filterPrecinctsView == true) return; \r\n      else if (this.state.filterPrecinctsView == false && actionType == 1) { \r\n        this.setState({precinctsView : true})\r\n        this.getPrecincts();\r\n        // this.setState({precinctsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkPrecincts' data={NYPrecincts} /> })\r\n      }\r\n      else if (this.state.filterPrecinctsView == false && actionType == 0) { \r\n        this.setState({precinctsView : false})\r\n        this.setState({precinctsContent : null })\r\n      }\r\n    }\r\n  }\r\n\r\n  updateCurrentJob = (job, selected) => {\r\n    if (selected == true) { // job just selected\r\n      this.setState({currentJob : job});\r\n      this.setState({currentJobName : job.jobName});\r\n    }\r\n    else { // job just de-selected\r\n      this.setState({currentJob : \"\"});\r\n      this.setState({currentJobName : \"\"});\r\n    }\r\n  }\r\n\r\n  toggleSelectedCard = () => {\r\n    if (this.state.selectedJobCheck == false) this.setState({selectedJobCheck : true});\r\n    else this.setState({selectedJobCheck : false});\r\n  }\r\n\r\n  toggleSelectedPlanCheck = (districtPlan) => {\r\n    if (this.state.selectedPlanCheck == false) {\r\n      this.setState({selectedPlanCheck: true});\r\n      this.setState({districtsContent : <GeoJSON weight=\"1\" color=\"red\" key='NewYorkDistricts' data={districtPlan.districtsGeoJson} /> })\r\n    }\r\n    else {\r\n      this.setState({selectedPlanCheck : false});\r\n      this.setState({districtsContent : null});\r\n    }\r\n  }\r\n\r\n  render() {\r\n  return (\r\n    <div >\r\n            <HomeScreen \r\n\r\n            // State-related data\r\n            currentState={this.state.currentState} jobCards={this.state.jobCards}\r\n            numOfPrecincts={this.state.numOfPrecincts} numOfCounties={this.state.numOfCounties}\r\n            totalPopulation={this.state.totalPopulation} enactedPlan = {this.state.enactedPlan}\r\n            currentJob ={this.state.currentJob} changeCurrentState={this.changeCurrentState} \r\n\r\n            // Job-related methods\r\n            updateCurrentJob={this.updateCurrentJob} deleteJob={this.deleteJob} toggleSelectedCard={this.toggleSelectedCard}\r\n            createJob={this.createJob} cancelJob={this.cancelJob} selectedJobCheck={this.state.selectedJobCheck}\r\n            generateBoxWhiskerValues={this.generateBoxWhiskerValues} \r\n\r\n            // Plan-related methods\r\n            selectedPlanCheck={this.state.selectedPlanCheck} deletePlan={this.deletePlan}\r\n\r\n            // Handling use cases for precinct and district views\r\n            changeSelectedFilters={this.changeSelectedFilters} changeViewFromZoom={this.changeViewFromZoom}\r\n            selectedPlanCheck={this.state.selectedPlanCheck} toggleSelectedPlanCheck={this.toggleSelectedPlanCheck}\r\n            districtsView = {this.state.districtsView} districtsContent = {this.state.districtsContent}\r\n            precinctsView = {this.state.precinctsView} precinctsContent = {this.state.precinctsContent}\r\n\r\n            />\r\n\r\n            <DeveloperScreen/>            \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}