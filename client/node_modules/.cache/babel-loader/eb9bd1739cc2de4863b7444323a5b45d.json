{"ast":null,"code":"var _jsxFileName = \"/Users/kadiatoudiallo/Documents/GitHub/CSE-416-Project/client/src/components/homePage/Main Panel/JobCards/ViewJobModal.js\";\nimport React, { Component } from 'react';\nimport { Modal, Button, Accordion, Card } from 'react-bootstrap'; // Triggered when clicking \"View\" on a Job\n\nclass ViewJobModal extends Component {\n  constructor() {\n    super();\n    this.state = {}; // To edit class name of modal display\n\n    this.selectStatus = \"Select\";\n    this.selectButtonColor = \"primary\";\n    this.disabledStatus = \"\";\n    this.readyColorStatus = \"\";\n  }\n\n  render() {\n    if ((this.props.selectedJobCheck == true && this.props.currentSelected == false) | this.props.status == \"Pending\") {\n      this.selectStatus = \"Select\";\n      this.selectButtonColor = \"secondary\"; // gray\n\n      this.disabledStatus = \"disabled\";\n    } else if (this.props.selectedJobCheck == true && this.props.currentSelected == true) {\n      this.selectStatus = \"Deselect\";\n      this.selectButtonColor = \"primary\";\n      this.disabledStatus = \"active\";\n    } else {\n      this.selectStatus = \"Select\";\n      this.selectButtonColor = \"primary\";\n      this.disabledStatus = \"active\";\n    }\n\n    if (this.props.status == \"Pending\") this.readyColorStatus = \" jobdisplayPending\";else if (this.props.status == \"Completed\") this.readyColorStatus = \" jobdisplaySuccess\";\n    return /*#__PURE__*/React.createElement(Modal, {\n      backdrop: \"static\",\n      show: this.props.showViewModal,\n      onHide: this.props.toggleXclose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Header, {\n      closeButton: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Modal.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"jobTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 29\n      }\n    }, \" \", this.props.jobName, \" \"))), /*#__PURE__*/React.createElement(Modal.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 25\n      }\n    }, \" Status: \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inline \" + this.readyColorStatus,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }\n    }, \" \", this.props.status, \" \")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }\n    }, \" Number of plans: \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 25\n      }\n    }, \" \", this.props.plansAmount, \" \")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }, \" Compactness: \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 25\n      }\n    }, \" \", this.props.compactness, \" \")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, \" Population Difference Limit: \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 25\n      }\n    }, \" \", this.props.populationDifference, \" \")), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }, \" Focused Minority Group(s): \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"inline \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }, \" \", this.props.minorityAnalyzed.join(\", \"), \" \")), /*#__PURE__*/React.createElement(Accordion, {\n      defaultActiveKey: \"1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Card.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Accordion.Toggle, {\n      as: Button,\n      variant: \"link\",\n      eventKey: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }, \"More Summary Information\")), /*#__PURE__*/React.createElement(Accordion.Collapse, {\n      eventKey: \"0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Card.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 33\n      }\n    }, \"This is where we have more summary info. test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test\"))))), /*#__PURE__*/React.createElement(Modal.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"danger\",\n      onClick: this.props.toggleViewModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 25\n      }\n    }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n      className: this.disabledStatus,\n      variant: this.selectButtonColor,\n      onClick: this.props.toggleSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 25\n      }\n    }, this.selectStatus)));\n  }\n\n}\n\nexport default ViewJobModal;","map":{"version":3,"sources":["/Users/kadiatoudiallo/Documents/GitHub/CSE-416-Project/client/src/components/homePage/Main Panel/JobCards/ViewJobModal.js"],"names":["React","Component","Modal","Button","Accordion","Card","ViewJobModal","constructor","state","selectStatus","selectButtonColor","disabledStatus","readyColorStatus","render","props","selectedJobCheck","currentSelected","status","showViewModal","toggleXclose","jobName","plansAmount","compactness","populationDifference","minorityAnalyzed","join","toggleViewModal","toggleSelection"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Modal, Button, Accordion, Card } from 'react-bootstrap';\n\n// Triggered when clicking \"View\" on a Job\n\nclass ViewJobModal extends Component {\n    constructor () {\n        super();\n        this.state = {}\n        // To edit class name of modal display\n        this.selectStatus = \"Select\"\n        this.selectButtonColor = \"primary\"\n        this.disabledStatus = \"\"\n        this.readyColorStatus = \"\"\n    }\n    render() {\n        if ( (this.props.selectedJobCheck == true && this.props.currentSelected == false) | this.props.status == \"Pending\" ) {\n            this.selectStatus = \"Select\"\n            this.selectButtonColor = \"secondary\"; // gray\n            this.disabledStatus = \"disabled\"; \n        }\n        else if (this.props.selectedJobCheck == true && this.props.currentSelected == true) {\n            this.selectStatus = \"Deselect\"\n            this.selectButtonColor = \"primary\";\n            this.disabledStatus = \"active\";\n        }\n        else {\n            this.selectStatus = \"Select\"\n            this.selectButtonColor = \"primary\";\n            this.disabledStatus = \"active\";\n        }\n        if (this.props.status == \"Pending\") this.readyColorStatus = \" jobdisplayPending\"\n        else if (this.props.status == \"Completed\") this.readyColorStatus = \" jobdisplaySuccess\"\n        return (\n                <Modal backdrop=\"static\" show={this.props.showViewModal} onHide={this.props.toggleXclose}>  \n                    <Modal.Header closeButton >\n                        <Modal.Title> \n                            <h4 className=\"jobTitle\"> {this.props.jobName} </h4>\n                        </Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                    {/* First let's display the status of the Job */}\n                    <p> \n                        <span> Status: </span> \n                        <span className={\"inline \" + this.readyColorStatus}> {this.props.status} </span>\n                    </p>\n                    {/* Second let's display the inputs chosen by the user */}\n                    <p> \n                        <span> Number of plans: </span> \n                        <span className={\"inline \"}> {this.props.plansAmount} </span>\n                    </p>\n                    <p> \n                        <span> Compactness: </span> \n                        <span className={\"inline \"}> {this.props.compactness} </span>\n                    </p>\n                    <p> \n                        <span> Population Difference Limit: </span> \n                        <span className={\"inline \"}> {this.props.populationDifference} </span>\n                    </p>\n                    <p> \n                        <span> Focused Minority Group(s): </span> \n                        <span className={\"inline \"}> {this.props.minorityAnalyzed.join(\", \")} </span>\n                    </p>\n\n                    <Accordion defaultActiveKey=\"1\">\n                        <Card>\n                            <Card.Header>\n                                <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\n                                    More Summary Information\n                                </Accordion.Toggle>\n                            </Card.Header>\n                            <Accordion.Collapse eventKey=\"0\">\n                                <Card.Body>\n                                    This is where we have more summary info. test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test test \n                                </Card.Body>\n                            </Accordion.Collapse>\n                        </Card>\n                    </Accordion>\n                    {/* <p> \n                        <span> Analysis Summary: </span> \n                        <span className={\"inline \"} > Testing Analysis Summary </span>\n                    </p> */}\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"danger\" onClick={this.props.toggleViewModal}>Close</Button>\n                        <Button className = {this.disabledStatus} variant={this.selectButtonColor} onClick={this.props.toggleSelection}>{this.selectStatus}</Button>\n                    </Modal.Footer>\n                </Modal>\n        );\n    }\n}\n\nexport default ViewJobModal;"]},"metadata":{},"sourceType":"module"}