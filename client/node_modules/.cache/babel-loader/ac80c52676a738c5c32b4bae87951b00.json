{"ast":null,"code":"var _jsxFileName = \"/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/App.js\";\nimport HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Dev\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport './css/project_styles.css'; // App.js is the parent component\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      batchCards: [],\n      selectedBatchCheck: false,\n      selectedPlanCheck: false,\n      currentState: \"Select a state\",\n      currentBatchName: \"No Batch Selected: \",\n      // name of the currently selected batch\n      // selectedBatchName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n      // Map View Filters \n      selectedFilters: null,\n      precinctView: false,\n      districtView: false,\n      stateView: true\n    };\n\n    this.createBatch = () => {};\n\n    this.deleteBatch = id => {// string\n    };\n\n    this.deletePlan = id => {// num\n    };\n\n    this.getSelectedBatch = () => {// returns selected batch\n      // .map and .filter use\n      // call in your districting plans and do .districtPlans from batch's database for plans\n    };\n\n    this.toggleSelectedBatchCheck = () => {\n      if (this.state.selectedBatchCheck == false) this.setState({\n        selectedBatchCheck: true\n      });else this.setState({\n        selectedBatchCheck: false\n      });\n    };\n\n    this.toggleSelectedPlanCheck = () => {\n      if (this.state.selectedPlanCheck == false) this.setState({\n        selectedPlanCheck: true\n      });else this.setState({\n        selectedPlanCheck: false\n      });\n    };\n\n    this.updateCurrentBatchName = name => {\n      if (name == \"\") this.setState({\n        currentBatchName: \"No Batch Selected: \"\n      });else this.setState({\n        currentBatchName: name + \":\"\n      });\n    };\n\n    this.changeCurrentState = newName => {\n      this.setState({\n        currentState: newName\n      });\n    };\n\n    this.changeSelectedFilters = selected => {\n      this.setState({\n        selectedFilters: selected\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(HomeScreen, {\n      currentState: this.state.currentState,\n      changeSelectedFilters: this.changeSelectedFilters,\n      changeCurrentState: this.changeCurrentState,\n      currentBatchName: this.state.currentBatchName,\n      updateCurrentBatchName: this.updateCurrentBatchName,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      toggleSelectedPlanCheck: this.toggleSelectedPlanCheck,\n      selectedBatchCheck: this.state.selectedBatchCheck,\n      toggleSelectedBatchCheck: this.toggleSelectedBatchCheck,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(DeveloperScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/App.js"],"names":["HomeScreen","DeveloperScreen","React","Component","BrowserRouter","Route","Redirect","Switch","App","state","batchCards","selectedBatchCheck","selectedPlanCheck","currentState","currentBatchName","selectedFilters","precinctView","districtView","stateView","createBatch","deleteBatch","id","deletePlan","getSelectedBatch","toggleSelectedBatchCheck","setState","toggleSelectedPlanCheck","updateCurrentBatchName","name","changeCurrentState","newName","changeSelectedFilters","selected","render"],"mappings":"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","sourcesContent":["import HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Dev\"\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport './css/project_styles.css';\n\n// App.js is the parent component\nclass App extends Component {\n    state = {\n      batchCards : [],\n      selectedBatchCheck: false,\n      selectedPlanCheck: false,\n      currentState : \"Select a state\",\n      currentBatchName : \"No Batch Selected: \", // name of the currently selected batch\n      // selectedBatchName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n              \n      // Map View Filters \n      selectedFilters : null,\n      precinctView : false,\n      districtView : false,\n      stateView : true\n      \n    }\n\n  createBatch = () => {\n    \n  }\n\n  deleteBatch = (id) => { // string\n\n  }\n\n  deletePlan = (id) => { // num\n\n  }\n\n  getSelectedBatch = () => {\n    // returns selected batch\n    // .map and .filter use\n    // call in your districting plans and do .districtPlans from batch's database for plans\n  }\n  \n  toggleSelectedBatchCheck = () => {\n    if (this.state.selectedBatchCheck == false) this.setState({selectedBatchCheck : true});\n    else this.setState({selectedBatchCheck : false});\n}\n\n  toggleSelectedPlanCheck = () => {\n    if (this.state.selectedPlanCheck == false) this.setState({selectedPlanCheck: true});\n    else this.setState({selectedPlanCheck : false});\n}\n\n  updateCurrentBatchName = (name) => {\n    if (name == \"\") this.setState({currentBatchName : \"No Batch Selected: \"});\n    else this.setState({currentBatchName : name + \":\"});\n  }\n\n  // Map Manipulation Functions\n  changeCurrentState = (newName) => {\n    this.setState({currentState : newName});\n  }\n\n  changeSelectedFilters = (selected) => {\n    this.setState({selectedFilters : selected});\n  }\n\n  render() {\n  return (\n    <div >\n\n        {/* <BrowserRouter>\n          <Switch>\n            <Redirect exact from=\"/\" to={{ pathname: \"/home\" }} />\n            <Route path=\"/home\"> */}\n            <HomeScreen currentState={this.state.currentState} changeSelectedFilters={this.changeSelectedFilters} changeCurrentState={this.changeCurrentState} currentBatchName ={this.state.currentBatchName} updateCurrentBatchName={this.updateCurrentBatchName} selectedPlanCheck={this.state.selectedPlanCheck} toggleSelectedPlanCheck={this.toggleSelectedPlanCheck} selectedBatchCheck={this.state.selectedBatchCheck} toggleSelectedBatchCheck={this.toggleSelectedBatchCheck}/>\n            {/* </Route> */}\n            {/* <Route path=\"/dev\"> */}\n            <DeveloperScreen/>            \n            {/* </Route> */}\n          {/* </Switch> */}\n        {/* // </BrowserRouter> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}