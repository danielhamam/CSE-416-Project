{"ast":null,"code":"const SERVER_ORIGIN = \"localhost:8080\";\nconst URL = \"http://\" + SERVER_ORIGIN;\nconst SERVER_PATHS = {\n  CONNECTING: \"/connect\",\n  STATE: \"/state\",\n  BOUNDARIES: \"/boundaries\",\n  DEMOGRAPHIC_FILTER: \"/demographicfilter\",\n  JOB: \"/job\",\n  PLAN: \"/plan\",\n  BOXWHISKER: \"/boxwhisker\",\n  DELETE: \"/delete\",\n  CANCEL: \"/cancel\",\n  GENERATE_JOB: \"/generate\",\n  GENERATE_HEATMAP: \"/heatmap\"\n};\nconst myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n/** \n* @param method HTTP Request Method \n* @param data HTTP body\n* @returns  An object containing any custom settings that you want to apply to the fetch() request.\n*\n**/\n\nfunction createFetchOptions(method, data) {\n  let requestOptions;\n\n  if (method == \"GET\") {\n    requestOptions = {\n      method: method,\n      mode: 'cors',\n      headers: myHeaders\n    };\n  } else {\n    let body = JSON.stringify(data);\n    requestOptions = {\n      method: method,\n      mode: 'cors',\n      headers: myHeaders,\n      body: body\n    };\n  }\n\n  console.log(requestOptions);\n  return requestOptions;\n}\n\nexport async function connectToServer() {\n  console.log(\"Connecting to Server\");\n  const requestOptions = createFetchOptions('GET');\n  const NEW_URL = URL + SERVER_PATHS.CONNECTING;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\n/** \n* @param path The desired state a user wants. \n**/\n\nexport async function getState(data) {\n  console.log(\"Gettting State\");\n  const requestOptions = createFetchOptions('GET');\n  const NEW_URL = URL + SERVER_PATHS.STATE + \"/\" + data.state;\n  const response = await fetch(NEW_URL, requestOptions).catch(error => error);\n  console.log(response);\n  return await response.json();\n}\nexport async function getBoundaries(path) {}\nexport async function getJob(data) {\n  console.log(\"Getting Job\");\n  const requestOptions = createFetchOptions('GET');\n  const NEW_URL = URL + SERVER_PATHS.JOB + \"/\" + data.job.id;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\nexport async function getPlan(data) {\n  console.log(\"Getting Plan\");\n  const requestOptions = createFetchOptions('GET');\n  const NEW_URL = URL + SERVER_PATHS.JOB + \"/\" + data.job.id + \"/\" + data.plan.id;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\nexport async function getPlanGraph(data) {\n  console.log(\"Getting Box n Whisker For Plan\");\n  const requestOptions = createFetchOptions('GET');\n  const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\nexport async function cancelJob(data) {\n  console.log(\"Cancel\");\n  const requestOptions = createFetchOptions('PUT');\n  const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\nexport async function deleteJob(data) {\n  console.log(\"Delete\");\n  const requestOptions = createFetchOptions('DELETE');\n  const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id;\n  const response = fetch(NEW_URL, requestOptions).catch(error => error);\n  return response;\n}\nexport async function generateJob(data) {\n  console.log(\"Generating Job\");\n  const requestOptions = createFetchOptions('POST', data);\n  const NEW_URL = URL + SERVER_PATHS.JOB;\n  return fetch(NEW_URL, requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error is:', error));\n}\nexport async function generateHeatMap(data) {\n  console.log(\"Generating Job\");\n  const requestOptions = createFetchOptions('POST', data);\n  const NEW_URL = URL + SERVER_PATHS.GENERATE_HEATMAP;\n  return fetch(NEW_URL, requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error is:', error));\n}","map":{"version":3,"sources":["/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/endpoint/Client.js"],"names":["SERVER_ORIGIN","URL","SERVER_PATHS","CONNECTING","STATE","BOUNDARIES","DEMOGRAPHIC_FILTER","JOB","PLAN","BOXWHISKER","DELETE","CANCEL","GENERATE_JOB","GENERATE_HEATMAP","myHeaders","Headers","append","createFetchOptions","method","data","requestOptions","mode","headers","body","JSON","stringify","console","log","connectToServer","NEW_URL","response","fetch","catch","error","getState","state","json","getBoundaries","path","getJob","job","id","getPlan","plan","getPlanGraph","cancelJob","deleteJob","generateJob","then","text","result","generateHeatMap"],"mappings":"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","sourcesContent":["const SERVER_ORIGIN  = \"localhost:8080\" ;\nconst URL = \"http://\" + SERVER_ORIGIN;\nconst SERVER_PATHS = {\n    CONNECTING: \"/connect\",\n    STATE: \"/state\",\n    BOUNDARIES: \"/boundaries\",\n    DEMOGRAPHIC_FILTER: \"/demographicfilter\",\n    JOB: \"/job\",\n    PLAN: \"/plan\",\n    BOXWHISKER: \"/boxwhisker\",\n    DELETE:\"/delete\",\n    CANCEL:\"/cancel\",\n    GENERATE_JOB: \"/generate\",\n    GENERATE_HEATMAP: \"/heatmap\",\n}\nconst myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n\n/** \n* @param method HTTP Request Method \n* @param data HTTP body\n* @returns  An object containing any custom settings that you want to apply to the fetch() request.\n*\n**/\nfunction createFetchOptions(method, data){\n    let requestOptions;\n    if (method == \"GET\"){\n        requestOptions = {\n            method: method,\n            mode: 'cors',\n            headers: myHeaders,\n        }\n    }\n    else{\n        let body = JSON.stringify(data)\n        requestOptions = {\n            method: method,\n            mode: 'cors',\n            headers: myHeaders,\n            body: body,\n        }\n    }\n    console.log(requestOptions)\n    return requestOptions\n}\n\nexport async function connectToServer(){\n    console.log(\"Connecting to Server\");\n    const requestOptions = createFetchOptions('GET');\n    const NEW_URL = URL + SERVER_PATHS.CONNECTING;\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\n    return response; \n}\n\n/** \n* @param path The desired state a user wants. \n**/\nexport async function getState(data){\n    console.log(\"Gettting State\");\n    const requestOptions = createFetchOptions('GET');\n    const NEW_URL = URL + SERVER_PATHS.STATE + \"/\" + data.state;\n    const response = await fetch(NEW_URL, requestOptions).catch(error => error);\n    console.log(response);\n    return await response.json()\n}\n\nexport async function getBoundaries(path){\n\n}\n\nexport async function getJob(data){\n    console.log(\"Getting Job\");\n    const requestOptions = createFetchOptions('GET');\n    const NEW_URL = URL + SERVER_PATHS.JOB + \"/\" + data.job.id;\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\n    return response; \n}\nexport async function getPlan(data){\n    console.log(\"Getting Plan\");\n    const requestOptions = createFetchOptions('GET');\n    const NEW_URL = URL + SERVER_PATHS.JOB + \"/\" + data.job.id + \"/\" + data.plan.id\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\n    return response; \n}\nexport async function getPlanGraph(data){\n    console.log(\"Getting Box n Whisker For Plan\");\n    const requestOptions = createFetchOptions('GET');\n    const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\n    return response; \n}\nexport async function cancelJob(data){\n    console.log(\"Cancel\");\n    const requestOptions = createFetchOptions('PUT');\n    const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\n    return response; \n}\n\nexport async function deleteJob(data){\n    console.log(\"Delete\");\n    const requestOptions = createFetchOptions('DELETE');\n    const NEW_URL = URL + SERVER_PATHS.BOXWHISKER + \"/\" + data.job.id + \"/\" + data.plan.id\n    const response = fetch(NEW_URL, requestOptions).catch(error =>  error);\n    return response; \n}\n\nexport async function generateJob(data){\n    console.log(\"Generating Job\");\n    const requestOptions = createFetchOptions('POST', data);\n    const NEW_URL = URL + SERVER_PATHS.JOB;\n    return fetch(NEW_URL, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log('error is:', error));\n}\n\nexport async function generateHeatMap(data){\n    console.log(\"Generating Job\");\n    const requestOptions = createFetchOptions('POST', data);\n    const NEW_URL = URL + SERVER_PATHS.GENERATE_HEATMAP;\n    return fetch(NEW_URL, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log('error is:', error));\n}"]},"metadata":{},"sourceType":"module"}