{"ast":null,"code":"const SERVER_ORIGIN = \"localhost:8080\";\nconst URL = \"http://\" + SERVER_ORIGIN;\nconst HOME_PATH = \"/home\";\nconst myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n\nfunction createFetchOptions(method, data) {\n  let body = JSON.stringify(data);\n  let requestOptions = {\n    method: method,\n    mode: 'cors',\n    headers: myHeaders,\n    body: body\n  };\n  console.log(requestOptions);\n  return requestOptions;\n}\n\nexport const generateJob = data => {\n  console.log(\"generateBatch\");\n  const requestOptions = createFetchOptions('POST', data);\n  const NEW_URL = URL + HOME_PATH;\n  return fetch(NEW_URL, requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error is:', error));\n};\nexport const getState = () => {\n  // Default options are marked with *\n  console.log(\"asdf\"); // return await fetch('http://localhost:8080/home',{ \n  //     method: 'get',\n  //     headers: {\n  //     'Accept': 'application/json, text/plain, */*',\n  //     'Content-Type': 'application/json',\n  //     },\n  //     credentials: 'same-origin',\n  //     body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  // }).then(res => res.json());\n\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n  var raw = JSON.stringify({\n    \"state\": \"NY\"\n  });\n  var requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow',\n    mode: 'cors'\n  };\n  const a = fetch(\"http://localhost:8080/home\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error and here is it:', error));\n};","map":{"version":3,"sources":["/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/endpoint/Client.js"],"names":["SERVER_ORIGIN","URL","HOME_PATH","myHeaders","Headers","append","createFetchOptions","method","data","body","JSON","stringify","requestOptions","mode","headers","console","log","generateJob","NEW_URL","fetch","then","response","text","result","catch","error","getState","raw","redirect","a"],"mappings":"AAAA,MAAMA,aAAa,GAAI,gBAAvB;AACA,MAAMC,GAAG,GAAG,YAAYD,aAAxB;AACA,MAAME,SAAS,GAAG,OAAlB;AACA,MAAMC,SAAS,GAAG,IAAIC,OAAJ,EAAlB;AACAD,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AACAF,SAAS,CAACE,MAAV,CAAiB,6BAAjB,EAAgD,GAAhD;;AAGA,SAASC,kBAAT,CAA4BC,MAA5B,EAAoCC,IAApC,EAAyC;AACrC,MAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAX;AACA,MAAII,cAAc,GAAG;AACjBL,IAAAA,MAAM,EAAEA,MADS;AAEjBM,IAAAA,IAAI,EAAE,MAFW;AAGjBC,IAAAA,OAAO,EAAEX,SAHQ;AAIjBM,IAAAA,IAAI,EAAEA;AAJW,GAArB;AAMAM,EAAAA,OAAO,CAACC,GAAR,CAAYJ,cAAZ;AACA,SAAOA,cAAP;AACH;;AAED,OAAO,MAAMK,WAAW,GAAIT,IAAD,IAAS;AAChCO,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACA,QAAMJ,cAAc,GAAGN,kBAAkB,CAAC,MAAD,EAASE,IAAT,CAAzC;AACA,QAAMU,OAAO,GAAGjB,GAAG,GAAGC,SAAtB;AACA,SAAOiB,KAAK,CAACD,OAAD,EAAUN,cAAV,CAAL,CACNQ,IADM,CACDC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADX,EAENF,IAFM,CAEDG,MAAM,IAAIR,OAAO,CAACC,GAAR,CAAYO,MAAZ,CAFT,EAGNC,KAHM,CAGAC,KAAK,IAAIV,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBS,KAAzB,CAHT,CAAP;AAIH,CARM;AAWP,OAAO,MAAMC,QAAQ,GAAG,MAAM;AAC1B;AACAX,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAF0B,CAG1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAIb,SAAS,GAAG,IAAIC,OAAJ,EAAhB;AACAD,EAAAA,SAAS,CAACE,MAAV,CAAiB,cAAjB,EAAiC,kBAAjC;AACAF,EAAAA,SAAS,CAACE,MAAV,CAAiB,6BAAjB,EAAgD,GAAhD;AAEA,MAAIsB,GAAG,GAAGjB,IAAI,CAACC,SAAL,CAAe;AAAC,aAAQ;AAAT,GAAf,CAAV;AAEA,MAAIC,cAAc,GAAG;AACrBL,IAAAA,MAAM,EAAE,KADa;AAErBO,IAAAA,OAAO,EAAEX,SAFY;AAGrByB,IAAAA,QAAQ,EAAE,QAHW;AAIrBf,IAAAA,IAAI,EAAE;AAJe,GAArB;AAQA,QAAMgB,CAAC,GAAGV,KAAK,CAAC,4BAAD,EAA+BP,cAA/B,CAAL,CACTQ,IADS,CACJC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADR,EAETF,IAFS,CAEJG,MAAM,IAAIR,OAAO,CAACC,GAAR,CAAYO,MAAZ,CAFN,EAGTC,KAHS,CAGHC,KAAK,IAAIV,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCS,KAArC,CAHN,CAAV;AAMD,CAhCI","sourcesContent":["const SERVER_ORIGIN  = \"localhost:8080\" \nconst URL = \"http://\" + SERVER_ORIGIN;\nconst HOME_PATH = \"/home\"\nconst myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n\n\nfunction createFetchOptions(method, data){\n    let body = JSON.stringify(data)\n    let requestOptions = {\n        method: method,\n        mode: 'cors',\n        headers: myHeaders,\n        body: body\n    }\n    console.log(requestOptions)\n    return requestOptions\n}\n\nexport const generateJob = (data) =>{\n    console.log(\"generateBatch\")\n    const requestOptions = createFetchOptions('POST', data);\n    const NEW_URL = URL + HOME_PATH\n    return fetch(NEW_URL, requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log('error is:', error));\n}\n  \n\nexport const getState = () => {\n    // Default options are marked with *\n    console.log(\"asdf\");\n    // return await fetch('http://localhost:8080/home',{ \n    //     method: 'get',\n    //     headers: {\n    //     'Accept': 'application/json, text/plain, */*',\n    //     'Content-Type': 'application/json',\n    //     },\n    //     credentials: 'same-origin',\n    //     body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    // }).then(res => res.json());\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n\n    var raw = JSON.stringify({\"state\":\"NY\"});\n\n    var requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow',\n    mode: 'cors',\n    \n    };\n\n    const a = fetch(\"http://localhost:8080/home\", requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log('error and here is it:', error));\n\n\n  }\n\n"]},"metadata":{},"sourceType":"module"}