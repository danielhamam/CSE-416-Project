{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mdari\\\\Desktop\\\\416 Project\\\\CSE-416-Project\\\\client\\\\src\\\\components\\\\homePage\\\\Main Panel\\\\JobCards\\\\ModalJob.js\";\nimport React, { Component } from 'react';\nimport { Modal, Button } from 'react-bootstrap'; // Triggered when clicking \"View\" on a Job\n\nclass ModalJob extends Component {\n  constructor() {\n    super();\n    this.state = {}; // To edit class name of modal display\n\n    this.selectStatus = \"Select\";\n    this.selectButtonColor = \"primary\";\n    this.disabledStatus = \"\";\n    this.readyColorStatus = \"\";\n  }\n\n  render() {\n    // To check to disable or enable select button\n    if ((this.props.selectedJobCheck == true && this.props.currentSelected == false) | this.props.status == \"Pending\") {\n      // turn the select button gray\n      this.selectStatus = \"Select\";\n      this.selectButtonColor = \"secondary\";\n      this.disabledStatus = \"disabled\";\n    } else if (this.props.selectedJobCheck == true && this.props.currentSelected == true) {\n      this.selectStatus = \"Deselect\";\n      this.selectButtonColor = \"primary\";\n      this.disabledStatus = \"active\";\n    } else {\n      this.selectStatus = \"Select\";\n      this.selectButtonColor = \"primary\";\n      this.disabledStatus = \"active\";\n    } // To display whether it is ready or pending\n\n\n    if (this.props.status == \"Pending\") {\n      this.readyColorStatus = \" jobdisplayPending\";\n    } else if (this.props.status == \"Completed\") {\n      this.readyColorStatus = \" jobdisplaySuccess\";\n    }\n\n    return (\n      /*#__PURE__*/\n      // \"Props\" means properties. We communicated with JobCard.js to connect the card's buttons with the modal.\n      React.createElement(Modal, {\n        backdrop: \"static\",\n        show: this.props.showViewModal,\n        onHide: this.props.toggleViewModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Header, {\n        closeButton: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Modal.Title, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"jobTitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 29\n        }\n      }, \" \", this.props.jobName, \" \"))), /*#__PURE__*/React.createElement(Modal.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }\n      }, \" Status: \"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"inline \" + this.readyColorStatus,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 25\n        }\n      }, \" \", this.props.status, \" \")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }\n      }, \" Number of plans: \"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"inline \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }\n      }, \" \", this.props.numberPlans, \" \")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 25\n        }\n      }, \" Compactness: \"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"inline \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 25\n        }\n      }, \" \", this.props.compactness, \" \")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 25\n        }\n      }, \" Population Difference Limit: \"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"inline \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }\n      }, \" \", this.props.populationLimit, \" \")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }\n      }, \" Focused Minority Group(s): \"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"inline \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }\n      }, \" \", this.props.minorityAnalyzed, \" \")), /*#__PURE__*/React.createElement(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }\n      }, \" Analysis Summary: \"), /*#__PURE__*/React.createElement(\"span\", {\n        className: \"inline \",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }\n      }, \" Testing Analysis Summary \"))), /*#__PURE__*/React.createElement(Modal.Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        variant: \"danger\",\n        onClick: this.props.toggleViewModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 25\n        }\n      }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n        className: this.disabledStatus,\n        variant: this.selectButtonColor,\n        onClick: this.props.toggleSelection,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }\n      }, this.selectStatus))) // {/* </div> */}\n\n    );\n  }\n\n}\n\nexport default ModalJob;","map":{"version":3,"sources":["C:/Users/mdari/Desktop/416 Project/CSE-416-Project/client/src/components/homePage/Main Panel/JobCards/ModalJob.js"],"names":["React","Component","Modal","Button","ModalJob","constructor","state","selectStatus","selectButtonColor","disabledStatus","readyColorStatus","render","props","selectedJobCheck","currentSelected","status","showViewModal","toggleViewModal","jobName","numberPlans","compactness","populationLimit","minorityAnalyzed","toggleSelection"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\n// Triggered when clicking \"View\" on a Job\r\n\r\nclass ModalJob extends Component {\r\n    constructor () {\r\n        super();\r\n        this.state = {\r\n        }\r\n        // To edit class name of modal display\r\n        this.selectStatus = \"Select\"\r\n        this.selectButtonColor = \"primary\"\r\n        this.disabledStatus = \"\"\r\n        this.readyColorStatus = \"\"\r\n    }\r\n    render() {\r\n\r\n        // To check to disable or enable select button\r\n\r\n        if ( (this.props.selectedJobCheck == true && this.props.currentSelected == false) | this.props.status == \"Pending\" ) {\r\n            // turn the select button gray\r\n            this.selectStatus = \"Select\"\r\n            this.selectButtonColor = \"secondary\";\r\n            this.disabledStatus = \"disabled\";\r\n        }\r\n        else if (this.props.selectedJobCheck == true && this.props.currentSelected == true) {\r\n            this.selectStatus = \"Deselect\"\r\n            this.selectButtonColor = \"primary\";\r\n            this.disabledStatus = \"active\";\r\n        }\r\n        else {\r\n            this.selectStatus = \"Select\"\r\n            this.selectButtonColor = \"primary\";\r\n            this.disabledStatus = \"active\";\r\n        }\r\n\r\n        // To display whether it is ready or pending\r\n        if (this.props.status == \"Pending\") {\r\n            this.readyColorStatus = \" jobdisplayPending\"\r\n        }\r\n        else if (this.props.status == \"Completed\") {\r\n            this.readyColorStatus = \" jobdisplaySuccess\"\r\n        }\r\n\r\n        return (\r\n        // \"Props\" means properties. We communicated with JobCard.js to connect the card's buttons with the modal.\r\n    \r\n                <Modal backdrop=\"static\" show={this.props.showViewModal} onHide={this.props.toggleViewModal}>  \r\n                    <Modal.Header closeButton >\r\n                        <Modal.Title> \r\n                            <h4 className=\"jobTitle\"> {this.props.jobName} </h4>\r\n                        </Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                    {/* First let's display the status of the Job */}\r\n                    <p> \r\n                        <span> Status: </span> \r\n                        <span className={\"inline \" + this.readyColorStatus}> {this.props.status} </span>\r\n                    </p>\r\n                    {/* Second let's display the inputs chosen by the user */}\r\n                    <p> \r\n                        <span> Number of plans: </span> \r\n                        <span className={\"inline \"}> {this.props.numberPlans} </span>\r\n                    </p>\r\n                    <p> \r\n                        <span> Compactness: </span> \r\n                        <span className={\"inline \"}> {this.props.compactness} </span>\r\n                    </p>\r\n                    <p> \r\n                        <span> Population Difference Limit: </span> \r\n                        <span className={\"inline \"}> {this.props.populationLimit} </span>\r\n                    </p>\r\n                    <p> \r\n                        <span> Focused Minority Group(s): </span> \r\n                        <span className={\"inline \"}> {this.props.minorityAnalyzed} </span>\r\n                    </p>\r\n                    <p> \r\n                        <span> Analysis Summary: </span> \r\n                        <span className={\"inline \"} > Testing Analysis Summary </span>\r\n                    </p>\r\n\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        <Button variant=\"danger\" onClick={this.props.toggleViewModal}>Close</Button>\r\n                        <Button className = {this.disabledStatus} variant={this.selectButtonColor} onClick={this.props.toggleSelection}>{this.selectStatus}</Button>\r\n                    </Modal.Footer>\r\n                </Modal>\r\n            // {/* </div> */}\r\n        );\r\n    }\r\n}\r\n\r\nexport default ModalJob;"]},"metadata":{},"sourceType":"module"}