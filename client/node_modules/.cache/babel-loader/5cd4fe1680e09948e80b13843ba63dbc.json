{"ast":null,"code":"var _jsxFileName = \"/Users/carloslopez/Desktop/SCHOOL/ComputerScience/CSE416/CSE-416-Project/src/components/homePage/Main Panel/BatchCards/BatchCard.js\";\nimport React, { Component } from 'react';\nimport ModalBatch from './ModalBatch';\nimport DeleteModal from './DeleteModal';\n\nclass BatchCard extends Component {\n  constructor() {\n    super();\n\n    this.toggleSelection = e => {\n      // do something with batch\n      if (this.status == false) {\n        return;\n      }\n\n      if (this.state.showModal == true && this.props.selected == false) {\n        this.setState({\n          showModal: false\n        });\n        this.goTop = \"\";\n      }\n\n      if (this.state.selected == false && this.props.selectedCard == false) {\n        // Select\n        this.setState({\n          selected: true\n        });\n        this.props.toggleSelectedCard();\n        this.props.changeSidebarBatch(this.state.name);\n        this.goTop = \"goTopBatch \";\n      } else if (this.state.selected == false && this.props.selectedCard == true) {\n        // Cant Select\n        this.setState({\n          selected: false\n        });\n        this.goTop = \"\";\n      } else if (this.state.selected == true && this.props.selectedCard == true) {\n        // Deselect\n        this.setState({\n          selected: false\n        });\n        this.props.toggleSelectedCard();\n        this.props.changeSidebarBatch(\"\");\n        this.goTop = \"\";\n      } else {// is currently selected, but not selected card. do nothing. (impossible scenario)\n      } // and check if you did this through modal\n\n    };\n\n    this.toggleModal = e => {\n      e.stopPropagation();\n      if (this.state.showModal == true) this.setState({\n        showModal: false\n      });else this.setState({\n        showModal: true\n      });\n    };\n\n    this.toggleDeleteModal = e => {\n      e.stopPropagation();\n      if (this.state.showDeleteModal == false) this.setState({\n        showDeleteModal: true\n      });else this.setState({\n        showDeleteModal: false\n      });\n    };\n\n    this.deleteBatch = e => {// Here you would delete the batch card\n    };\n\n    this.state = {\n      showModal: false,\n      showDeleteModal: false,\n      selected: false,\n      name: \"\",\n      // originally empty, gets filled when we render\n      id: \"2\",\n      // put inputs as one of the varialbes\n      summary: \"\" // this would be the analysis summary, display in modal\n\n    };\n    this.classNameCustom = \"\";\n    this.goTop = \"\";\n    this.statusColor = \"\"; // To make them same as props (for now)\n\n    this.compactness = \"\";\n    this.numberPlans = \"\";\n    this.status = false; // we're going to say false for pending, true for ready\n  }\n\n  render() {\n    // Whenever we do setState, it rerenders\n    if (this.state.selected == true) {\n      this.classNameCustom = \"batchCard badge badge-pill badge-dark \";\n    } else {\n      this.classNameCustom = \"batchCard badge badge-pill badge-light \";\n    } // here I would say, let's check if status is ready\n\n\n    this.status = this.props.status;\n    if (this.status == true) this.statusColor = \" batchSuccess \";else if (this.status == false) this.statusColor = \" batchPending \"; // --------------------------------------------------------\n    // LETS SET THE NAME / COMPACTNESS / NUMBER PLANS\n    // Check batch name, if it's empty the id is the name\n    // --------------------------------------------------------\n\n    if (this.props.batchName == \"\") this.setState({\n      name: \"Batch \" + this.state.id\n    }); // default name \n    else if (this.props.batchName != this.state.name) this.setState({\n        name: this.props.batchName\n      }); // custom name\n\n    this.compactness = this.props.compactness;\n    this.numberPlans = this.props.numberPlans;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: this.classNameCustom + this.goTop + this.statusColor,\n      onClick: this.toggleSelection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"batchcardContents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"batchcardDelete badge badge-pill badge-danger\",\n      onClick: this.toggleDeleteModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"deleteText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 126\n      }\n    }, \" X \"), \" \"), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"batchcardTitle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }\n    }, \" \", this.state.name, \" \"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"batchcardView badge badge-pill badge-dark\",\n      onClick: this.toggleModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 25\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewText\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 115\n      }\n    }, \" View \"), \" \")), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    })), /*#__PURE__*/React.createElement(DeleteModal, {\n      showDeleteModal: this.state.showDeleteModal,\n      deleteBatch: this.deleteBatch,\n      toggleDeleteModal: this.toggleDeleteModal,\n      batchName: this.state.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(ModalBatch, {\n      compactness: this.compactness,\n      numberPlans: this.numberPlans,\n      status: this.status,\n      currentSelected: this.state.selected,\n      selectedCard: this.props.selectedCard,\n      toggleSelection: this.toggleSelection,\n      batchName: this.state.name,\n      toggleModal: this.toggleModal,\n      showModal: this.state.showModal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default BatchCard;","map":{"version":3,"sources":["/Users/carloslopez/Desktop/SCHOOL/ComputerScience/CSE416/CSE-416-Project/src/components/homePage/Main Panel/BatchCards/BatchCard.js"],"names":["React","Component","ModalBatch","DeleteModal","BatchCard","constructor","toggleSelection","e","status","state","showModal","props","selected","setState","goTop","selectedCard","toggleSelectedCard","changeSidebarBatch","name","toggleModal","stopPropagation","toggleDeleteModal","showDeleteModal","deleteBatch","id","summary","classNameCustom","statusColor","compactness","numberPlans","render","batchName"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ModalBatch from './ModalBatch'\nimport DeleteModal from './DeleteModal'\n\nclass BatchCard extends Component {\n    constructor () {\n        super();\n        this.state = {\n            showModal : false,\n            showDeleteModal : false,\n            selected : false,\n            name : \"\", // originally empty, gets filled when we render\n            id : \"2\",\n            // put inputs as one of the varialbes\n            summary : \"\", // this would be the analysis summary, display in modal\n        }\n        this.classNameCustom = \"\";\n        this.goTop = \"\";\n        this.statusColor = \"\";\n        // To make them same as props (for now)\n        this.compactness = \"\";\n        this.numberPlans = \"\";\n        this.status = false; // we're going to say false for pending, true for ready\n    }\n\n    toggleSelection = (e) => {\n        // do something with batch\n\n        if (this.status == false) {\n            return;\n        }\n\n        if (this.state.showModal == true && this.props.selected == false) {\n            this.setState({showModal : false});\n            this.goTop=\"\";\n        }\n\n        if (this.state.selected == false && this.props.selectedCard == false) {\n            // Select\n            this.setState({selected: true});\n            this.props.toggleSelectedCard();\n            this.props.changeSidebarBatch(this.state.name);\n            this.goTop=\"goTopBatch \";\n        }\n        else if (this.state.selected == false && this.props.selectedCard == true) {\n            // Cant Select\n            this.setState({selected : false});\n            this.goTop=\"\";\n        }\n        else if (this.state.selected == true && this.props.selectedCard == true) {\n            // Deselect\n            this.setState({selected: false});\n            this.props.toggleSelectedCard();\n            this.props.changeSidebarBatch(\"\");\n            this.goTop=\"\";\n        }\n        else {\n            // is currently selected, but not selected card. do nothing. (impossible scenario)\n        }\n\n        // and check if you did this through modal\n    }\n\n    toggleModal = (e) => {\n        e.stopPropagation();\n        if (this.state.showModal == true) this.setState({showModal : false});\n        else this.setState({showModal : true});\n    }\n\n    toggleDeleteModal = (e) => {\n        e.stopPropagation();\n        if (this.state.showDeleteModal == false) this.setState({showDeleteModal : true});\n        else this.setState({showDeleteModal : false});\n    }\n\n    deleteBatch = (e) => {\n        // Here you would delete the batch card\n    }\n\n    render() {\n\n        // Whenever we do setState, it rerenders\n        if (this.state.selected == true) {\n            this.classNameCustom = \"batchCard badge badge-pill badge-dark \";\n        }\n        else {\n            this.classNameCustom = \"batchCard badge badge-pill badge-light \";\n        }\n\n        // here I would say, let's check if status is ready\n        this.status = this.props.status;\n        if (this.status == true ) this.statusColor = \" batchSuccess \";\n        else if (this.status == false) this.statusColor = \" batchPending \";\n\n        // --------------------------------------------------------\n              // LETS SET THE NAME / COMPACTNESS / NUMBER PLANS\n            // Check batch name, if it's empty the id is the name\n        // --------------------------------------------------------\n\n        if (this.props.batchName == \"\") this.setState({name : \"Batch \" + this.state.id}); // default name \n        else if (this.props.batchName != this.state.name) this.setState({name : this.props.batchName}); // custom name\n\n        this.compactness = this.props.compactness;\n        this.numberPlans = this.props.numberPlans;\n\n        return (\n            <div> \n                <div className={this.classNameCustom + this.goTop + this.statusColor} onClick={this.toggleSelection}>\n                    <div className=\"batchcardContents\">\n                        <button className=\"batchcardDelete badge badge-pill badge-danger\" onClick={this.toggleDeleteModal} > <div className=\"deleteText\"> X </div> </button>\n                        <span className=\"batchcardTitle\"> {this.state.name} </span> \n                        <button className=\"batchcardView badge badge-pill badge-dark\" onClick={this.toggleModal}> <div className=\"viewText\" > View </div> </button>\n                    </div> \n                    <br /> \n                    <br />\n                </div>\n                <DeleteModal showDeleteModal={this.state.showDeleteModal} deleteBatch={this.deleteBatch} toggleDeleteModal={this.toggleDeleteModal} batchName={this.state.name} />\n                <ModalBatch compactness={this.compactness} numberPlans={this.numberPlans} status={this.status} currentSelected={this.state.selected} selectedCard={this.props.selectedCard} toggleSelection={this.toggleSelection} batchName={this.state.name} toggleModal={this.toggleModal} showModal={this.state.showModal}/>\n            </div>\n        );\n    }\n}\n\nexport default BatchCard;"]},"metadata":{},"sourceType":"module"}