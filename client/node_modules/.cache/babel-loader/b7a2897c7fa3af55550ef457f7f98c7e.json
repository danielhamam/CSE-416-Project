{"ast":null,"code":"var _jsxFileName = \"/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/App.js\";\nimport HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Developer\";\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport * as endpoint from './endpoint/Client';\nimport testJobCards from './json/TestJobCards.json';\nimport './css/project_styles.css'; // App.js is the parent component\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // State:\n      currentState: \"Select a state\",\n      enactedPlan: testJobCards.enactedPlan,\n      // Jobs:\n      jobCards: testJobCards.jobs,\n      // holds all the jobs retrieved back from the serverside (UPDATED BY JSON)\n      currentJob: \"\",\n      // Map View Filters:\n      selectedFilters: null,\n      // current demographic filters\n      precinctView: false,\n      // show precincts\n      districtView: false,\n      // show districts\n      stateView: true,\n      // show stateView\n      // Checks for Selection\n      selectedPlanCheck: false,\n      selectedJobCheck: false // Modals\n      // selectedJobName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n\n    };\n\n    this.changeCurrentState = async stateName => {\n      // let getState =  {\n      //   state: stateName\n      // }\n      // try {\n      //   let res = await endpoint.getState(getState);\n      //   console.log(res)\n      this.setState({\n        currentState: stateName\n      }); // this.setState({ jobCards : ____}); // update the jobCards in state\n      // } catch (exception) {\n      //   console.error(exception);\n      // }\n    };\n\n    this.createJob = async userInputs => {\n      // userInputs is an OBJECT of the constraints user selected. Let's gather them here. \n      let res = await endpoint.generateJob(userInputs); // use of .then here? or keep that in client.js for fetch?\n    };\n\n    this.cancelJob = job => {\n      // string\n      // Remove job from jobCards\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      if (indexOfJob >= 0) this.state.jobCards.splice(indexOfJob, 1);\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.deleteJob = job => {\n      // string\n      // Remove job from jobCards\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      if (indexOfJob >= 0) this.state.jobCards.splice(indexOfJob, 1);\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.deletePlan = plan => {\n      // string\n      // What plan is it?\n      if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\n        let job = this.state.currentJob;\n        let indexOfJob = this.state.jobCards.indexOf(job);\n        let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\n        if (indexOfPlan >= 0) this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\n        this.setState({\n          jobCards: this.state.jobCards\n        });\n      } // else, we are deleting the enacted plan\n      // this.state.jobCards.enactedPlan.splice(indexOfPlan, 1);\n\n\n      this.setState({\n        jobCards: this.state.jobCards\n      });\n    };\n\n    this.generateBoxWhiskerValues = () => {\n      console.log(\"sending this:\");\n      console.log(this.state.currentJob);\n\n      try {// let res = await endpoint.getState(currentJob);\n        // console.log(res)\n      } catch (exception) {\n        console.error(exception);\n      }\n    };\n\n    this.changeSelectedFilters = mapFilters => {\n      // open questions: check if change for demographic heat map or for cluster? Separate functions?\n      // does updates one at a time (but if you have two filters does it over again)\n      this.setState({\n        selectedFilters: mapFilters\n      });\n\n      for (var i = 0; i < mapFilters.length; i++) {\n        console.log(mapFilters[i].label); // this is how you access the label of the array element at position i \n      }\n    };\n\n    this.updateCurrentJob = (job, selected) => {\n      if (selected == true) {\n        // job just got selected\n        this.setState({\n          currentJob: job\n        });\n        this.setState({\n          currentJobName: job.jobName\n        });\n      } else {\n        // job just got de-selected\n        this.setState({\n          currentJob: \"\"\n        });\n        this.setState({\n          currentJobName: \"\"\n        });\n      }\n    };\n\n    this.toggleSelectedCard = () => {\n      if (this.state.selectedJobCheck == false) this.setState({\n        selectedJobCheck: true\n      });else this.setState({\n        selectedJobCheck: false\n      });\n    };\n\n    this.toggleSelectedPlanCheck = () => {\n      if (this.state.selectedPlanCheck == false) this.setState({\n        selectedPlanCheck: true\n      });else this.setState({\n        selectedPlanCheck: false\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(HomeScreen, {\n      jobCards: this.state.jobCards,\n      currentState: this.state.currentState,\n      changeSelectedFilters: this.changeSelectedFilters,\n      changeCurrentState: this.changeCurrentState,\n      currentJob: this.state.currentJob,\n      updateCurrentJob: this.updateCurrentJob,\n      selectedPlanCheck: this.state.selectedPlanCheck,\n      toggleSelectedPlanCheck: this.toggleSelectedPlanCheck,\n      selectedJobCheck: this.state.selectedJobCheck,\n      toggleSelectedCard: this.toggleSelectedCard,\n      enactedPlan: this.state.enactedPlan,\n      deleteJob: this.deleteJob,\n      deletePlan: this.deletePlan,\n      createJob: this.createJob,\n      cancelJob: this.cancelJob,\n      generateBoxWhiskerValues: this.generateBoxWhiskerValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(DeveloperScreen, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/danielhamam/Desktop/Computer_Programming/Broncos_Project/client/src/App.js"],"names":["HomeScreen","DeveloperScreen","React","Component","BrowserRouter","Route","Redirect","Switch","endpoint","testJobCards","App","state","currentState","enactedPlan","jobCards","jobs","currentJob","selectedFilters","precinctView","districtView","stateView","selectedPlanCheck","selectedJobCheck","changeCurrentState","stateName","setState","createJob","userInputs","res","generateJob","cancelJob","job","indexOfJob","indexOf","splice","deleteJob","deletePlan","plan","type","indexOfPlan","districtPlans","generateBoxWhiskerValues","console","log","exception","error","changeSelectedFilters","mapFilters","i","length","label","updateCurrentJob","selected","currentJobName","jobName","toggleSelectedCard","toggleSelectedPlanCheck","render"],"mappings":"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","sourcesContent":["import HomeScreen from \"./components/homePage/HomeScreen\";\nimport DeveloperScreen from \"./components/developerscreen/Developer\"\nimport React, { Component } from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Switch from \"react-bootstrap/esm/Switch\";\nimport * as endpoint from './endpoint/Client';\nimport testJobCards from './json/TestJobCards.json'\nimport './css/project_styles.css';\n\n// App.js is the parent component\nclass App extends Component {\n    state = {\n\n      // State:\n      currentState : \"Select a state\",\n      enactedPlan : testJobCards.enactedPlan,\n\n      // Jobs:\n      jobCards : testJobCards.jobs, // holds all the jobs retrieved back from the serverside (UPDATED BY JSON)\n      currentJob : \"\",\n\n      // Map View Filters:\n      selectedFilters : null, // current demographic filters\n      precinctView : false, // show precincts\n      districtView : false, // show districts\n      stateView : true, // show stateView\n\n      // Checks for Selection\n      selectedPlanCheck: false,\n      selectedJobCheck: false\n\n      // Modals\n\n\n      // selectedJobName : \"\", // take name of selected district\n      // selectedPlanName : \"\", // take name of selected district\n      // todoLists: testTodoListData.todoLists, // Portion of my code taken from CSE 316\n      \n    }\n\n   /**\n   * This function updates which state is selected, and fetches data pertaining to the state from the server.\n   * \n   * @param {String} stateName The state to now be shown to the user\n   * \n   * In addition to changing the state name, the function takes updates \"Your Jobs\", which hold the jobs\n   * belonging to the selected state (updates the array), and updates STATE DETAILS\n   * \n   */\n  changeCurrentState = async (stateName) => {\n    // let getState =  {\n    //   state: stateName\n    // }\n    // try {\n    //   let res = await endpoint.getState(getState);\n    //   console.log(res)\n      this.setState({currentState : stateName});\n      // this.setState({ jobCards : ____}); // update the jobCards in state\n    // } catch (exception) {\n    //   console.error(exception);\n    // }\n  }\n\n   /**\n   * This function creates a new job and calls generateJob in the Client.js endpoint\n   * \n   * @param {Array} userInputs Holds the inputs entered by the user to generate a new job\n   * \n   * Inputs: Districts (int), Districting Plans (int), Compactness (String), Population Difference (int (%)), \n   * Minority Focus Group(s) (Array<String>) , Job Name (String)\n   *\n   * the event occurs.\n   */\n  createJob = async (userInputs) => { // userInputs is an OBJECT of the constraints user selected. Let's gather them here. \n      \n      let res = await endpoint.generateJob(userInputs); // use of .then here? or keep that in client.js for fetch?\n  }\n\n   /**\n   * This function CANCELS a job by sending the job object to the server, receives \"successfully cancelled\" status back.\n   * \n   * @param {String} job Represents the object of the PENDING job to be cancelled.\n   * \n   */\n  cancelJob = (job) => { // string\n    // Remove job from jobCards\n    let indexOfJob = this.state.jobCards.indexOf(job);\n    if (indexOfJob >= 0)\n        this.state.jobCards.splice(indexOfJob, 1);\n    this.setState({ jobCards : this.state.jobCards})\n  }\n   /**\n   * This function DELETES a job by sending the job object to the server, receives \"successfully deleted\" status back.\n   * \n   * @param {String} job Represents the object of the DELETED job to be cancelled.\n   * \n   */\n  deleteJob = (job) => { // string\n    // Remove job from jobCards\n    let indexOfJob = this.state.jobCards.indexOf(job);\n    if (indexOfJob >= 0)\n        this.state.jobCards.splice(indexOfJob, 1);\n    this.setState({ jobCards : this.state.jobCards})\n  }\n\n   /**\n   * This function DELETES a plan from the currently selected job\n   * \n   * @param {String} plan Represents the plan object to be deleted.\n   * \n   * Job can either be none (enacted plan) or currentJob (average, random, extreme)\n   * \n   * NOTE: This isn't a required use case. This won't actually delete a plan, but would get rid \n   * of current view of it. It will re-appear if the webpage is refreshed. \n   * \n   */\n  deletePlan = (plan) => { // string\n\n    // What plan is it?\n    if (this.state.currentJob != \"\" && plan.type != \"Enacted Plan\") {\n      let job = this.state.currentJob;\n      let indexOfJob = this.state.jobCards.indexOf(job);\n      let indexOfPlan = this.state.jobCards[indexOfJob].districtPlans.indexOf(plan);\n      if (indexOfPlan >= 0)\n        this.state.jobCards[indexOfJob].districtPlans.splice(indexOfPlan, 1);\n      this.setState({ jobCards : this.state.jobCards})\n    }\n    // else, we are deleting the enacted plan\n    // this.state.jobCards.enactedPlan.splice(indexOfPlan, 1);\n    \n    this.setState({ jobCards : this.state.jobCards})\n\n  }\n\n   /**\n   * This function \n   * \n   * Sending: {currentJob} which stands for the currently selected job by the user. This is the job the user wants to view\n   * the box and whisker plot for, and would like to compare to enacted plan.\n   * \n   * Note: Through the job object, we are telling the server the focus minority or minorities analyzed, which were \n   * selected when generating the currently selected job. This is to generate their voting age population(s) per indexed \n   * district in the selected district plan\n   * \n   */\n  generateBoxWhiskerValues = () => {\n    console.log(\"sending this:\");\n    console.log(this.state.currentJob)\n    try {\n      // let res = await endpoint.getState(currentJob);\n      // console.log(res)\n    } catch (exception) {\n      console.error(exception);\n    }\n  }\n\n   /**\n   * This function updates the currently selected filters so as to change the view of the demographic heat map\n   * \n   * @param {Array<String>} mapFilters Represents the map filters selected by the user, can be either \n   * cluster or demographic heat map. Multiple filters can be invoked at the same time. \n   * \n   */\n  changeSelectedFilters = (mapFilters) => {\n    // open questions: check if change for demographic heat map or for cluster? Separate functions?\n      // does updates one at a time (but if you have two filters does it over again)\n    this.setState({selectedFilters : mapFilters});\n    for (var i = 0; i < mapFilters.length; i++) {\n      console.log(mapFilters[i].label); // this is how you access the label of the array element at position i \n    }\n  }\n\n   /**\n   * This function updates the currentJob state variable to the user-selected job \n   * \n   * @param {JobCard} Job Represents the object of the SELECTED job by the user.\n   * \n   */\n  updateCurrentJob = (job, selected) => {\n    if (selected == true) { // job just got selected\n      this.setState({currentJob : job});\n      this.setState({currentJobName : job.jobName});\n    }\n    else { // job just got de-selected\n      this.setState({currentJob : \"\"});\n      this.setState({currentJobName : \"\"});\n    }\n  }\n\n\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n// --------------------------------------------------------------------------\n  \n  toggleSelectedCard = () => {\n    if (this.state.selectedJobCheck == false) this.setState({selectedJobCheck : true});\n    else this.setState({selectedJobCheck : false});\n}\n\n  toggleSelectedPlanCheck = () => {\n    if (this.state.selectedPlanCheck == false) this.setState({selectedPlanCheck: true});\n    else this.setState({selectedPlanCheck : false});\n}\n\n  render() {\n  return (\n    <div >\n\n            <HomeScreen \n            jobCards={this.state.jobCards} currentState={this.state.currentState} changeSelectedFilters={this.changeSelectedFilters} changeCurrentState={this.changeCurrentState} \n            currentJob ={this.state.currentJob} updateCurrentJob={this.updateCurrentJob} selectedPlanCheck={this.state.selectedPlanCheck} \n            toggleSelectedPlanCheck={this.toggleSelectedPlanCheck} selectedJobCheck={this.state.selectedJobCheck} toggleSelectedCard={this.toggleSelectedCard}\n            enactedPlan = {this.state.enactedPlan} deleteJob={this.deleteJob} deletePlan={this.deletePlan} createJob={this.createJob} cancelJob={this.cancelJob}\n            generateBoxWhiskerValues={this.generateBoxWhiskerValues}\n            />\n\n            <DeveloperScreen/>            \n\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}