{"ast":null,"code":"const SERVER_ORIGIN = \"localhost:8080\";\nconst URL = \"http://\" + SERVER_ORIGIN;\nconst myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n\nfunction createFetchOptions(method, data) {\n  let body = JSON.stringify(data);\n  let requestOptions = {\n    method: method,\n    mode: 'cors',\n    headers: myHeaders,\n    body: body\n  };\n  return requestOptions;\n}\n\nexport async function generateBatch(data) {\n  console.log(\"client.js\");\n  createFetchOptions(\"POST\", data);\n  return await fetch(URL + \"/home\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error is:', error));\n}\nvar raw = JSON.stringify({\n  \"state\": \"NY\"\n});\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  body: raw,\n  redirect: 'follow'\n};\nfetch(\"localhost:8080/home\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error', error));\nexport const getState = () => {\n  // Default options are marked with *\n  console.log(\"asdf\"); // return await fetch('http://localhost:8080/home',{ \n  //     method: 'get',\n  //     headers: {\n  //     'Accept': 'application/json, text/plain, */*',\n  //     'Content-Type': 'application/json',\n  //     },\n  //     credentials: 'same-origin',\n  //     body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n  // }).then(res => res.json());\n\n  var myHeaders = new Headers();\n  myHeaders.append(\"Content-Type\", \"application/json\");\n  myHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n  var raw = JSON.stringify({\n    \"state\": \"NY\"\n  });\n  var requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow',\n    mode: 'cors'\n  };\n  const a = fetch(\"http://localhost:8080/home\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log('error and here is it:', error));\n};","map":{"version":3,"sources":["/Users/carloslopez/Desktop/SCHOOL/ComputerScience/CSE416/CSE-416-Project/client/src/endpoint/Client.js"],"names":["SERVER_ORIGIN","URL","myHeaders","Headers","append","createFetchOptions","method","data","body","JSON","stringify","requestOptions","mode","headers","generateBatch","console","log","fetch","then","response","text","result","catch","error","raw","redirect","getState","a"],"mappings":"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","sourcesContent":["const SERVER_ORIGIN  = \"localhost:8080\" \nconst URL = \"http://\" + SERVER_ORIGIN;\nconst myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n\n\nfunction createFetchOptions(method, data){\n    let body = JSON.stringify(data)\n    let requestOptions = {\n        method: method,\n        mode: 'cors',\n        headers: myHeaders,\n        body: body\n    }\n    return requestOptions\n}\n\nexport async function generateBatch(data){\n    console.log(\"client.js\")\n    createFetchOptions(\"POST\", data);\n    return await fetch(URL+\"/home\", requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log('error is:', error));\n\n  }\n  \n\n\nvar raw = JSON.stringify({\"state\":\"NY\"});\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  body: raw,\n  redirect: 'follow'\n};\n\nfetch(\"localhost:8080/home\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));\n\n\nexport const getState = () => {\n    // Default options are marked with *\n    console.log(\"asdf\");\n    // return await fetch('http://localhost:8080/home',{ \n    //     method: 'get',\n    //     headers: {\n    //     'Accept': 'application/json, text/plain, */*',\n    //     'Content-Type': 'application/json',\n    //     },\n    //     credentials: 'same-origin',\n    //     body: JSON.stringify(data) // body data type must match \"Content-Type\" header\n    // }).then(res => res.json());\n    var myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    myHeaders.append(\"Access-Control-Allow-Origin\", \"*\");\n\n    var raw = JSON.stringify({\"state\":\"NY\"});\n\n    var requestOptions = {\n    method: 'GET',\n    headers: myHeaders,\n    redirect: 'follow',\n    mode: 'cors',\n    \n    };\n\n    const a = fetch(\"http://localhost:8080/home\", requestOptions)\n    .then(response => response.text())\n    .then(result => console.log(result))\n    .catch(error => console.log('error and here is it:', error));\n\n\n  }\n\n"]},"metadata":{},"sourceType":"module"}